{"file_contents":{"client/src/pages/profile/index.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { useAuth } from '@/lib/auth';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Loader2, Shield, Award, User, Camera } from 'lucide-react';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { toast } from '@/components/ui/use-toast';\nimport { supabase } from '@/integrations/supabase/client';\nimport { getAvatarFallbackText } from '@/lib/auth/utils';\n\nexport default function Profile() {\n  const { user, isLoading, updateProfile } = useAuth();\n  const [isUploading, setIsUploading] = useState(false);\n\n  const handleAvatarUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || !files[0] || !user) return;\n    \n    const file = files[0];\n    \n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Пожалуйста, загрузите изображение\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    // Validate file size (max 2MB)\n    if (file.size > 2 * 1024 * 1024) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Размер изображения не должен превышать 2MB\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    \n    setIsUploading(true);\n    \n    try {\n      // Create a unique filename\n      const fileName = `avatar-${user.id}-${Date.now()}`;\n      const fileExt = file.name.split('.').pop();\n      const filePath = `${fileName}.${fileExt}`;\n      \n      console.log('Uploading avatar to path:', filePath);\n      \n      // Upload the file\n      const { error: uploadError } = await supabase.storage\n        .from('avatars')\n        .upload(filePath, file);\n      \n      if (uploadError) {\n        console.error('Error uploading avatar:', uploadError);\n        throw uploadError;\n      }\n      \n      // Get the public URL\n      const { data: { publicUrl } } = supabase.storage\n        .from('avatars')\n        .getPublicUrl(filePath);\n      \n      console.log('Avatar uploaded, public URL:', publicUrl);\n      \n      // Update the user profile with the new avatar URL\n      await updateProfile({ avatar: publicUrl });\n      \n      // Update the avatar_url in the profiles table\n      const { error: updateError } = await supabase\n        .from('profiles')\n        .update({ \n          avatar_url: publicUrl,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', user.id);\n        \n      if (updateError) {\n        console.error('Error updating profile in database:', updateError);\n      }\n      \n      toast({\n        title: \"Успешно\",\n        description: \"Аватар успешно обновлен\",\n      });\n    } catch (error: any) {\n      console.error('Error uploading avatar:', error);\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось загрузить аватар\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-cyberdark-900 p-4\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-cyberblue-500 mb-4\" />\n        <p className=\"text-gray-400\">Загрузка профиля...</p>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-cyberdark-900 p-4\">\n        <div className=\"text-center\">\n          <User className=\"h-12 w-12 text-gray-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-white mb-2\">Профиль недоступен</h2>\n          <p className=\"text-gray-400 mb-6\">Войдите в аккаунт, чтобы увидеть ваш профиль</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Рассчитываем прогресс до следующего уровня\n  const levelProgress = (user.points % 100) / 100 * 100; // Предполагаем, что каждые 100 очков - новый уровень\n  const pointsToNextLevel = 100 - (user.points % 100);\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 pt-20 pb-10 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex flex-col items-center mb-8\">\n          <div className=\"relative group\">\n            <Avatar className=\"h-24 w-24 rounded-full border-4 border-cyberdark-700\">\n              <AvatarImage src={user.avatar} alt={user.username} />\n              <AvatarFallback className=\"bg-cyberdark-700 text-xl font-bold text-white\">\n                {getAvatarFallbackText(user.username)}\n              </AvatarFallback>\n            </Avatar>\n            \n            <label \n              htmlFor=\"avatar-upload\" \n              className=\"absolute bottom-0 right-0 p-1.5 rounded-full bg-cyberblue-500 hover:bg-cyberblue-600 cursor-pointer\"\n            >\n              {isUploading ? (\n                <Loader2 className=\"h-4 w-4 text-white animate-spin\" />\n              ) : (\n                <Camera className=\"h-4 w-4 text-white\" />\n              )}\n            </label>\n            <input \n              id=\"avatar-upload\" \n              type=\"file\" \n              accept=\"image/*\" \n              className=\"hidden\" \n              onChange={handleAvatarUpload}\n              disabled={isUploading}\n            />\n          </div>\n          \n          <h1 className=\"mt-4 text-3xl font-bold text-white\">{user.username}</h1>\n          <p className=\"text-gray-400\">{user.email}</p>\n          <div className=\"flex items-center mt-2\">\n            <Badge variant=\"secondary\" className=\"mr-2 bg-cyberdark-800 text-white\">\n              {user.role === 'admin' ? 'Администратор' : 'Пользователь'}\n            </Badge>\n            <Badge variant=\"outline\" className=\"border-cyberblue-500 text-cyberblue-500\">\n              Зарегистрирован {new Date(user.createdAt).toLocaleDateString()}\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-cyberdark-800 border-cyberdark-700\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-white flex items-center text-lg\">\n                <Award className=\"h-5 w-5 mr-2 text-cyberblue-500\" />\n                Уровень\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-white mb-2\">{user.level}</div>\n              <div className=\"mb-2\">\n                <Progress value={levelProgress} className=\"h-2 bg-cyberdark-700\" />\n              </div>\n              <p className=\"text-sm text-gray-400\">\n                {pointsToNextLevel} очков до следующего уровня\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-cyberdark-800 border-cyberdark-700\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-white flex items-center text-lg\">\n                <Shield className=\"h-5 w-5 mr-2 text-cyberblue-500\" />\n                Очки\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-white mb-2\">{user.points}</div>\n              <p className=\"text-sm text-gray-400\">\n                Заработано за участие в CTF соревнованиях и выполнение заданий\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-cyberdark-800 border-cyberdark-700\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-white flex items-center text-lg\">\n                <Shield className=\"h-5 w-5 mr-2 text-cyberblue-500\" />\n                Статус\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-lg font-bold text-white mb-2\">\n                {user.level < 5 ? 'Начинающий' : \n                 user.level < 10 ? 'Продвинутый' : \n                 user.level < 15 ? 'Эксперт' : 'Мастер'}\n              </div>\n              <p className=\"text-sm text-gray-400\">\n                Статус отражает ваш уровень опыта в кибербезопасности\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className=\"bg-cyberdark-800 border-cyberdark-700 mb-8\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">Достижения</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n              {/* Заглушка достижений */}\n              <div className=\"flex items-center p-3 rounded-lg border border-cyberdark-700 bg-cyberdark-900\">\n                <div className=\"mr-3 p-2 rounded-full bg-cyberdark-800\">\n                  <Award className=\"h-6 w-6 text-gray-500\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-300\">???</p>\n                  <p className=\"text-xs text-gray-500\">Не разблокировано</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center p-3 rounded-lg border border-cyberdark-700 bg-cyberdark-900\">\n                <div className=\"mr-3 p-2 rounded-full bg-cyberdark-800\">\n                  <Award className=\"h-6 w-6 text-gray-500\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-300\">???</p>\n                  <p className=\"text-xs text-gray-500\">Не разблокировано</p>\n                </div>\n              </div>\n\n              <div className=\"flex items-center p-3 rounded-lg border border-cyberdark-700 bg-cyberdark-900\">\n                <div className=\"mr-3 p-2 rounded-full bg-cyberdark-800\">\n                  <Award className=\"h-6 w-6 text-gray-500\" />\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-300\">???</p>\n                  <p className=\"text-xs text-gray-500\">Не разблокировано</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10699},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-cyberdark-600 bg-cyberdark-800 px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-cyberdark-800 border-cyberdark-600 text-white shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-cyberdark-700 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","size_bytes":5646},"client/src/components/layout/Navbar.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport cyberWhaleLogo from '@assets/ChatGPT Image 10 авг. 2025 г., 11_21_16_1755449890714.png';\nimport { \n  ChevronDown, \n  Menu, \n  Shield, \n  Database, \n  Bot, \n  Users,\n  X,\n  Globe\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport UserMenu from './UserMenu';\nimport SearchBox from '@/components/search/SearchBox';\nimport { useAuth } from '@/lib/auth/AuthProvider';\nimport { useTranslation } from 'react-i18next';\n\ntype NavLink = {\n  name: string;\n  to: string;\n  icon?: React.ReactNode;\n  submenu?: NavLink[];\n  current?: boolean;\n  requiresAuth?: boolean;\n};\n\nconst navLinks: NavLink[] = [\n  {\n    name: 'navbar.products',\n    to: '/products',\n    icon: <Shield className=\"w-4 h-4 mr-1\" />,\n    requiresAuth: false,\n  },\n  {\n    name: 'navbar.ctf',\n    to: '/ctf',\n    icon: <Shield className=\"w-4 h-4 mr-1\" />,\n    requiresAuth: true,\n  },\n  {\n    name: 'navbar.ai_assistant',\n    to: '/ai-assistant',\n    icon: <Bot className=\"w-4 h-4 mr-1\" />,\n    requiresAuth: true,\n  },\n  {\n    name: 'navbar.community',\n    to: '/community',\n    icon: <Users className=\"w-4 h-4 mr-1\" />,\n    requiresAuth: true,\n  },\n  {\n    name: 'navbar.knowledge',\n    to: '/knowledge',\n    icon: <Database className=\"w-4 h-4 mr-1\" />,\n    requiresAuth: false,\n  },\n];\n\nexport default function Navbar() {\n  const { t, i18n } = useTranslation();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [isMobileSearchVisible, setIsMobileSearchVisible] = useState(false);\n  const [isLanguageMenuOpen, setIsLanguageMenuOpen] = useState(false);\n\n  const updatedNavLinks = navLinks.map(link => ({\n    ...link,\n    current: location.pathname === link.to || location.pathname.startsWith(`${link.to}/`),\n    submenu: link.submenu\n      ? link.submenu.map(sublink => ({\n          ...sublink,\n          current: location.pathname === sublink.to,\n        }))\n      : undefined,\n  }));\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 10);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const handleNavLinkClick = (link: NavLink) => {\n    if (link.requiresAuth && !user) {\n      navigate('/login?returnUrl=' + encodeURIComponent(link.to));\n      setMobileMenuOpen(false);\n      return;\n    }\n  };\n\n  const isExternalLink = (url: string) => url.startsWith('http');\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng);\n    setIsLanguageMenuOpen(false);\n  };\n\n  return (\n    <nav\n      className={cn(\n        \"fixed top-0 inset-x-0 z-50 transition-all duration-300\",\n        isScrolled || mobileMenuOpen\n          ? \"bg-cyberblue-900/95 backdrop-blur-md border-b border-cyberblue-800/50 shadow-md\"\n          : \"bg-gradient-to-b from-cyberdark-900/95 to-cyberdark-900/75 border-b border-cyberdark-800/30\"\n      )}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div className=\"flex items-center flex-shrink-0\">\n            <Link to=\"/\" className=\"flex items-center space-x-2\">\n              <img \n                src={cyberWhaleLogo} \n                alt=\"CyberWhale\" \n                className=\"w-8 h-8 object-contain\"\n              />\n              <span className=\"text-xl font-bold text-white tracking-tight\">CyberWhale</span>\n            </Link>\n          </div>\n\n          <div className=\"flex items-center flex-1 justify-end space-x-2 md:space-x-4\">\n            <div className=\"hidden md:flex items-center space-x-1\">\n              {updatedNavLinks.map((link) => {\n                const handleClick = () => handleNavLinkClick(link);\n                \n                const LinkComponent = isExternalLink(link.to) ? (\n                  <a\n                    href={link.to}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={cn(\n                      \"flex items-center px-2 py-2 text-sm font-medium transition-colors relative\",\n                      link.current\n                        ? \"text-white after:content-[''] after:absolute after:bottom-0 after:left-0 after:right-0 after:h-[2px] after:bg-white\"\n                        : \"text-gray-300 hover:text-white hover:after:content-[''] hover:after:absolute hover:after:bottom-0 hover:after:left-0 hover:after:right-0 hover:after:h-[2px] hover:after:bg-white/50\"\n                    )}\n                  >\n                    {link.icon}\n                    {t(link.name)}\n                  </a>\n                ) : (\n                  <Link\n                    to={!link.requiresAuth || user ? link.to : '/login?returnUrl=' + encodeURIComponent(link.to)}\n                    className={cn(\n                      \"flex items-center px-2 py-2 text-sm font-medium transition-colors relative\",\n                      link.current\n                        ? \"text-white after:content-[''] after:absolute after:bottom-0 after:left-0 after:right-0 after:h-[2px] after:bg-white\"\n                        : \"text-gray-300 hover:text-white hover:after:content-[''] hover:after:absolute hover:after:bottom-0 hover:after:left-0 hover:after:right-0 hover:after:h-[2px] hover:after:bg-white/50\"\n                    )}\n                    onClick={handleClick}\n                  >\n                    {link.icon}\n                    {t(link.name)}\n                    {link.submenu && (\n                      <ChevronDown className=\"ml-1 w-4 h-4 transition-transform group-hover:rotate-180\" />\n                    )}\n                  </Link>\n                );\n\n                return (\n                  <div key={link.to} className=\"relative group\">\n                    {LinkComponent}\n                    {link.submenu && (\n                      <div className=\"absolute left-0 mt-1 w-48 rounded-md shadow-lg bg-cyberblue-900 py-1 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-150 transform origin-top-right\">\n                        {link.submenu.map((sublink) => (\n                          <Link\n                            key={sublink.to}\n                            to={sublink.to}\n                            className={cn(\n                              \"block px-4 py-2 text-sm\",\n                              sublink.current\n                                ? \"text-white after:content-[''] after:absolute after:bottom-0 after:left-0 after:right-0 after:h-[2px] after:bg-white\"\n                                : \"text-gray-300 hover:text-white hover:after:content-[''] hover:after:bottom-0 hover:after:left-0 hover:after:right-0 hover:after:h-[2px] hover:after:bg-white/50\"\n                            )}\n                          >\n                            {t(sublink.name)}\n                          </Link>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n              {/* Language Switcher for Desktop */}\n              <div className=\"relative\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsLanguageMenuOpen(!isLanguageMenuOpen)}\n                  className=\"text-gray-300 hover:text-white hover:bg-cyberblue-800/40\"\n                >\n                  <Globe className=\"w-5 h-5\" />\n                </Button>\n                {isLanguageMenuOpen && (\n                  <div className=\"absolute right-0 mt-2 w-32 rounded-md shadow-lg bg-cyberblue-900 py-1 z-50\">\n                    <button\n                      onClick={() => changeLanguage('en')}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-gray-300 hover:text-white hover:bg-cyberblue-700/50\"\n                    >\n                      English\n                    </button>\n                    <button\n                      onClick={() => changeLanguage('ru')}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-gray-300 hover:text-white hover:bg-cyberblue-700/50\"\n                    >\n                      Русский\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n            <SearchBox className=\"w-40 md:w-48 flex-shrink-0\" />\n            <UserMenu />\n            <div className=\"flex items-center md:hidden\">\n              <button\n                onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n                className=\"p-2 rounded-md text-gray-400 hover:text-white hover:bg-cyberblue-800/40\"\n              >\n                {mobileMenuOpen ? (\n                  <X className=\"h-6 w-6\" aria-hidden=\"true\" />\n                ) : (\n                  <Menu className=\"h-6 w-6\" aria-hidden=\"true\" />\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile menu */}\n      {mobileMenuOpen && (\n        <div className=\"md:hidden bg-cyberblue-900/95 backdrop-blur-md border-b border-cyberblue-800/50 animate-fade-in\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n            {updatedNavLinks.map((link) => {\n              const handleClick = () => handleNavLinkClick(link);\n              \n              const MobileLinkComponent = isExternalLink(link.to) ? (\n                <a\n                  href={link.to}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className={cn(\n                    \"block px-3 py-2 rounded-md text-base font-medium relative\",\n                    link.current\n                      ? \"text-white after:content-[''] after:absolute after:bottom-0 after:left-0 after:right-0 after:h-[2px] after:bg-white\"\n                      : \"text-gray-300 hover:text-white hover:after:content-[''] hover:after:bottom-0 hover:after:left-0 hover:after:right-0 hover:after:h-[2px] hover:after:bg-white/50\"\n                  )}\n                  onClick={() => setMobileMenuOpen(false)}\n                >\n                  <div className=\"flex items-center\">\n                    {link.icon}\n                    {t(link.name)}\n                  </div>\n                </a>\n              ) : (\n                <Link\n                  to={!link.requiresAuth || user ? link.to : '/login?returnUrl=' + encodeURIComponent(link.to)}\n                  className={cn(\n                    \"block px-3 py-2 rounded-md text-base font-medium relative\",\n                    link.current\n                      ? \"text-white after:content-[''] after:absolute after:bottom-0 after:left-0 after:right-0 after:h-[2px] after:bg-white\"\n                      : \"text-gray-300 hover:text-white hover:after:content-[''] hover:after:bottom-0 hover:after:right-0 hover:after:h-[2px] hover:after:bg-white/50\"\n                  )}\n                  onClick={(e) => {\n                    if (link.requiresAuth && !user) {\n                      e.preventDefault();\n                      handleClick();\n                    } else {\n                      setMobileMenuOpen(false);\n                    }\n                  }}\n                >\n                  <div className=\"flex items-center\">\n                    {link.icon}\n                    {t(link.name)}\n                  </div>\n                </Link>\n              );\n\n              return (\n                <React.Fragment key={link.to}>\n                  {MobileLinkComponent}\n                  {link.submenu && (\n                    <div className=\"pl-4 space-y-1\">\n                      {link.submenu.map((sublink) => (\n                        <Link\n                          key={sublink.to}\n                          to={sublink.to}\n                          className={cn(\n                            \"block px-3 py-2 rounded-md text-sm font-medium relative\",\n                            sublink.current\n                              ? \"text-white after:content-[''] after:absolute after:bottom-0 after:left-0 after:right-0 after:h-[2px] after:bg-white\"\n                              : \"text-gray-300 hover:text-white hover:after:content-[''] hover:after:bottom-0 hover:after:left-0 hover:after:right-0 hover:after:h-[2px] hover:after:bg-white/50\"\n                          )}\n                          onClick={() => setMobileMenuOpen(false)}\n                        >\n                          {t(sublink.name)}\n                        </Link>\n                      ))}\n                    </div>\n                  )}\n                </React.Fragment>\n              );\n            })}\n            {/* Language Switcher for Mobile */}\n            <div className=\"px-3 py-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsLanguageMenuOpen(!isLanguageMenuOpen)}\n                className=\"text-gray-300 hover:text-white hover:bg-cyberblue-800/40\"\n              >\n                <Globe className=\"w-5 h-5 mr-2\" />\n                {i18n.language === 'en' ? 'English' : 'Русский'}\n              </Button>\n              {isLanguageMenuOpen && (\n                <div className=\"mt-2 w-full rounded-md shadow-lg bg-cyberblue-900 py-1\">\n                  <button\n                    onClick={() => changeLanguage('en')}\n                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-300 hover:text-white hover:bg-cyberblue-700/50\"\n                  >\n                    English\n                  </button>\n                  <button\n                    onClick={() => changeLanguage('ru')}\n                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-300 hover:text-white hover:bg-cyberblue-700/50\"\n                  >\n                    Русский\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n          <div className=\"pt-4 pb-3 border-t border-cyberblue-800/50\">\n            <div className=\"px-4 py-2\">\n              <SearchBox className=\"w-full mb-3\" />\n              <UserMenu />\n            </div>\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}","size_bytes":14417},"client/src/pages/ai-assistant/index.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { \n  Bot, \n  Send, \n  ArrowRight, \n  Check, \n  BrainCog, \n  Rocket, \n  Shield, \n  Code, \n  BookOpen, \n  Zap, \n  Clock\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\n\ntype Message = {\n  id: string;\n  text: string;\n  isBot: boolean;\n  timestamp: Date;\n};\n\nexport default function AIAssistant() {\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: 'Привет! Я CyberWhale, ваш ИИ-наставник по кибербезопасности. Давайте начнем наше увлекательное путешествие! 🖊️',\n      isBot: true,\n      timestamp: new Date(),\n    },\n  ]);\n  const [isTyping, setIsTyping] = useState(false);\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n    if (messages.length === 1) {\n      inputRef.current?.focus();\n    }\n  }, [messages]);\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim()) return;\n\n    // Add user message\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: message,\n      isBot: false,\n      timestamp: new Date(),\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setMessage('');\n    setIsTyping(true);\n\n    // Simulate bot response\n    setTimeout(() => {\n      const botResponses = [\n        \"Отличный вопрос! В кибербезопасности очень важно начинать с основ. Я рекомендую изучить наш раздел по веб-уязвимостям. Там вы найдете материалы для начинающих. Также попробуйте решить несколько простых CTF-заданий для практики.\",\n        \"Для начинающих в CTF рекомендую начать с простых задач в разделе Web. Там вы найдете задания для новичков с подробными объяснениями. Постепенно переходите к более сложным заданиям по мере получения опыта.\",\n        \"Криптография - увлекательное направление! Вы можете найти материалы в нашей базе знаний и практические задания на платформе CTF. Начните с изучения основных алгоритмов шифрования, таких как AES и RSA.\",\n        \"Обязательно ознакомьтесь с нашими лабораторными работами для практики. Теория важна, но практика — ключ к успеху в кибербезопасности. У нас есть виртуальные лаборатории для безопасного тестирования различных уязвимостей.\",\n        \"В нашем сообществе много опытных специалистов. Не стесняйтесь задавать вопросы и делиться своим опытом! Также регулярно проводятся мероприятия и вебинары, где вы можете получить новые знания и установить полезные контакты.\"\n      ];\n      \n      const randomResponse = botResponses[Math.floor(Math.random() * botResponses.length)];\n      \n      const botMessage: Message = {\n        id: Date.now().toString(),\n        text: randomResponse,\n        isBot: true,\n        timestamp: new Date(),\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      setIsTyping(false);\n    }, 1500);\n  };\n\n  // Example questions\n  const exampleQuestions = [\n    \"Как начать изучение кибербезопасности?\",\n    \"Что такое SQL-инъекции и как от них защититься?\",\n    \"Как решать CTF задания по криптографии?\",\n    \"Какие инструменты нужны для тестирования на проникновение?\",\n    \"Как защитить веб-приложение от XSS атак?\"\n  ];\n\n  const handleExampleQuestion = (question: string) => {\n    setMessage(question);\n    inputRef.current?.focus();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <Navbar />\n      \n      <div className=\"pt-20 flex-grow\">\n        {/* Hero section */}\n        <div className=\"bg-gradient-to-b from-cyberdark-800 to-cyberdark-900\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n            <div className=\"text-center max-w-3xl mx-auto\">\n              <h1 className=\"text-3xl font-bold text-white sm:text-4xl mb-4\">\n                ИИ АССИСТЕНТ\n              </h1>\n              <h2 className=\"text-2xl sm:text-3xl font-bold mb-6\">\n                <span className=\"text-gradient\">Получайте мгновенную помощь и рекомендации</span>\n              </h2>\n              <p className=\"text-lg text-gray-300 mb-6\">\n                Наш продвинутый ИИ-ассистент всегда готов помочь вам с изучением кибербезопасности, решением задач и \n                предоставлением персонализированных рекомендаций.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"flex flex-col lg:flex-row gap-8\">\n            {/* Chat interface */}\n            <div className=\"lg:w-2/3\">\n              <div className=\"bg-cyberdark-800 rounded-lg border border-cyberdark-700 overflow-hidden shadow-lg\">\n                {/* Chat header */}\n                <div className=\"bg-cyberdark-700 p-4 flex items-center border-b border-cyberdark-600\">\n                  <div className=\"w-10 h-10 bg-cyberblue-500 rounded-full flex items-center justify-center mr-3\">\n                    <Bot className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-medium text-white\">CyberWhale ИИ</h3>\n                    <div className=\"text-xs text-gray-400\">Уровень 1 • 0 очков</div>\n                  </div>\n                </div>\n                \n                {/* Chat messages */}\n                <div className=\"p-4 h-[500px] overflow-y-auto\">\n                  <div className=\"space-y-4\">\n                    {messages.map((msg) => (\n                      <div \n                        key={msg.id} \n                        className={`flex ${msg.isBot ? \"justify-start\" : \"justify-end\"}`}\n                      >\n                        {msg.isBot && (\n                          <div className=\"w-8 h-8 bg-cyberblue-500 rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                            <Bot className=\"w-4 h-4 text-white\" />\n                          </div>\n                        )}\n                        <div \n                          className={`max-w-[80%] rounded-lg p-3 ${\n                            msg.isBot ? \"bg-cyberdark-700 text-white\" : \"bg-cyberblue-500 text-white\"\n                          }`}\n                        >\n                          {msg.text}\n                          <div \n                            className={`text-xs mt-1 opacity-70 ${\n                              msg.isBot ? \"text-left\" : \"text-right\"\n                            }`}\n                          >\n                            {msg.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                          </div>\n                        </div>\n                        {!msg.isBot && (\n                          <div className=\"w-8 h-8 bg-cyberblue-600 rounded-full flex items-center justify-center ml-2 flex-shrink-0\">\n                            <User className=\"w-4 h-4 text-white\" />\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                    {isTyping && (\n                      <div className=\"flex justify-start\">\n                        <div className=\"w-8 h-8 bg-cyberblue-500 rounded-full flex items-center justify-center mr-2 flex-shrink-0\">\n                          <Bot className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div className=\"bg-cyberdark-700 rounded-lg px-4 py-3 text-white\">\n                          <div className=\"flex space-x-2\">\n                            <div className=\"h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.3s]\"></div>\n                            <div className=\"h-2 w-2 bg-white rounded-full animate-bounce [animation-delay:-0.15s]\"></div>\n                            <div className=\"h-2 w-2 bg-white rounded-full animate-bounce\"></div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                    <div ref={messagesEndRef} />\n                  </div>\n                </div>\n                \n                {/* Chat input */}\n                <div className=\"bg-cyberdark-700 p-4 border-t border-cyberdark-600\">\n                  <form onSubmit={handleSubmit} className=\"flex\">\n                    <Input\n                      ref={inputRef}\n                      type=\"text\"\n                      placeholder=\"Задайте вопрос...\"\n                      className=\"bg-cyberdark-600 border-cyberdark-500 flex-1\"\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      disabled={isTyping}\n                    />\n                    <Button \n                      type=\"submit\" \n                      className=\"ml-2 bg-cyberblue-500 hover:bg-cyberblue-600\"\n                      disabled={!message.trim() || isTyping}\n                    >\n                      <Send className=\"h-4 w-4\" />\n                    </Button>\n                  </form>\n                  <div className=\"mt-4\">\n                    <h4 className=\"text-sm text-gray-400 mb-2\">Примеры вопросов:</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {exampleQuestions.map((question, index) => (\n                        <Badge \n                          key={index} \n                          variant=\"outline\" \n                          className=\"bg-cyberdark-600 border-cyberdark-500 cursor-pointer hover:bg-cyberdark-500 transition-colors\"\n                          onClick={() => handleExampleQuestion(question)}\n                        >\n                          {question}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Features sidebar */}\n            <div className=\"lg:w-1/3 space-y-6\">\n              <div className=\"bg-cyberdark-800 rounded-lg border border-cyberdark-700 p-6\">\n                <h3 className=\"text-xl font-bold text-white mb-4 flex items-center\">\n                  <BrainCog className=\"w-5 h-5 mr-2 text-cyberblue-500\" />\n                  Возможности ИИ\n                </h3>\n                <ul className=\"space-y-3\">\n                  <li className=\"flex items-start\">\n                    <div className=\"w-5 h-5 rounded-full bg-cyberblue-500/20 flex items-center justify-center mt-0.5 mr-3 flex-shrink-0\">\n                      <Check className=\"w-3 h-3 text-cyberblue-500\" />\n                    </div>\n                    <span className=\"text-gray-300\">Помощь в изучении кибербезопасности</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-5 h-5 rounded-full bg-cyberblue-500/20 flex items-center justify-center mt-0.5 mr-3 flex-shrink-0\">\n                      <Check className=\"w-3 h-3 text-cyberblue-500\" />\n                    </div>\n                    <span className=\"text-gray-300\">Подсказки для решения CTF заданий</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-5 h-5 rounded-full bg-cyberblue-500/20 flex items-center justify-center mt-0.5 mr-3 flex-shrink-0\">\n                      <Check className=\"w-3 h-3 text-cyberblue-500\" />\n                    </div>\n                    <span className=\"text-gray-300\">Объяснение сложных концепций</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-5 h-5 rounded-full bg-cyberblue-500/20 flex items-center justify-center mt-0.5 mr-3 flex-shrink-0\">\n                      <Check className=\"w-3 h-3 text-cyberblue-500\" />\n                    </div>\n                    <span className=\"text-gray-300\">Рекомендации по инструментам и методам</span>\n                  </li>\n                  <li className=\"flex items-start\">\n                    <div className=\"w-5 h-5 rounded-full bg-cyberblue-500/20 flex items-center justify-center mt-0.5 mr-3 flex-shrink-0\">\n                      <Check className=\"w-3 h-3 text-cyberblue-500\" />\n                    </div>\n                    <span className=\"text-gray-300\">Персонализированное обучение</span>\n                  </li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg border border-cyberdark-700 p-6\">\n                <Tabs defaultValue=\"ctf\">\n                  <TabsList className=\"grid grid-cols-2 mb-4\">\n                    <TabsTrigger value=\"ctf\">CTF Помощь</TabsTrigger>\n                    <TabsTrigger value=\"learn\">Обучение</TabsTrigger>\n                  </TabsList>\n                  <TabsContent value=\"ctf\" className=\"space-y-4\">\n                    <h3 className=\"text-white font-medium\">Как ИИ помогает с CTF:</h3>\n                    <div className=\"bg-cyberdark-700 rounded-md p-3 flex items-start\">\n                      <Shield className=\"w-5 h-5 text-cyberblue-500 mt-0.5 mr-3 flex-shrink-0\" />\n                      <div>\n                        <h4 className=\"text-white font-medium mb-1\">Подсказки без спойлеров</h4>\n                        <p className=\"text-sm text-gray-300\">Получайте наводящие подсказки, которые помогут решить задание, но не раскроют полный ответ.</p>\n                      </div>\n                    </div>\n                    <div className=\"bg-cyberdark-700 rounded-md p-3 flex items-start\">\n                      <Code className=\"w-5 h-5 text-cyberblue-500 mt-0.5 mr-3 flex-shrink-0\" />\n                      <div>\n                        <h4 className=\"text-white font-medium mb-1\">Объяснение концепций</h4>\n                        <p className=\"text-sm text-gray-300\">Понимание основных принципов и технологий, необходимых для решения задач.</p>\n                      </div>\n                    </div>\n                    <Link to=\"/ctf\" className=\"inline-flex items-center text-cyberblue-500 hover:text-cyberblue-400 mt-2\">\n                      Перейти к CTF платформе\n                      <ArrowRight className=\"ml-1 w-4 h-4\" />\n                    </Link>\n                  </TabsContent>\n                  <TabsContent value=\"learn\" className=\"space-y-4\">\n                    <h3 className=\"text-white font-medium\">Как ИИ помогает в обучении:</h3>\n                    <div className=\"bg-cyberdark-700 rounded-md p-3 flex items-start\">\n                      <BookOpen className=\"w-5 h-5 text-cyberblue-500 mt-0.5 mr-3 flex-shrink-0\" />\n                      <div>\n                        <h4 className=\"text-white font-medium mb-1\">Персонализированные пути обучения</h4>\n                        <p className=\"text-sm text-gray-300\">Индивидуальные рекомендации материалов на основе ваших интересов и уровня.</p>\n                      </div>\n                    </div>\n                    <div className=\"bg-cyberdark-700 rounded-md p-3 flex items-start\">\n                      <Rocket className=\"w-5 h-5 text-cyberblue-500 mt-0.5 mr-3 flex-shrink-0\" />\n                      <div>\n                        <h4 className=\"text-white font-medium mb-1\">Интерактивное обучение</h4>\n                        <p className=\"text-sm text-gray-300\">Задавайте вопросы и получайте подробные объяснения сложных тем.</p>\n                      </div>\n                    </div>\n                    <Link to=\"/knowledge\" className=\"inline-flex items-center text-cyberblue-500 hover:text-cyberblue-400 mt-2\">\n                      Перейти к базе знаний\n                      <ArrowRight className=\"ml-1 w-4 h-4\" />\n                    </Link>\n                  </TabsContent>\n                </Tabs>\n              </div>\n            </div>\n          </div>\n          \n          {/* Features section */}\n          <div className=\"mt-16\">\n            <h2 className=\"text-2xl font-bold text-white mb-8 text-center\">Почему стоит использовать ИИ-ассистента</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 flex flex-col\">\n                <div className=\"bg-gradient-to-br from-cyberblue-500 to-cyberblue-700 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <BrainCog className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-bold text-white mb-2\">Интеллектуальные ответы</h3>\n                <p className=\"text-gray-300 flex-grow\">\n                  Получайте точные и контекстуально релевантные ответы на ваши вопросы по кибербезопасности.\n                </p>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 flex flex-col\">\n                <div className=\"bg-gradient-to-br from-cyberblue-500 to-cyberblue-700 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Zap className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-bold text-white mb-2\">Мгновенная помощь</h3>\n                <p className=\"text-gray-300 flex-grow\">\n                  Получайте помощь в режиме реального времени, когда она вам нужна, без необходимости ждать ответа от людей.\n                </p>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 flex flex-col\">\n                <div className=\"bg-gradient-to-br from-cyberblue-500 to-cyberblue-700 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Clock className=\"h-6 w-6 text-white\" />\n                </div>\n                <h3 className=\"text-lg font-bold text-white mb-2\">Доступен 24/7</h3>\n                <p className=\"text-gray-300 flex-grow\">\n                  Наш ИИ-ассистент всегда доступен для помощи, независимо от времени суток или дня недели.\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Testimonials */}\n          <div className=\"mt-16\">\n            <h2 className=\"text-2xl font-bold text-white mb-8 text-center\">Что говорят пользователи</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-cyberdark-600\"></div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"font-medium text-white\">Алексей П.</h4>\n                    <p className=\"text-gray-400 text-sm\">Пентестер</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"ИИ-ассистент помог мне разобраться в сложных концепциях криптографии. Объяснения очень понятные и легко усваиваются.\"\n                </p>\n                <div className=\"flex text-yellow-500\">\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                </div>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-cyberdark-600\"></div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"font-medium text-white\">Мария С.</h4>\n                    <p className=\"text-gray-400 text-sm\">Студентка</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"Как новичку в кибербезопасности, ИИ-ассистент стал для меня настоящим спасением. Он терпеливо отвечает на все мои вопросы и направляет обучение.\"\n                </p>\n                <div className=\"flex text-yellow-500\">\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                </div>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-cyberdark-600\"></div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"font-medium text-white\">Дмитрий В.</h4>\n                    <p className=\"text-gray-400 text-sm\">Разработчик</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"Использую ИИ-ассистента при решении CTF задач. Подсказки очень помогают, при этом не раскрывая полностью решение.\"\n                </p>\n                <div className=\"flex text-yellow-500\">\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <HalfStarIcon />\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* CTA section */}\n          <div className=\"mt-16 bg-gradient-to-r from-cyberdark-800 to-cyberdark-700 rounded-lg overflow-hidden border border-cyberdark-700\">\n            <div className=\"md:flex\">\n              <div className=\"p-8 md:w-2/3\">\n                <h2 className=\"text-2xl font-bold text-white mb-4\">\n                  Начните использовать ИИ-ассистента сегодня\n                </h2>\n                <p className=\"text-gray-300 mb-6\">\n                  Зарегистрируйтесь на платформе CyberWhale и получите полный доступ к ИИ-ассистенту и всем возможностям\n                  нашей экосистемы кибербезопасности.\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Link to=\"/register\">\n                    <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600\">\n                      Зарегистрироваться\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </Link>\n                  <Link to=\"/about\">\n                    <Button variant=\"outline\">\n                      Узнать больше\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n              <div className=\"md:w-1/3 bg-cyberdark-700 flex items-center justify-center p-8\">\n                <div className=\"w-24 h-24 rounded-full bg-cyberblue-500/20 flex items-center justify-center\">\n                  <Bot className=\"h-12 w-12 text-cyberblue-500\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ChatAssistant />\n    </div>\n  );\n}\n\n// Star icon components\nconst StarIcon = () => (\n  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"></path>\n  </svg>\n);\n\nconst HalfStarIcon = () => (\n  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n    <defs>\n      <linearGradient id=\"halfGradient\">\n        <stop offset=\"50%\" stopColor=\"currentColor\" />\n        <stop offset=\"50%\" stopColor=\"#4B5563\" />\n      </linearGradient>\n    </defs>\n    <path fill=\"url(#halfGradient)\" d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"></path>\n  </svg>\n);\n\n// User icon component\nconst User = ({ className }: { className?: string }) => (\n  <svg className={className} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n  </svg>\n);\n","size_bytes":27655},"client/src/index.css":{"content":"\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 222 47% 11%;\n    --foreground: 214 32% 91%;\n\n    --card: 222 47% 15%;\n    --card-foreground: 214 32% 91%;\n\n    --popover: 222 47% 15%;\n    --popover-foreground: 214 32% 91%;\n\n    --primary: 221 83% 53%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 222 47% 20%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 222 47% 20%;\n    --muted-foreground: 215 20.2% 75.1%;\n\n    --accent: 222 47% 22%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 40.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 25.5%;\n    --input: 217.2 32.6% 25.5%;\n    --ring: 224.3 76.3% 48%;\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 222 47% 13%;\n    --sidebar-foreground: 214 32% 91%;\n    --sidebar-primary: 221 83% 53%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 222 47% 17%;\n    --sidebar-accent-foreground: 214 32% 91%;\n    --sidebar-border: 222 47% 18%;\n    --sidebar-ring: 221 83% 53%;\n  }\n\n  * {\n    @apply border-border;\n  }\n\n  html, body {\n    @apply bg-cyberdark-900 text-foreground font-sans antialiased;\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow-x: hidden;\n  }\n\n  #root {\n    width: 100%;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n  }\n\n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  ::-webkit-scrollbar-track {\n    @apply bg-cyberdark-800;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    @apply bg-cyberdark-600 rounded-full;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    @apply bg-cyberdark-500;\n  }\n\n  /* Glass effect */\n  .glass {\n    @apply backdrop-blur-md bg-cyberdark-900/80 border border-cyberdark-700;\n  }\n\n  .glass-card {\n    @apply backdrop-blur-md bg-cyberdark-800/90 border border-cyberdark-700;\n  }\n\n  /* Custom animations */\n  .animate-delay-100 {\n    animation-delay: 100ms;\n  }\n  .animate-delay-200 {\n    animation-delay: 200ms;\n  }\n  .animate-delay-300 {\n    animation-delay: 300ms;\n  }\n  .animate-delay-400 {\n    animation-delay: 400ms;\n  }\n  .animate-delay-500 {\n    animation-delay: 500ms;\n  }\n\n  /* Gradient text */\n  .text-gradient {\n    @apply bg-clip-text text-transparent bg-gradient-to-r from-cyberblue-400 to-cyberblue-600;\n  }\n\n  /* Custom button styles */\n  .btn-glow:hover {\n    @apply shadow-glow transition-shadow duration-300;\n  }\n\n  .page-transition-enter {\n    @apply opacity-0;\n  }\n  .page-transition-enter-active {\n    @apply opacity-100 transition-opacity duration-300;\n  }\n  .page-transition-exit {\n    @apply opacity-100;\n  }\n  .page-transition-exit-active {\n    @apply opacity-0 transition-opacity duration-300;\n  }\n}\n","size_bytes":2874},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":739},"client/src/main.tsx":{"content":"\nimport { createRoot } from 'react-dom/client'\nimport { StrictMode } from 'react'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":231},"client/src/components/layout/AuthModalWrapper.tsx":{"content":"import React, { useState } from 'react';\nimport { AuthModal } from '@/components/auth/NewAuthModal';\n\nexport function AuthModalWrapper() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [initialTab, setInitialTab] = useState<'login' | 'register'>('login');\n\n  // Expose functions globally for easy access\n  React.useEffect(() => {\n    (window as any).openAuthModal = (tab: 'login' | 'register' = 'login') => {\n      setInitialTab(tab);\n      setIsOpen(true);\n    };\n\n    return () => {\n      delete (window as any).openAuthModal;\n    };\n  }, []);\n\n  return (\n    <AuthModal\n      isOpen={isOpen}\n      onClose={() => setIsOpen(false)}\n      initialTab={initialTab}\n    />\n  );\n}","size_bytes":686},"server/devStorage.ts":{"content":"// Временное хранилище для разработки без базы данных\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  password: string;\n  role: 'user' | 'admin';\n  points: number;\n  level: number;\n  createdAt: string;\n}\n\ninterface Challenge {\n  id: number;\n  title: string;\n  description: string;\n  category: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  points: number;\n  flag: string;\n  hints: string[];\n  fileUrl?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nclass DevStorage {\n  private users: User[] = [\n    {\n      id: 1,\n      username: 'admin',\n      email: 'admin@cyberwhale.ru',\n      password: '$2a$10$rOzZJZzQZzQZzQZzQZzQZ.zQZzQZzQZzQZzQZzQZzQZzQZzQZzQ', // password: 301062Ki\n      role: 'admin',\n      points: 1500,\n      level: 10,\n      createdAt: '2024-01-15'\n    },\n    {\n      id: 2,\n      username: 'user123',\n      email: 'user123@mail.ru',\n      password: '$2a$10$rOzZJZzQZzQZzQZzQZzQZ.zQZzQZzQZzQZzQZzQZzQZzQZzQZzQ',\n      role: 'user',\n      points: 750,\n      level: 5,\n      createdAt: '2024-02-20'\n    }\n  ];\n\n  private challenges: Challenge[] = [\n    {\n      id: 1,\n      title: 'SQL Injection в форме входа',\n      description: 'Найдите способ обойти аутентификацию используя SQL injection',\n      category: 'web',\n      difficulty: 'beginner',\n      points: 100,\n      flag: 'cyberwhale{sql_bypass_admin}',\n      hints: ['Попробуйте ввести \\' OR 1=1--', 'Обратите внимание на поле пароля'],\n      isActive: true,\n      createdAt: '2024-01-15',\n      updatedAt: '2024-01-15'\n    }\n  ];\n\n  // User methods\n  async getUser(id: number): Promise<User | null> {\n    return this.users.find(user => user.id === id) || null;\n  }\n\n  async getUserByEmail(email: string): Promise<User | null> {\n    return this.users.find(user => user.email === email) || null;\n  }\n\n  async createUser(userData: Omit<User, 'id'>): Promise<User> {\n    const newUser = {\n      ...userData,\n      id: Math.max(...this.users.map(u => u.id)) + 1\n    };\n    this.users.push(newUser);\n    return newUser;\n  }\n\n  // Challenge methods\n  async getChallenges(): Promise<Challenge[]> {\n    return this.challenges;\n  }\n\n  async getChallenge(id: number): Promise<Challenge | null> {\n    return this.challenges.find(challenge => challenge.id === id) || null;\n  }\n\n  async createChallenge(challengeData: Omit<Challenge, 'id'>): Promise<Challenge> {\n    const newChallenge = {\n      ...challengeData,\n      id: Math.max(...this.challenges.map(c => c.id)) + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    this.challenges.push(newChallenge);\n    return newChallenge;\n  }\n\n  async updateChallenge(id: number, challengeData: Partial<Challenge>): Promise<Challenge | null> {\n    const index = this.challenges.findIndex(challenge => challenge.id === id);\n    if (index === -1) return null;\n    \n    this.challenges[index] = {\n      ...this.challenges[index],\n      ...challengeData,\n      updatedAt: new Date().toISOString()\n    };\n    return this.challenges[index];\n  }\n\n  async deleteChallenge(id: number): Promise<boolean> {\n    const index = this.challenges.findIndex(challenge => challenge.id === id);\n    if (index === -1) return false;\n    \n    this.challenges.splice(index, 1);\n    return true;\n  }\n}\n\nexport const devStorage = new DevStorage();","size_bytes":3492},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"client/src/pages/knowledge/index.tsx":{"content":"import React from 'react';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\nimport { Link } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { \n  Search, \n  ArrowRight, \n  BookOpen, \n  Shield, \n  Code, \n  Cpu, \n  Filter,\n  Clock,\n  ChevronRight,\n  Star,\n  Github,\n  ExternalLink,\n  BookMarked,\n  Database,\n  Library\n} from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\n\n// Mock articles data\nconst mockArticles = [\n  {\n    id: '1',\n    title: 'Введение в веб-уязвимости',\n    description: 'Обзор основных типов веб-уязвимостей и методов их эксплуатации.',\n    category: 'web-security',\n    tags: ['web', 'vulnerabilities', 'owasp'],\n    author: 'Алексей Петров',\n    date: new Date('2023-05-15'),\n    readTime: 12,\n    difficulty: 'beginner',\n    views: 1245,\n    likes: 87,\n  },\n  {\n    id: '2',\n    title: 'Основы криптографии',\n    description: 'Введение в основные концепции криптографии и их применение в кибербезопасности.',\n    category: 'cryptography',\n    tags: ['crypto', 'encryption', 'hashing'],\n    author: 'Мария Иванова',\n    date: new Date('2023-06-10'),\n    readTime: 15,\n    difficulty: 'intermediate',\n    views: 982,\n    likes: 65,\n  },\n  {\n    id: '3',\n    title: 'Реверс-инжиниринг вредоносного ПО',\n    description: 'Методы и инструменты для анализа вредоносного программного обеспечения.',\n    category: 'malware-analysis',\n    tags: ['reverse-engineering', 'malware', 'analysis'],\n    author: 'Дмитрий Сидоров',\n    date: new Date('2023-07-05'),\n    readTime: 20,\n    difficulty: 'advanced',\n    views: 756,\n    likes: 42,\n  },\n  {\n    id: '4',\n    title: 'Безопасность сетей: основы',\n    description: 'Фундаментальные принципы сетевой безопасности и защиты инфраструктуры.',\n    category: 'network-security',\n    tags: ['network', 'firewall', 'ids'],\n    author: 'Елена Смирнова',\n    date: new Date('2023-08-20'),\n    readTime: 10,\n    difficulty: 'beginner',\n    views: 1102,\n    likes: 73,\n  },\n  {\n    id: '5',\n    title: 'Атаки типа \"человек посередине\"',\n    description: 'Подробный разбор MITM-атак и способов защиты от них.',\n    category: 'network-security',\n    tags: ['mitm', 'attack', 'network'],\n    author: 'Игорь Волков',\n    date: new Date('2023-09-10'),\n    readTime: 14,\n    difficulty: 'intermediate',\n    views: 845,\n    likes: 51,\n  },\n  {\n    id: '6',\n    title: 'Безопасность контейнеров Docker',\n    description: 'Лучшие практики обеспечения безопасности при использовании Docker.',\n    category: 'cloud-security',\n    tags: ['docker', 'containers', 'devsecops'],\n    author: 'Анна Козлова',\n    date: new Date('2023-10-05'),\n    readTime: 18,\n    difficulty: 'intermediate',\n    views: 678,\n    likes: 39,\n  },\n];\n\n// Category icons mapping\nconst categoryIcons = {\n  'web-security': <Code className=\"w-5 h-5\" />,\n  'cryptography': <Shield className=\"w-5 h-5\" />,\n  'malware-analysis': <Cpu className=\"w-5 h-5\" />,\n  'network-security': <Shield className=\"w-5 h-5\" />,\n  'cloud-security': <Cpu className=\"w-5 h-5\" />,\n  'osint': <Search className=\"w-5 h-5\" />,\n  'forensics': <Search className=\"w-5 h-5\" />,\n};\n\n// Difficulty color mapping\nconst difficultyColors = {\n  'beginner': 'bg-green-500/20 text-green-500 border-green-500/30',\n  'intermediate': 'bg-yellow-500/20 text-yellow-500 border-yellow-500/30',\n  'advanced': 'bg-orange-500/20 text-orange-500 border-orange-500/30',\n  'expert': 'bg-red-500/20 text-red-500 border-red-500/30',\n};\n\nexport default function KnowledgeBase() {\n  const [searchQuery, setSearchQuery] = React.useState('');\n  const [filterCategory, setFilterCategory] = React.useState('all');\n  const [filterDifficulty, setFilterDifficulty] = React.useState('all');\n\n  // Filter articles based on search and filters\n  const filteredArticles = mockArticles.filter(article => {\n    // Apply search query filter\n    const matchesSearch = \n      searchQuery === '' ||\n      article.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      article.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      article.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    // Apply category filter\n    const matchesCategory = \n      filterCategory === 'all' || \n      article.category === filterCategory;\n    \n    // Apply difficulty filter\n    const matchesDifficulty = \n      filterDifficulty === 'all' || \n      article.difficulty === filterDifficulty;\n    \n    return matchesSearch && matchesCategory && matchesDifficulty;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <Navbar />\n      \n      <div className=\"pt-20 flex-grow\">\n        {/* Hero section */}\n        <div className=\"bg-cyberdark-800\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n            <div className=\"md:flex md:items-center md:justify-between\">\n              <div className=\"md:w-2/3\">\n                <h1 className=\"text-3xl font-bold text-white sm:text-4xl\">\n                  <span className=\"block text-cyberblue-400\">БАЗА ЗНАНИЙ</span>\n                  <span className=\"block mt-1\">Изучайте кибербезопасность с нуля до профессионала</span>\n                </h1>\n                <p className=\"mt-3 text-lg text-gray-300\">\n                  Наша база знаний содержит сотни статей, руководств и учебных материалов по различным аспектам кибербезопасности.\n                  От основ для начинающих до продвинутых техник для профессионалов.\n                </p>\n                <div className=\"mt-6 flex\">\n                  <Link to=\"/knowledge/roadmap\">\n                    <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600\">\n                      Начать обучение\n                      <ArrowRight className=\"ml-2 w-4 h-4\" />\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n              \n              <div className=\"hidden md:block md:w-1/3 mt-8 md:mt-0\">\n                <div className=\"bg-cyberdark-700 rounded-lg p-6 text-center border border-cyberdark-600\">\n                  <h3 className=\"text-xl font-semibold text-white mb-4\">Статистика базы знаний</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"bg-cyberdark-800 p-4 rounded-md\">\n                      <div className=\"text-2xl font-bold text-white\">200+</div>\n                      <div className=\"text-sm text-gray-400\">Статей</div>\n                    </div>\n                    <div className=\"bg-cyberdark-800 p-4 rounded-md\">\n                      <div className=\"text-2xl font-bold text-white\">15+</div>\n                      <div className=\"text-sm text-gray-400\">Курсов</div>\n                    </div>\n                    <div className=\"bg-cyberdark-800 p-4 rounded-md\">\n                      <div className=\"text-2xl font-bold text-white\">8</div>\n                      <div className=\"text-sm text-gray-400\">Категорий</div>\n                    </div>\n                    <div className=\"bg-cyberdark-800 p-4 rounded-md\">\n                      <div className=\"text-2xl font-bold text-white\">50+</div>\n                      <div className=\"text-sm text-gray-400\">Авторов</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          {/* CyberWhale Reference Repository Section */}\n          <div className=\"mb-16 bg-gradient-to-r from-cyberdark-800 via-cyberdark-700 to-cyberdark-800 rounded-lg overflow-hidden border border-cyberblue-500/30 shadow-glow-sm\">\n            <div className=\"md:flex\">\n              <div className=\"md:w-2/3 p-8\">\n                <div className=\"flex items-center mb-4\">\n                  <Library className=\"w-8 h-8 text-cyberblue-400 mr-3\" />\n                  <h2 className=\"text-3xl font-bold text-white\">Справочник CyberWhale</h2>\n                </div>\n                <Badge className=\"bg-cyberblue-500/20 text-cyberblue-400 border-cyberblue-500/30 mb-4\">Эксклюзив</Badge>\n                <p className=\"text-gray-300 text-lg mb-6\">\n                  Полный справочник инструментов и ресурсов для специалистов по кибербезопасности. Более 300 инструментов, \n                  разделенных по категориям: пентестинг, анализ вредоносного ПО, OSINT, форензика и многое другое.\n                </p>\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex items-center\">\n                    <Shield className=\"w-5 h-5 text-cyberblue-400 mr-2\" />\n                    <span className=\"text-gray-300\">Операционные системы для пентеста и анализа</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Database className=\"w-5 h-5 text-cyberblue-400 mr-2\" />\n                    <span className=\"text-gray-300\">Базы данных уязвимостей и угроз</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Code className=\"w-5 h-5 text-cyberblue-400 mr-2\" />\n                    <span className=\"text-gray-300\">Инструменты для анализа кода и поиска уязвимостей</span>\n                  </div>\n                </div>\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <a href=\"https://github.com/CyberWhaleOffical1/CyberWhale_Cybersecurity_Reference\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 w-full sm:w-auto\">\n                      <Github className=\"mr-2 h-5 w-5\" />\n                      Открыть справочник\n                      <ExternalLink className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </a>\n                  <Link to=\"/knowledge/reference-guide\">\n                    <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n                      <BookMarked className=\"mr-2 h-5 w-5\" />\n                      Подробнее о справочнике\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n              <div className=\"hidden md:block md:w-1/3 bg-cyberdark-700 p-8 flex items-center justify-center\">\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 bg-cyberblue-500/20 rounded-full animate-pulse\"></div>\n                  <div className=\"relative bg-cyberdark-800 rounded-full p-8 border border-cyberblue-500/30\">\n                    <BookOpen className=\"h-24 w-24 text-cyberblue-500\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"md:flex md:items-center md:justify-between mb-8\">\n            <h2 className=\"text-2xl font-bold text-white\">База знаний по кибербезопасности</h2>\n            <p className=\"mt-2 md:mt-0 text-gray-400\">\n              Изучайте кибербезопасность с помощью наших подробных статей и руководств\n            </p>\n          </div>\n\n          {/* Search and filter */}\n          <div className=\"mb-8 space-y-4 sm:space-y-0 sm:flex sm:items-center sm:justify-between\">\n            <div className=\"flex-1 relative sm:max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Поиск по статьям...\"\n                className=\"pl-10 w-full bg-cyberdark-800 border-cyberdark-700\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n            \n            <div className=\"flex space-x-2\">\n              <div className=\"relative\">\n                <select\n                  className=\"appearance-none bg-cyberdark-800 border border-cyberdark-700 text-white py-2 px-4 pr-8 rounded focus:outline-none focus:ring-1 focus:ring-cyberblue-500\"\n                  value={filterCategory}\n                  onChange={(e) => setFilterCategory(e.target.value)}\n                >\n                  <option value=\"all\">Все категории</option>\n                  <option value=\"web-security\">Веб-безопасность</option>\n                  <option value=\"cryptography\">Криптография</option>\n                  <option value=\"malware-analysis\">Анализ вредоносного ПО</option>\n                  <option value=\"network-security\">Сетевая безопасность</option>\n                  <option value=\"cloud-security\">Облачная безопасность</option>\n                  <option value=\"osint\">OSINT</option>\n                  <option value=\"forensics\">Форензика</option>\n                </select>\n                <Filter className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none\" />\n              </div>\n              \n              <div className=\"relative\">\n                <select\n                  className=\"appearance-none bg-cyberdark-800 border border-cyberdark-700 text-white py-2 px-4 pr-8 rounded focus:outline-none focus:ring-1 focus:ring-cyberblue-500\"\n                  value={filterDifficulty}\n                  onChange={(e) => setFilterDifficulty(e.target.value)}\n                >\n                  <option value=\"all\">Все уровни</option>\n                  <option value=\"beginner\">Начальный</option>\n                  <option value=\"intermediate\">Средний</option>\n                  <option value=\"advanced\">Продвинутый</option>\n                  <option value=\"expert\">Эксперт</option>\n                </select>\n                <Filter className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Articles grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredArticles.map((article) => (\n              <div\n                key={article.id}\n                className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm\"\n              >\n                <div className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"bg-cyberdark-700 rounded-full p-2\">\n                        {categoryIcons[article.category]}\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-300\">\n                        {article.category === 'web-security' && 'Веб-безопасность'}\n                        {article.category === 'cryptography' && 'Криптография'}\n                        {article.category === 'malware-analysis' && 'Анализ вредоносного ПО'}\n                        {article.category === 'network-security' && 'Сетевая безопасность'}\n                        {article.category === 'cloud-security' && 'Облачная безопасность'}\n                        {article.category === 'osint' && 'OSINT'}\n                        {article.category === 'forensics' && 'Форензика'}\n                      </span>\n                    </div>\n                    <div className={`text-xs font-medium px-2 py-1 rounded-full border ${difficultyColors[article.difficulty]}`}>\n                      {article.difficulty === 'beginner' && 'Начальный'}\n                      {article.difficulty === 'intermediate' && 'Средний'}\n                      {article.difficulty === 'advanced' && 'Продвинутый'}\n                      {article.difficulty === 'expert' && 'Эксперт'}\n                    </div>\n                  </div>\n                  \n                  <h3 className=\"text-xl font-bold text-white mb-2\">{article.title}</h3>\n                  \n                  <p className=\"text-gray-300 mb-6 line-clamp-3\">\n                    {article.description}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center text-gray-400\">\n                        <Clock className=\"w-4 h-4 mr-1\" />\n                        <span className=\"text-sm\">{article.readTime} мин.</span>\n                      </div>\n                      <div className=\"flex items-center text-gray-400\">\n                        <Star className=\"w-4 h-4 mr-1\" />\n                        <span className=\"text-sm\">{article.likes}</span>\n                      </div>\n                    </div>\n                    \n                    <Link to={`/knowledge/article/${article.id}`}>\n                      <Button variant=\"outline\" size=\"sm\">\n                        Читать\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Learning paths section */}\n          <div className=\"mt-16\">\n            <h2 className=\"text-2xl font-bold text-white mb-8\">Учебные пути</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"bg-gradient-to-r from-cyberdark-800 to-cyberdark-700 rounded-lg overflow-hidden border border-cyberdark-700\">\n                <div className=\"p-6\">\n                  <h3 className=\"text-xl font-bold text-white mb-3\">Путь начинающего</h3>\n                  <p className=\"text-gray-300 mb-4\">\n                    Идеально подходит для тех, кто только начинает свой путь в кибербезопасности. Изучите основы и постепенно переходите к более сложным темам.\n                  </p>\n                  <div className=\"mb-6\">\n                    <div className=\"flex items-center mb-2\">\n                      <ChevronRight className=\"w-4 h-4 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">Основы информационной безопасности</span>\n                    </div>\n                    <div className=\"flex items-center mb-2\">\n                      <ChevronRight className=\"w-4 h-4 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">Введение в сетевую безопасность</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <ChevronRight className=\"w-4 h-4 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">Основы криптографии</span>\n                    </div>\n                  </div>\n                  <Link to=\"/knowledge/path/beginner\">\n                    <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600\">\n                      Начать обучение\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n              \n              <div className=\"bg-gradient-to-r from-cyberdark-800 to-cyberdark-700 rounded-lg overflow-hidden border border-cyberdark-700\">\n                <div className=\"p-6\">\n                  <h3 className=\"text-xl font-bold text-white mb-3\">Путь пентестера</h3>\n                  <p className=\"text-gray-300 mb-4\">\n                    Специализированный путь для тех, кто хочет стать специалистом по тестированию на проникновение. Изучите методы и инструменты пентеста.\n                  </p>\n                  <div className=\"mb-6\">\n                    <div className=\"flex items-center mb-2\">\n                      <ChevronRight className=\"w-4 h-4 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">Разведка и сбор информации</span>\n                    </div>\n                    <div className=\"flex items-center mb-2\">\n                      <ChevronRight className=\"w-4 h-4 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">Эксплуатация веб-уязвимостей</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <ChevronRight className=\"w-4 h-4 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">Постэксплуатация и закрепление</span>\n                    </div>\n                  </div>\n                  <Link to=\"/knowledge/path/pentester\">\n                    <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600\">\n                      Начать обучение\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Tools from the Reference Repository */}\n          <div className=\"mt-16\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl font-bold text-white\">Популярные инструменты из справочника</h2>\n              <a \n                href=\"https://github.com/CyberWhaleOffical1/CyberWhale_Cybersecurity_Reference\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-cyberblue-400 hover:text-cyberblue-300 flex items-center\"\n              >\n                <span>Все инструменты</span>\n                <ArrowRight className=\"ml-1 h-4 w-4\" />\n              </a>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n              <Card className=\"bg-cyberdark-800 border-cyberdark-700 text-white hover:shadow-glow-sm transition-all duration-300 hover:border-cyberblue-500/30\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Shield className=\"mr-2 h-5 w-5 text-cyberblue-400\" />\n                    Kali Linux\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">Операционные системы</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-300\">Лучшая OS для пентеста с более чем 300 предустановлеными инструментами.</p>\n                </CardContent>\n                <CardFooter>\n                  <a \n                    href=\"https://www.kali.org/\" \n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\" \n                    className=\"text-cyberblue-400 hover:text-cyberblue-300 text-sm flex items-center\"\n                  >\n                    Подробнее\n                    <ExternalLink className=\"ml-1 h-3 w-3\" />\n                  </a>\n                </CardFooter>\n              </Card>\n              \n              <Card className=\"bg-cyberdark-800 border-cyberdark-700 text-white hover:shadow-glow-sm transition-all duration-300 hover:border-cyberblue-500/30\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Database className=\"mr-2 h-5 w-5 text-cyberblue-400\" />\n                    MITRE ATT&CK\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">Базы данных угроз</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-300\">База данных тактик и техник атак, используемых злоумышленниками.</p>\n                </CardContent>\n                <CardFooter>\n                  <a \n                    href=\"https://attack.mitre.org/\" \n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\" \n                    className=\"text-cyberblue-400 hover:text-cyberblue-300 text-sm flex items-center\"\n                  >\n                    Подробнее\n                    <ExternalLink className=\"ml-1 h-3 w-3\" />\n                  </a>\n                </CardFooter>\n              </Card>\n              \n              <Card className=\"bg-cyberdark-800 border-cyberdark-700 text-white hover:shadow-glow-sm transition-all duration-300 hover:border-cyberblue-500/30\">\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Search className=\"mr-2 h-5 w-5 text-cyberblue-400\" />\n                    OSINT Framework\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-400\">OSINT</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-gray-300\">Фреймворк для поиска информации из открытых источников.</p>\n                </CardContent>\n                <CardFooter>\n                  <a \n                    href=\"https://osintframework.com/\" \n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\" \n                    className=\"text-cyberblue-400 hover:text-cyberblue-300 text-sm flex items-center\"\n                  >\n                    Подробнее\n                    <ExternalLink className=\"ml-1 h-3 w-3\" />\n                  </a>\n                </CardFooter>\n              </Card>\n            </div>\n          </div>\n\n          {/* Courses section */}\n          <div className=\"mt-16\">\n            <h2 className=\"text-2xl font-bold text-white mb-8\">Популярные курсы</h2>\n            \n            <Tabs defaultValue=\"all\" className=\"mb-8\">\n              <TabsList className=\"bg-cyberdark-800 border-b border-cyberdark-700 p-0\">\n                <TabsTrigger value=\"all\" className=\"data-[state=active]:bg-cyberdark-700\">Все</TabsTrigger>\n                <TabsTrigger value=\"web\" className=\"data-[state=active]:bg-cyberdark-700\">Веб</TabsTrigger>\n                <TabsTrigger value=\"network\" className=\"data-[state=active]:bg-cyberdark-700\">Сети</TabsTrigger>\n                <TabsTrigger value=\"crypto\" className=\"data-[state=active]:bg-cyberdark-700\">Крипто</TabsTrigger>\n                <TabsTrigger value=\"malware\" className=\"data-[state=active]:bg-cyberdark-700\">Вредоносное ПО</TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"all\" className=\"mt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700\">\n                    <div className=\"h-40 bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\n                      <Code className=\"h-16 w-16 text-white\" />\n                    </div>\n                    <div className=\"p-6\">\n                      <Badge className=\"mb-2 bg-blue-500/20 text-blue-400 border-blue-500/30\">Веб-безопасность</Badge>\n                      <h3 className=\"text-xl font-bold text-white mb-2\">Веб-уязвимости от А до Я</h3>\n                      <p className=\"text-gray-300 mb-4\">\n                        Полный курс по веб-уязвимостям, от основ до продвинутых техник эксплуатации.\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm text-gray-400\">12 уроков • 6 часов</div>\n                        <Link to=\"/knowledge/course/web-vulnerabilities\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            Подробнее\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700\">\n                    <div className=\"h-40 bg-gradient-to-r from-green-500 to-teal-600 flex items-center justify-center\">\n                      <Shield className=\"h-16 w-16 text-white\" />\n                    </div>\n                    <div className=\"p-6\">\n                      <Badge className=\"mb-2 bg-green-500/20 text-green-400 border-green-500/30\">Сетевая безопасность</Badge>\n                      <h3 className=\"text-xl font-bold text-white mb-2\">Защита сетевой инфраструктуры</h3>\n                      <p className=\"text-gray-300 mb-4\">\n                        Изучите методы защиты сетей от различных типов атак и угроз.\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm text-gray-400\">10 уроков • 5 часов</div>\n                        <Link to=\"/knowledge/course/network-security\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            Подробнее\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700\">\n                    <div className=\"h-40 bg-gradient-to-r from-red-500 to-orange-600 flex items-center justify-center\">\n                      <Cpu className=\"h-16 w-16 text-white\" />\n                    </div>\n                    <div className=\"p-6\">\n                      <Badge className=\"mb-2 bg-red-500/20 text-red-400 border-red-500/30\">Анализ вредоносного ПО</Badge>\n                      <h3 className=\"text-xl font-bold text-white mb-2\">Основы реверс-инжиниринга</h3>\n                      <p className=\"text-gray-300 mb-4\">\n                        Научитесь анализировать и понимать принципы работы вредоносного ПО.\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm text-gray-400\">8 уроков • 4 часа</div>\n                        <Link to=\"/knowledge/course/reverse-engineering\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            Подробнее\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"web\" className=\"mt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700\">\n                    <div className=\"h-40 bg-gradient-to-r from-blue-500 to-purple-600 flex items-center justify-center\">\n                      <Code className=\"h-16 w-16 text-white\" />\n                    </div>\n                    <div className=\"p-6\">\n                      <Badge className=\"mb-2 bg-blue-500/20 text-blue-400 border-blue-500/30\">Веб-безопасность</Badge>\n                      <h3 className=\"text-xl font-bold text-white mb-2\">Веб-уязвимости от А до Я</h3>\n                      <p className=\"text-gray-300 mb-4\">\n                        Полный курс по веб-уязвимостям, от основ до продвинутых техник эксплуатации.\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm text-gray-400\">12 уроков • 6 часов</div>\n                        <Link to=\"/knowledge/course/web-vulnerabilities\">\n                          <Button variant=\"outline\" size=\"sm\">\n                            Подробнее\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n\n          {/* CTA section */}\n          <div className=\"mt-16 bg-gradient-to-r from-cyberdark-800 to-cyberdark-700 rounded-lg overflow-hidden border border-cyberdark-700\">\n            <div className=\"md:flex\">\n              <div className=\"p-8 md:w-2/3\">\n                <h2 className=\"text-2xl font-bold text-white mb-4\">\n                  Готовы начать свой путь в кибербезопасности?\n                </h2>\n                <p className=\"text-gray-300 mb-6\">\n                  Зарегистрируйтесь на платформе CyberWhale и получите доступ ко всем материалам базы знаний,\n                  включая эксклюзивные курсы, лабораторные работы и сертификаты.\n                </p>\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Link to=\"/register\">\n                    <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600\">\n                      Зарегистрироваться\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </Link>\n                  <Link to=\"/knowledge/roadmap\">\n                    <Button variant=\"outline\">\n                      Карта обучения\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n              <div className=\"md:w-1/3 bg-cyberdark-700 flex items-center justify-center p-8\">\n                <div className=\"w-24 h-24 rounded-full bg-cyberblue-500/20 flex items-center justify-center\">\n                  <BookOpen className=\"h-12 w-12 text-cyberblue-500\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ChatAssistant />\n    </div>\n  );\n}\n","size_bytes":36208},"client/src/lib/auth/provider.tsx":{"content":"\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AuthContext } from './context';\nimport { useAuthState } from './useAuthState';\nimport { User } from '@/types';\nimport { \n  login, \n  register, \n  logout, \n  resetPassword, \n  updatePassword, \n  updateProfile, \n  verifyOtp \n} from './actions';\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const navigate = useNavigate();\n  \n  const { \n    user, \n    setUser, \n    session, \n    setSession, \n    isLoading, \n    setIsLoading, \n    error, \n    setError,\n    loadingTimedOut \n  } = useAuthState();\n\n  const handleLogin = async (email: string, password: string) => {\n    return login(email, password, setIsLoading, setError);\n  };\n\n  const handleRegister = async (username: string, email: string, password: string) => {\n    return register(username, email, password, setIsLoading, setError, navigate);\n  };\n\n  const handleLogout = async () => {\n    return logout(setUser, setSession, setIsLoading, setError, navigate);\n  };\n\n  const handleResetPassword = async (email: string) => {\n    return resetPassword(email, setIsLoading, setError);\n  };\n\n  const handleUpdatePassword = async (password: string) => {\n    return updatePassword(password, setIsLoading, setError, navigate);\n  };\n\n  const handleUpdateProfile = async (updates: Partial<User>) => {\n    if (!user) {\n      setError('Пользователь не авторизован');\n      return Promise.reject(new Error('Пользователь не авторизован'));\n    }\n    return updateProfile(user, updates, setUser, setIsLoading, setError);\n  };\n\n  const handleVerifyOtp = async (email: string, token: string) => {\n    return verifyOtp(email, token, setIsLoading, setError);\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      session,\n      isLoading,\n      error,\n      login: handleLogin,\n      register: handleRegister,\n      logout: handleLogout,\n      resetPassword: handleResetPassword,\n      updatePassword: handleUpdatePassword,\n      updateProfile: handleUpdateProfile,\n      verifyOtp: handleVerifyOtp,\n      loadingTimedOut\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","size_bytes":2265},"client/src/App.tsx":{"content":"// src/App.tsx\nimport React, { useEffect } from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport i18next from './lib/i18n'; // Импортируем i18next для переводов\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { AuthProvider } from \"@/lib/auth/AuthProvider\";\nimport './App.css';\n\n// Pages\nimport HomePage from \"./pages/Index\";\nimport CTFPlatform from \"./pages/ctf/index\";\nimport ChallengePage from \"./pages/ctf/ChallengePage\";\nimport CategoryChallenges from \"./pages/ctf/CategoryChallenges\";\nimport AddChallenge from \"./pages/ctf/AddChallenge\"; // Предполагаем, что страница добавления кейсов существует\nimport KnowledgeBase from \"./pages/knowledge/index\";\nimport ArticlePage from \"./pages/knowledge/ArticlePage\";\nimport ReferenceGuide from \"./pages/knowledge/reference-guide\";\nimport AIAssistant from \"./pages/ai-assistant/index\";\nimport Community from \"./pages/community/index\";\nimport Products from \"./pages/products/index\";\nimport Login from \"./pages/auth/Login\";\nimport Register from \"./pages/auth/Register\";\nimport ForgotPassword from \"./pages/auth/ForgotPassword\";\nimport ResetPassword from \"./pages/auth/ResetPassword\";\nimport EmailConfirm from \"./pages/auth/EmailConfirm\";\nimport VerifyOTP from \"./pages/auth/VerifyOTP\";\nimport Profile from \"./pages/profile/index\";\nimport Settings from \"./pages/settings/index\";\nimport AdminPanel from \"./pages/admin/FinalAdminPanel\";\nimport NotFound from \"./pages/NotFound\";\n\n// Admin Pages (заглушки, которые можно реализовать позже)\nconst AdminSettings = () => <div>Настройки админ-панели (в разработке)</div>;\nconst AdminUsers = () => <div>Управление пользователями (в разработке)</div>;\nconst AdminNewChallenge = () => <div>Создание нового кейса (в разработке)</div>;\nconst AdminEditChallenge = () => <div>Редактирование кейса (в разработке)</div>;\n\n// Layout\nimport Navbar from \"./components/layout/Navbar\";\nimport Footer from \"./components/layout/Footer\";\nimport { AuthModalWrapper } from \"./components/layout/AuthModalWrapper\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => {\n  useEffect(() => {\n    console.log(\"App component mounted\");\n    document.body.style.backgroundColor = \"#111827\";\n    document.body.style.color = \"#e5e7eb\";\n    return () => {\n      console.log(\"App component unmounted\");\n    };\n  }, []);\n\n  return (\n    <I18nextProvider i18n={i18next}> {/* Возвращаем поддержку переводов */}\n      <QueryClientProvider client={queryClient}>\n        <BrowserRouter>\n          <AuthProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Sonner />\n              <AuthModalWrapper />\n              <Navbar />\n              <div className=\"content-wrapper\">\n                <Routes>\n                  <Route path=\"/\" element={<HomePage />} />\n                  {/* CTF Platform Routes */}\n                  <Route path=\"/ctf\" element={<CTFPlatform />} />\n                  <Route path=\"/ctf/challenge/:id\" element={<ChallengePage />} />\n                  <Route path=\"/ctf/category/:category\" element={<CategoryChallenges />} />\n                  <Route path=\"/ctf/add-challenge\" element={<AddChallenge />} />\n                  {/* Knowledge Base Routes */}\n                  <Route path=\"/knowledge\" element={<KnowledgeBase />} />\n                  <Route path=\"/knowledge/article/:id\" element={<ArticlePage />} />\n                  <Route path=\"/knowledge/reference-guide\" element={<ReferenceGuide />} />\n                  {/* AI Assistant Routes */}\n                  <Route path=\"/ai-assistant\" element={<AIAssistant />} />\n                  {/* Community Routes */}\n                  <Route path=\"/community\" element={<Community />} />\n                  {/* Products Routes */}\n                  <Route path=\"/products\" element={<Products />} />\n                  {/* Auth Routes */}\n                  <Route path=\"/login\" element={<Login />} />\n                  <Route path=\"/register\" element={<Register />} />\n                  <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n                  <Route path=\"/reset-password\" element={<ResetPassword />} />\n                  <Route path=\"/auth/confirm\" element={<EmailConfirm />} />\n                  <Route path=\"/verify-otp\" element={<VerifyOTP />} />\n                  {/* User Routes */}\n                  <Route path=\"/profile\" element={<Profile />} />\n                  <Route path=\"/settings\" element={<Settings />} />\n                  {/* Admin Routes */}\n                  <Route path=\"/admin\" element={<AdminPanel />} />\n                  <Route path=\"/admin/settings\" element={<AdminSettings />} />\n                  <Route path=\"/admin/users\" element={<AdminUsers />} />\n                  <Route path=\"/admin/challenges/new\" element={<AdminNewChallenge />} />\n                  <Route path=\"/admin/challenges/edit/:id\" element={<AdminEditChallenge />} />\n                  {/* Not Found Route */}\n                  <Route path=\"*\" element={<NotFound />} />\n                </Routes>\n              </div>\n              <Footer />\n            </TooltipProvider>\n          </AuthProvider>\n        </BrowserRouter>\n      </QueryClientProvider>\n    </I18nextProvider>\n  );\n};\n\nexport default App;","size_bytes":5718},"client/src/SECURITY.md":{"content":"\n# CyberWhale Security Documentation\n\n## Overview\n\nThis document outlines the security measures implemented in the CyberWhale ecosystem to ensure the protection of user data, system integrity, and service availability. The security architecture follows industry best practices and adheres to a defense-in-depth strategy.\n\n## Security Architecture\n\n### Authentication and Authorization\n\n1. **Multi-factor Authentication (MFA)**\n   - Email verification required during registration\n   - Optional SMS verification for additional security\n   - TOTP (Time-based One-Time Password) support for secure login\n\n2. **Session Management**\n   - Secure, HttpOnly, SameSite cookies\n   - Short-lived access tokens (15 minutes)\n   - Longer refresh tokens (7 days) with secure rotation\n   - Automatic session timeout after inactivity\n\n3. **Authorization**\n   - Role-based access control (RBAC)\n   - Fine-grained permission system\n   - Principle of least privilege implemented throughout the system\n\n### Data Protection\n\n1. **Data at Rest**\n   - AES-256 encryption for sensitive data storage\n   - Secure key management\n   - Database-level encryption\n\n2. **Data in Transit**\n   - TLS 1.3 enforced for all connections\n   - HSTS (HTTP Strict Transport Security) implemented\n   - Perfect Forward Secrecy supported\n\n3. **Data Privacy**\n   - Personal data minimization\n   - Configurable data retention policies\n   - GDPR and CCPA compliance measures\n\n### Application Security\n\n1. **Input Validation**\n   - Server-side validation for all user inputs\n   - Content security policy (CSP) implementation\n   - Protection against injection attacks (SQL, NoSQL, XSS, etc.)\n\n2. **API Security**\n   - Rate limiting to prevent abuse\n   - Request throttling\n   - JWT (JSON Web Tokens) with appropriate security claims\n\n3. **Frontend Security**\n   - XSS protection\n   - CSRF protection\n   - Subresource Integrity (SRI) for external resources\n\n### Infrastructure Security\n\n1. **Network Security**\n   - Web application firewall (WAF)\n   - DDoS protection\n   - Network segmentation\n   - Regular vulnerability scanning\n\n2. **Monitoring and Logging**\n   - Comprehensive security logging\n   - Real-time security monitoring\n   - Automatic alerts for suspicious activities\n   - Audit trails for sensitive operations\n\n3. **Backup and Recovery**\n   - Regular automated backups\n   - Encrypted backup storage\n   - Tested recovery procedures\n   - Geographic redundancy\n\n## Secure Development Practices\n\n1. **Secure SDLC**\n   - Security requirements defined at project inception\n   - Threat modeling during design phase\n   - Regular code reviews with security focus\n   - Automated security testing in CI/CD pipeline\n\n2. **Dependency Management**\n   - Regular dependency updates\n   - Automated vulnerability scanning for dependencies\n   - Software composition analysis (SCA)\n\n3. **Security Testing**\n   - Static application security testing (SAST)\n   - Dynamic application security testing (DAST)\n   - Regular penetration testing\n   - Bug bounty program\n\n## Incident Response\n\n1. **Incident Detection**\n   - 24/7 security monitoring\n   - Behavioral analysis for anomaly detection\n   - Integration with threat intelligence feeds\n\n2. **Incident Response Plan**\n   - Documented response procedures\n   - Defined roles and responsibilities\n   - Regular tabletop exercises and simulations\n\n3. **Post-Incident Activities**\n   - Root cause analysis\n   - Lessons learned documentation\n   - Security posture improvement\n\n## Compliance\n\nThe CyberWhale platform is designed to meet the requirements of:\n\n- ISO 27001 (Information Security Management)\n- GDPR (General Data Protection Regulation)\n- CCPA (California Consumer Privacy Act)\n- NIST Cybersecurity Framework\n- SOC 2 (Security, Availability, Processing Integrity, Confidentiality, and Privacy)\n\n## CTF Platform Security\n\nThe CTF (Capture The Flag) platform incorporates additional security measures:\n\n1. **Challenge Isolation**\n   - Docker containerization for challenges\n   - Network isolation between challenges\n   - Resource limitations to prevent DoS\n\n2. **Flag Submission Protection**\n   - Anti-bruteforce mechanisms\n   - Rate limiting for submissions\n   - Unique flags for each user session when applicable\n\n3. **Competition Integrity**\n   - Anti-cheating mechanisms\n   - Scoreboard protection\n   - Secure real-time updates\n\n## AI Assistant Security\n\nThe AI Assistant implementation includes specific security controls:\n\n1. **Data Protection**\n   - Minimal data retention for conversations\n   - Anonymization of sensitive information\n   - Option for users to delete conversation history\n\n2. **Model Security**\n   - Regular security updates for AI models\n   - Input sanitization before processing\n   - Output filtering to prevent harmful content\n\n3. **Integration Security**\n   - Secure API communication\n   - Authenticated and authorized access only\n   - Rate limiting to prevent abuse\n\n## Security Testing and Verification\n\nAll security measures are regularly tested and verified through:\n\n1. **Automated Testing**\n   - Continuous security scanning\n   - Regular vulnerability assessments\n   - Compliance checking\n\n2. **Manual Testing**\n   - Regular penetration testing by internal team\n   - Periodic third-party security assessments\n   - Red team exercises\n\n3. **User Education**\n   - Security awareness materials\n   - Best practice guidance\n   - Clear security documentation\n\n## Security Contact Information\n\nTo report security vulnerabilities or concerns, please contact our security team at:\n\n- Email: security@cyberwhale.com\n- Secure form: https://cyberwhale.com/security/report\n\nFor critical vulnerabilities, use our PGP key for encrypted communication.\n\n## Conclusion\n\nSecurity is a core principle in the design and implementation of the CyberWhale ecosystem. We maintain a proactive approach to security, continuously monitoring, testing, and improving our security posture to protect our users and their data.\n\nThis document will be regularly updated to reflect the current state of security measures implemented in the CyberWhale platform.\n\n---\n\nLast updated: 2023-11-01  \nVersion: 1.0\n","size_bytes":6095},"supabase/functions/chat-assistant/index.ts":{"content":"\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\nimport \"https://deno.land/x/xhr@0.1.0/mod.ts\";\n\n// Используем предоставленный токен\nconst HUGGING_FACE_API_KEY = Deno.env.get('HUGGING_FACE_API_KEY') || 'your_huggingface_api_key_here';\n\n// Изменяем модель на более доступную без специальных разрешений\nconst MODEL_URL = \"https://api-inference.huggingface.co/models/facebook/blenderbot-400M-distill\";\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n};\n\nserve(async (req) => {\n  // Обработка CORS preflight запросов\n  if (req.method === 'OPTIONS') {\n    return new Response(null, { headers: corsHeaders });\n  }\n\n  try {\n    const { message, history } = await req.json();\n\n    console.log(`Sending request to Hugging Face API with message: ${message}`);\n    console.log(`History items: ${history.length}`);\n\n    // Формируем структуру запроса для модели (blenderbot использует более простой формат)\n    const payload = {\n      inputs: message,\n      parameters: {\n        max_length: 100,\n        temperature: 0.7,\n        top_p: 0.9,\n        do_sample: true,\n      }\n    };\n\n    // Отправляем запрос к Hugging Face API\n    const response = await fetch(MODEL_URL, {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": `Bearer ${HUGGING_FACE_API_KEY}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n\n    // Обрабатываем ответ\n    const result = await response.json();\n    console.log(`Response from Hugging Face API: ${JSON.stringify(result)}`);\n\n    // Проверяем, что получили корректный ответ\n    if (result.error) {\n      throw new Error(result.error);\n    }\n\n    // BlenderBot возвращает массив с ответом, получаем первый элемент\n    const botResponse = Array.isArray(result) && result.length > 0 \n      ? result[0].generated_text \n      : \"Извините, я не смог сгенерировать ответ. Пожалуйста, попробуйте еще раз.\";\n      \n    console.log(`Bot response: ${botResponse}`);\n\n    // Возвращаем результат\n    return new Response(\n      JSON.stringify({ \n        botResponse: botResponse,\n        success: true \n      }),\n      { \n        headers: { \n          ...corsHeaders,\n          \"Content-Type\": \"application/json\" \n        } \n      }\n    );\n  } catch (error) {\n    console.error(\"Error processing request:\", error);\n    return new Response(\n      JSON.stringify({ \n        botResponse: \"Произошла ошибка при обработке запроса. Пожалуйста, попробуйте позже.\",\n        success: false,\n        error: error.message \n      }),\n      { \n        status: 500,\n        headers: { \n          ...corsHeaders,\n          \"Content-Type\": \"application/json\" \n        } \n      }\n    );\n  }\n});\n","size_bytes":3180},"client/src/integrations/supabase/client.ts":{"content":"\n// This file is automatically generated. Do not edit it directly.\nimport { createClient } from '@supabase/supabase-js';\nimport type { Database } from '../../types/supabase';\n\nconst SUPABASE_URL = \"https://rrtharegnnfvluhkrtpg.supabase.co\";\nconst SUPABASE_PUBLISHABLE_KEY = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJydGhhcmVnbm5mdmx1aGtydHBnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI4ODg3MDksImV4cCI6MjA1ODQ2NDcwOX0.LdaLg1TTbRJPrF7rSqp8lphdwr3ZNx9zg0WRlip_qSQ\";\n\nexport const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {\n  auth: {\n    storage: localStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n  }\n});\n","size_bytes":705},"client/src/lib/i18n/index.ts":{"content":"import i18next from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport enTranslation from '../../locales/en/translation.json';\nimport ruTranslation from '../../locales/ru/translation.json';\n\ni18next\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources: {\n      en: { translation: enTranslation },\n      ru: { translation: ruTranslation },\n    },\n    fallbackLng: 'ru',\n    interpolation: {\n      escapeValue: false,\n    },\n    detection: {\n      order: ['localStorage', 'navigator'],\n      caches: ['localStorage'],\n    },\n  });\n\nexport default i18next;","size_bytes":656},"client/src/lib/auth/AuthProvider.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  avatar?: string;\n  role: string;\n  points: number;\n  level: number;\n  emailVerified: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  \n  // Auth methods\n  register: (username: string, email: string, password: string) => Promise<{ success: boolean; verificationRequired?: boolean; developmentCode?: string; message?: string }>;\n  verifyEmail: (email: string, code: string) => Promise<{ success: boolean; message?: string }>;\n  login: (email: string, password: string) => Promise<{ success: boolean; emailVerificationRequired?: boolean; message?: string }>;\n  logout: () => void;\n  resendVerification: (email: string) => Promise<{ success: boolean; developmentCode?: string; message?: string }>;\n  forgotPassword: (email: string) => Promise<{ success: boolean; developmentCode?: string; message?: string }>;\n  resetPassword: (email: string, code: string, newPassword: string) => Promise<{ success: boolean; message?: string }>;\n  updateProfile: (updates: Partial<User>) => Promise<{ success: boolean; message?: string }>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  // API helper function\n  const apiCall = async (endpoint: string, options: RequestInit = {}) => {\n    const token = localStorage.getItem('auth_token');\n    \n    const response = await fetch(`/api${endpoint}`, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(token && { Authorization: `Bearer ${token}` }),\n        ...options.headers,\n      },\n      ...options,\n    });\n\n    const data = await response.json();\n    \n    if (!response.ok) {\n      throw new Error(data.message || 'Произошла ошибка');\n    }\n    \n    return data;\n  };\n\n  // Load user on mount\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const token = localStorage.getItem('auth_token');\n        if (!token) {\n          setIsLoading(false);\n          return;\n        }\n\n        const userData = await apiCall('/auth/me');\n        setUser(userData);\n      } catch (error) {\n        localStorage.removeItem('auth_token');\n        console.error('Failed to load user:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUser();\n  }, []);\n\n  // Register new user\n  const register = async (username: string, email: string, password: string) => {\n    try {\n      const data = await apiCall('/auth/register', {\n        method: 'POST',\n        body: JSON.stringify({ username, email, password }),\n      });\n\n      toast({\n        title: \"Регистрация успешна!\",\n        description: data.message,\n      });\n\n      return { \n        success: true, \n        verificationRequired: data.verificationRequired,\n        developmentCode: data.developmentCode,\n        message: data.message \n      };\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка регистрации\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Verify email with code\n  const verifyEmail = async (email: string, code: string) => {\n    try {\n      const data = await apiCall('/auth/verify-email', {\n        method: 'POST',\n        body: JSON.stringify({ email, code }),\n      });\n\n      // Save token and set user\n      localStorage.setItem('auth_token', data.token);\n      setUser(data.user);\n\n      toast({\n        title: \"Email подтвержден!\",\n        description: data.message,\n      });\n\n      return { success: true, message: data.message };\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка подтверждения\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Login user\n  const login = async (email: string, password: string) => {\n    try {\n      const data = await apiCall('/auth/login', {\n        method: 'POST',\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (data.emailVerificationRequired) {\n        toast({\n          title: \"Требуется подтверждение email\",\n          description: data.message,\n          variant: \"destructive\",\n        });\n        return { \n          success: false, \n          emailVerificationRequired: true,\n          message: data.message \n        };\n      }\n\n      // Save token and set user\n      localStorage.setItem('auth_token', data.token);\n      setUser(data.user);\n\n      toast({\n        title: \"Добро пожаловать!\",\n        description: data.message,\n      });\n\n      return { success: true, message: data.message };\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка входа\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('auth_token');\n    setUser(null);\n    toast({\n      title: \"Выход выполнен\",\n      description: \"До свидания!\",\n    });\n  };\n\n  // Resend verification code\n  const resendVerification = async (email: string) => {\n    try {\n      const data = await apiCall('/auth/resend-verification', {\n        method: 'POST',\n        body: JSON.stringify({ email }),\n      });\n\n      toast({\n        title: \"Код отправлен\",\n        description: data.message,\n      });\n\n      return { \n        success: true, \n        developmentCode: data.developmentCode,\n        message: data.message \n      };\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка отправки\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async (email: string) => {\n    try {\n      const data = await apiCall('/auth/forgot-password', {\n        method: 'POST',\n        body: JSON.stringify({ email }),\n      });\n\n      toast({\n        title: \"Код восстановления отправлен\",\n        description: data.message,\n      });\n\n      return { \n        success: true, \n        developmentCode: data.developmentCode,\n        message: data.message \n      };\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка восстановления\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Reset password with code\n  const resetPassword = async (email: string, code: string, newPassword: string) => {\n    try {\n      const data = await apiCall('/auth/reset-password', {\n        method: 'POST',\n        body: JSON.stringify({ email, code, newPassword }),\n      });\n\n      toast({\n        title: \"Пароль изменен\",\n        description: data.message,\n      });\n\n      return { success: true, message: data.message };\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка сброса пароля\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      return { success: false, message: error.message };\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async (updates: Partial<User>) => {\n    try {\n      const data = await apiCall('/auth/profile', {\n        method: 'PUT',\n        body: JSON.stringify(updates),\n      });\n\n      setUser(data);\n\n      toast({\n        title: \"Профиль обновлен\",\n        description: \"Ваши данные успешно сохранены\",\n      });\n\n      return { success: true, message: \"Профиль обновлен\" };\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка обновления\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      return { success: false, message: error.message };\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    register,\n    verifyEmail,\n    login,\n    logout,\n    resendVerification,\n    forgotPassword,\n    resetPassword,\n    updateProfile,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}","size_bytes":8893},"client/src/data/challenges.ts":{"content":"\nimport { Challenge } from '@/types';\n\n// Mock CTF challenges data\nexport const mockChallenges: Challenge[] = [\n  {\n    id: '1',\n    title: 'Phantom Vault: Взлом JWT через слабый секрет',\n    description: 'Вы — аудитор безопасности, которому поручено проверить веб-приложение Phantom Vault. Оно использует JWT (JSON Web Tokens) для аутентификации, но есть подозрения, что разработчики допустили критическую ошибку. Ваша задача — найти уязвимость, получить доступ к административной панели и извлечь флаг.',\n    category: 'web',\n    difficulty: 'beginner',\n    points: 200,\n    tags: ['web', 'jwt', 'authentication', 'crypto'],\n    solved: false,\n    solvedBy: 124,\n    createdAt: new Date('2023-05-15'),\n    updatedAt: new Date('2023-05-15'),\n    downloadUrl: 'https://cloud.mail.ru/public/ip9t/ajXd2ZLbp',\n    fileType: 'archive',\n  },\n  {\n    id: '2',\n    title: 'Скрытое сообщение',\n    description: 'Найдите скрытое сообщение в изображении, используя методы стеганографии.',\n    category: 'steganography',\n    difficulty: 'beginner',\n    points: 150,\n    tags: ['steganography', 'image'],\n    solved: false,\n    solvedBy: 124,\n    createdAt: new Date('2023-06-10'),\n    updatedAt: new Date('2023-06-10'),\n  },\n  {\n    id: '3',\n    title: 'Утечка данных CyberWhale: Тайна зашифрованного чата',\n    description: 'Ваша команда по кибербезопасности расследует утечку данных из компании CyberWhale. Вам удалось перехватить логи чата, который, предположительно, содержит информацию об утечке. Сообщения в чате зашифрованы.',\n    category: 'crypto',\n    difficulty: 'beginner',\n    points: 200,\n    tags: ['cryptography', 'caesar-cipher'],\n    solved: false,\n    solvedBy: 87,\n    createdAt: new Date('2023-07-05'),\n    updatedAt: new Date('2023-07-05'),\n  },\n  {\n    id: '4',\n    title: 'Обратная разработка',\n    description: 'Декомпилируйте и проанализируйте бинарный файл, чтобы найти ключ к продолжению задания.',\n    category: 'reverse-engineering',\n    difficulty: 'advanced',\n    points: 300,\n    tags: ['binary', 'decompilation'],\n    solved: false,\n    solvedBy: 45,\n    createdAt: new Date('2023-08-20'),\n    updatedAt: new Date('2023-08-20'),\n  },\n  {\n    id: '5',\n    title: 'Сетевая атака',\n    description: 'Проанализируйте сетевой трафик и найдите следы атаки в pcap-файле.',\n    category: 'network',\n    difficulty: 'intermediate',\n    points: 250,\n    tags: ['pcap', 'wireshark'],\n    solved: false,\n    solvedBy: 63,\n    createdAt: new Date('2023-09-10'),\n    updatedAt: new Date('2023-09-10'),\n  },\n  {\n    id: '6',\n    title: 'Переполнение буфера',\n    description: 'Используйте уязвимость переполнения буфера для выполнения произвольного кода.',\n    category: 'pwn',\n    difficulty: 'expert',\n    points: 400,\n    tags: ['buffer-overflow', 'exploitation'],\n    solved: false,\n    solvedBy: 32,\n    createdAt: new Date('2023-10-05'),\n    updatedAt: new Date('2023-10-05'),\n  },\n  {\n    id: '7',\n    title: 'Утечка данных CyberWhale: Зашифрованный архив',\n    description: 'Ваша команда получила доступ к зашифрованному архиву, который предположительно содержит важную информацию о деятельности компании CyberWhale. Архив был найден на компрометированном сервере, и его содержимое защищено паролем.',\n    category: 'crypto',\n    difficulty: 'intermediate',\n    points: 250,\n    tags: ['cryptography', 'password-cracking', 'archive'],\n    solved: false,\n    solvedBy: 42,\n    createdAt: new Date('2023-11-15'),\n    updatedAt: new Date('2023-11-15'),\n    downloadUrl: 'https://cloud.mail.ru/public/DMbD/FVSq8QsaK',\n    fileType: 'archive',\n  },\n  {\n    id: '8',\n    title: 'Эхо Прошлого: Завещание в Битах',\n    description: 'Вы - команда исследователей, получившая доступ к старому жесткому диску, принадлежавшему эксцентричному криптографу, недавно покинувшему этот мир. По слухам, он спрятал свое состояние, зашифровав информацию о его местонахождении в своих исследованиях. На диске обнаружены файлы с обрывками заметок и подозрительным сетевым трафиком. Ваша задача - собрать воедино все улики, расшифровать сообщения и найти спрятанное завещание.',\n    category: 'crypto',\n    difficulty: 'advanced',\n    points: 350,\n    tags: ['wireshark', 'cryptography', 'steganography', 'base64'],\n    solved: false,\n    solvedBy: 28,\n    createdAt: new Date('2023-12-20'),\n    updatedAt: new Date('2023-12-20'),\n    downloadUrl: 'https://cloud.mail.ru/public/cFib/6dkAnZzfo',\n    fileType: 'archive',\n  },\n  {\n    id: '9',\n    title: 'HR-портал CyberWolf Corp: SQL-инъекция',\n    description: 'Вы получили доступ к внутреннему HR-порталу компании CyberWolf Corp. Система позволяет искать сотрудников по имени, но администраторы уверены, что в ней есть критическая уязвимость, позволяющая получить доступ к конфиденциальным данным. Ваша задача — провести аудит системы и найти секретный флаг, скрытый в глубинах приложения.',\n    category: 'web',\n    difficulty: 'intermediate',\n    points: 250,\n    tags: ['web', 'sql-injection', 'databases', 'security-audit'],\n    solved: false,\n    solvedBy: 58,\n    createdAt: new Date('2024-01-15'),\n    updatedAt: new Date('2024-01-15'),\n    downloadUrl: 'https://cloud.mail.ru/public/NGcQ/FGdbzMBa9',\n    fileType: 'archive',\n  },\n];\n","size_bytes":6830},"supabase/config.toml":{"content":"\nproject_id = \"rrtharegnnfvluhkrtpg\"\n\n[functions.chat-assistant]\nverify_jwt = false\n","size_bytes":84},"client/src/lib/auth/newProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { apiClient } from '../api';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  avatar?: string;\n  role: string;\n  points: number;\n  level: number;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (username: string, email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  updateProfile: (updates: Partial<User>) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  isLoading: false,\n  error: null,\n  login: async () => {},\n  register: async () => {},\n  logout: async () => {},\n  updateProfile: async () => {},\n});\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      setIsLoading(true);\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        apiClient.setToken(token);\n        const response = await apiClient.getMe();\n        setUser(response.user);\n      }\n    } catch (error) {\n      console.error('Auth check failed:', error);\n      localStorage.removeItem('auth_token');\n      apiClient.clearToken();\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      const response = await apiClient.login(email, password);\n      localStorage.setItem('auth_token', response.token);\n      apiClient.setToken(response.token);\n      setUser(response.user);\n    } catch (error: any) {\n      setError(error.message || 'Login failed');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (username: string, email: string, password: string) => {\n    try {\n      setError(null);\n      setIsLoading(true);\n      const response = await apiClient.register(username, email, password);\n      localStorage.setItem('auth_token', response.token);\n      apiClient.setToken(response.token);\n      setUser(response.user);\n    } catch (error: any) {\n      setError(error.message || 'Registration failed');\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async () => {\n    try {\n      localStorage.removeItem('auth_token');\n      apiClient.clearToken();\n      setUser(null);\n      setError(null);\n    } catch (error: any) {\n      console.error('Logout error:', error);\n    }\n  };\n\n  const updateProfile = async (updates: Partial<User>) => {\n    try {\n      setError(null);\n      const response = await apiClient.updateProfile(updates);\n      setUser(response.user);\n    } catch (error: any) {\n      setError(error.message || 'Profile update failed');\n      throw error;\n    }\n  };\n\n  const value = {\n    user,\n    isLoading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};","size_bytes":3548},"client/src/components/auth/SocialLogin.tsx":{"content":"\nimport React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface SocialLoginProps {\n  type: 'register' | 'login';\n}\n\nexport function SocialLogin({ type }: SocialLoginProps) {\n  const handleGoogleLogin = async () => {\n    toast({\n      title: \"Скоро доступно\",\n      description: \"Вход через Google будет добавлен в ближайшее время\",\n    });\n  };\n\n  const handleGithubLogin = async () => {\n    toast({\n      title: \"Скоро доступно\",\n      description: \"Вход через GitHub будет добавлен в ближайшее время\",\n    });\n  };\n\n  return (\n    <div className=\"mt-6\">\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <div className=\"w-full border-t border-cyberdark-600\" />\n        </div>\n        <div className=\"relative flex justify-center text-sm\">\n          <span className=\"px-2 bg-cyberdark-800 text-gray-400\">Или продолжить с</span>\n        </div>\n      </div>\n\n      <div className=\"mt-6 grid grid-cols-2 gap-3\">\n        <div>\n          <Button\n            variant=\"outline\"\n            className=\"w-full border-cyberdark-600 bg-cyberdark-700 text-white hover:bg-cyberdark-600\"\n            onClick={handleGoogleLogin}\n          >\n            <span className=\"sr-only\">Sign {type === 'login' ? 'in' : 'up'} with Google</span>\n            <svg className=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n              <path\n                d=\"M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z\"\n              />\n            </svg>\n          </Button>\n        </div>\n\n        <div>\n          <Button \n            variant=\"outline\"\n            className=\"w-full border-cyberdark-600 bg-cyberdark-700 text-white hover:bg-cyberdark-600\"\n            onClick={handleGithubLogin}\n          >\n            <span className=\"sr-only\">Sign {type === 'login' ? 'in' : 'up'} with GitHub</span>\n            <svg className=\"h-5 w-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" aria-hidden=\"true\">\n              <path\n                fillRule=\"evenodd\"\n                d=\"M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z\"\n                clipRule=\"evenodd\"\n              />\n            </svg>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3365},"client/src/components/layout/UserMenu.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '@/lib/auth/AuthProvider';\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger, \n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { LogOut, User, Settings, Award, ChevronDown, Shield, Bell } from 'lucide-react';\nimport { getAvatarFallbackText } from '@/lib/auth/utils';\n\nexport default function UserMenu() {\n  const { user, logout, isLoading } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n  \n  // Brief loading state for UI transitions - max 3 seconds\n  const [showLoading, setShowLoading] = useState(true);\n  \n  React.useEffect(() => {\n    // Set a timeout to exit loading animation after 3 seconds\n    const timer = setTimeout(() => {\n      setShowLoading(false);\n    }, 3000);\n    \n    return () => clearTimeout(timer);\n  }, []);\n  \n  // Show login/register buttons if not loading or loading has finished and no user\n  if ((!isLoading || !showLoading) && !user) {\n    return (\n      <div className=\"flex items-center space-x-2\">\n        <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-300 hover:text-white\" onClick={() => (window as any).openAuthModal?.('login')}>\n          Войти\n        </Button>\n        <Button size=\"sm\" className=\"bg-cyberblue-500 hover:bg-cyberblue-600 text-white\" onClick={() => (window as any).openAuthModal?.('register')}>\n          Регистрация\n        </Button>\n      </div>\n    );\n  }\n  \n  // Only show loading state if we haven't timed out\n  if (isLoading && showLoading) {\n    return (\n      <div className=\"flex items-center space-x-2\">\n        <Avatar className=\"h-8 w-8 rounded-full border border-cyberdark-600\">\n          <AvatarFallback className=\"bg-cyberdark-700 text-white animate-pulse\">\n            ...\n          </AvatarFallback>\n        </Avatar>\n      </div>\n    );\n  }\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          className=\"flex items-center space-x-2 px-2 py-1 hover:bg-cyberdark-800 rounded-md\"\n        >\n          <Avatar className=\"h-8 w-8 rounded-full border border-cyberdark-600\">\n            <AvatarImage src={user?.avatar} alt={user?.username || 'User'} />\n            <AvatarFallback className=\"bg-cyberdark-700 text-white\">\n              {getAvatarFallbackText(user?.username || 'User')}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"hidden md:flex flex-col items-start\">\n            <span className=\"text-sm font-medium text-white\">{user?.username || 'User'}</span>\n            <span className=\"text-xs text-gray-400\">Уровень {user?.level || 1}</span>\n          </div>\n          <ChevronDown className=\"h-4 w-4 text-gray-400\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent className=\"bg-cyberdark-800 border-cyberdark-700 text-white\">\n        <div className=\"px-4 py-2 md:hidden\">\n          <p className=\"text-sm font-medium\">{user?.username || 'User'}</p>\n          <p className=\"text-xs text-gray-400\">{user?.email || ''}</p>\n        </div>\n        <DropdownMenuLabel className=\"md:hidden\">\n          <div className=\"flex items-center space-x-2 text-white\">\n            <Award className=\"h-4 w-4 text-cyberblue-500\" />\n            <span>Уровень {user?.level || 1} • {user?.points || 0} очков</span>\n          </div>\n        </DropdownMenuLabel>\n        <DropdownMenuSeparator className=\"md:hidden border-cyberdark-700\" />\n        <DropdownMenuItem className=\"focus:bg-cyberdark-700\" asChild>\n          <Link to=\"/profile\" className=\"flex cursor-pointer\">\n            <User className=\"mr-2 h-4 w-4\" />\n            <span>Мой профиль</span>\n          </Link>\n        </DropdownMenuItem>\n        <DropdownMenuItem className=\"focus:bg-cyberdark-700\" asChild>\n          <Link to=\"/notifications\" className=\"flex cursor-pointer\">\n            <Bell className=\"mr-2 h-4 w-4\" />\n            <span>Уведомления</span>\n          </Link>\n        </DropdownMenuItem>\n        {user?.role === 'admin' && (\n          <DropdownMenuItem className=\"focus:bg-cyberdark-700\" asChild>\n            <Link to=\"/admin\" className=\"flex cursor-pointer\">\n              <Shield className=\"mr-2 h-4 w-4\" />\n              <span>Админ панель</span>\n            </Link>\n          </DropdownMenuItem>\n        )}\n        <DropdownMenuItem className=\"focus:bg-cyberdark-700\" asChild>\n          <Link to=\"/settings\" className=\"flex cursor-pointer\">\n            <Settings className=\"mr-2 h-4 w-4\" />\n            <span>Настройки</span>\n          </Link>\n        </DropdownMenuItem>\n        <DropdownMenuSeparator className=\"border-cyberdark-700\" />\n        <DropdownMenuItem \n          className=\"focus:bg-cyberdark-700 text-red-400 focus:text-red-300 cursor-pointer\"\n          onClick={() => {\n            logout();\n            setIsOpen(false);\n          }}\n        >\n          <LogOut className=\"mr-2 h-4 w-4\" />\n          <span>Выйти</span>\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":5345},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/lib/auth/index.tsx":{"content":"\nexport { AuthProvider } from './provider';\nexport { useAuth } from './hook';\n","size_bytes":78},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/layout/ChatAssistant.tsx":{"content":"import React, { useState, useRef, useEffect } from 'react';\nimport { X, Send, Minimize2, Maximize2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { cn } from '@/lib/utils';\n\nimport { toast } from 'sonner';\n\ntype Message = {\n  id: string;\n  text: string;\n  isBot: boolean;\n  timestamp: Date;\n};\n\nexport default function ChatAssistant() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isMinimized, setIsMinimized] = useState(false);\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: 'Привет! Я CyberWhale, ваш ИИ-наставник по кибербезопасности. Давайте начнем наше увлекательное путешествие! 🖊️',\n      isBot: true,\n      timestamp: new Date(),\n    },\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [retryCount, setRetryCount] = useState(0);\n  \n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      scrollToBottom();\n      inputRef.current?.focus();\n    }\n  }, [messages, isOpen]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: message,\n      isBot: false,\n      timestamp: new Date(),\n    };\n    \n    setMessages(prev => [...prev, userMessage]);\n    setMessage('');\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          message: message.trim(),\n          history: messages.slice(-5)\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      if (!data || !data.botResponse) {\n        throw new Error(\"Получен пустой ответ от сервера\");\n      }\n\n      const botMessage: Message = {\n        id: Date.now().toString(),\n        text: data.botResponse,\n        isBot: true,\n        timestamp: new Date(),\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n      setRetryCount(0);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      toast.error(\"Произошла ошибка при отправке сообщения\");\n      \n      const errorMessage: Message = {\n        id: Date.now().toString(),\n        text: \"Извините, произошла ошибка при обработке вашего запроса. Пожалуйста, попробуйте позже.\",\n        isBot: true,\n        timestamp: new Date(),\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n      setRetryCount(prev => prev + 1);\n      \n      if (retryCount >= 2) {\n        setTimeout(() => {\n          const helpMessage: Message = {\n            id: Date.now().toString(),\n            text: \"Похоже, возникли проблемы с подключением к ИИ. Вы можете попробовать перезагрузить страницу или воспользоваться основными функциями без ИИ.\",\n            isBot: true,\n            timestamp: new Date(),\n          };\n          setMessages(prev => [...prev, helpMessage]);\n        }, 1000);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleChat = () => {\n    setIsOpen(!isOpen);\n    setIsMinimized(false);\n  };\n\n  const toggleMinimize = () => {\n    setIsMinimized(!isMinimized);\n  };\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      {!isOpen && (\n        <button\n          onClick={toggleChat}\n          className=\"w-16 h-16 flex items-center justify-center\"\n        >\n          <img \n            src=\"/your-logo.png\" \n            alt=\"CyberWhale ИИ\" \n            className=\"w-10 h-10 object-contain\"\n          />\n        </button>\n      )}\n\n      {isOpen && (\n        <div \n          className={cn(\n            \"bg-cyberdark-900 border border-cyberdark-700 rounded-lg shadow-lg overflow-hidden transition-all duration-300 flex flex-col\",\n            isMinimized ? \"w-72 h-16\" : \"w-80 sm:w-96 h-[500px]\"\n          )}\n        >\n          <div className=\"bg-cyberdark-800 p-3 flex items-center justify-between border-b border-cyberdark-700\">\n            <div className=\"flex items-center\">\n              <div className=\"mr-2\">\n                <img \n                  src=\"/your-logo.png\" \n                  alt=\"CyberWhale ИИ\" \n                  className=\"w-8 h-8 object-contain\"\n                />\n              </div>\n              <div>\n                <h3 className=\"text-white font-medium\">CyberWhale ИИ</h3>\n                <div className=\"text-xs text-gray-400\">Уровень 1 • 0 очков</div>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <button \n                onClick={toggleMinimize} \n                className=\"p-1 text-gray-400 hover:text-white rounded-full hover:bg-cyberdark-700\"\n              >\n                {isMinimized ? <Maximize2 className=\"w-4 h-4\" /> : <Minimize2 className=\"w-4 h-4\" />}\n              </button>\n              <button \n                onClick={toggleChat} \n                className=\"p-1 text-gray-400 hover:text-white rounded-full hover:bg-cyberdark-700\"\n              >\n                <X className=\"w-4 h-4\" />\n              </button>\n            </div>\n          </div>\n\n          {!isMinimized && (\n            <>\n              <div className=\"flex-1 p-4 overflow-y-auto\">\n                {messages.map((msg) => (\n                  <div \n                    key={msg.id} \n                    className={cn(\n                      \"mb-4 max-w-[80%] animate-slide-in\",\n                      msg.isBot ? \"mr-auto\" : \"ml-auto\"\n                    )}\n                  >\n                    <div \n                      className={cn(\n                        \"rounded-lg p-3\",\n                        msg.isBot \n                          ? \"bg-cyberdark-800 text-white\" \n                          : \"bg-cyberblue-500 text-white\"\n                      )}\n                    >\n                      {msg.text}\n                    </div>\n                    <div \n                      className={cn(\n                        \"text-xs mt-1 text-gray-400\",\n                        msg.isBot ? \"text-left\" : \"text-right\"\n                      )}\n                    >\n                      {msg.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}\n                    </div>\n                  </div>\n                ))}\n                {isLoading && (\n                  <div className=\"mb-4 max-w-[80%] mr-auto\">\n                    <div className=\"bg-cyberdark-800 rounded-lg p-3 flex items-center space-x-2\">\n                      <div className=\"h-2 w-2 bg-gray-500 rounded-full animate-pulse\"></div>\n                      <div className=\"h-2 w-2 bg-gray-500 rounded-full animate-pulse delay-75\"></div>\n                      <div className=\"h-2 w-2 bg-gray-500 rounded-full animate-pulse delay-150\"></div>\n                    </div>\n                  </div>\n                )}\n                <div ref={messagesEndRef} />\n              </div>\n\n              <div className=\"p-3 border-t border-cyberdark-700\">\n                <form onSubmit={handleSubmit} className=\"flex\">\n                  <Input\n                    ref={inputRef}\n                    type=\"text\"\n                    placeholder=\"Задайте вопрос...\"\n                    className=\"bg-cyberdark-800 border-cyberdark-700 flex-1\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    disabled={isLoading}\n                  />\n                  <Button \n                    type=\"submit\" \n                    size=\"icon\" \n                    className=\"ml-2 bg-cyberblue-500 hover:bg-cyberblue-600\"\n                    disabled={!message.trim() || isLoading}\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </Button>\n                </form>\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":8597},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/pages/admin/NewAdminPanel.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Shield, \n  Plus, \n  Edit, \n  Trash2,\n  Eye,\n  EyeOff,\n  Save,\n  RefreshCw,\n  BookOpen,\n  HelpCircle,\n  FileText,\n  Download,\n  Upload,\n  X,\n  CheckCircle,\n  AlertTriangle\n} from 'lucide-react';\n\ninterface Challenge {\n  id: number;\n  title: string;\n  description: string;\n  category: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  points: number;\n  flag: string;\n  hints: string[];\n  fileUrl?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst categories = [\n  { value: 'web', label: 'Web Security' },\n  { value: 'crypto', label: 'Криптография' },\n  { value: 'osint', label: 'OSINT' },\n  { value: 'steganography', label: 'Стеганография' },\n  { value: 'reverse-engineering', label: 'Реверс-инжиниринг' },\n  { value: 'forensics', label: 'Форензика' },\n  { value: 'pwn', label: 'PWN' },\n  { value: 'programming', label: 'Программирование' },\n  { value: 'network', label: 'Сетевая безопасность' }\n];\n\nconst difficulties = [\n  { value: 'beginner', label: 'Начинающий', color: 'bg-green-500' },\n  { value: 'intermediate', label: 'Средний', color: 'bg-yellow-500' },\n  { value: 'advanced', label: 'Продвинутый', color: 'bg-orange-500' },\n  { value: 'expert', label: 'Эксперт', color: 'bg-red-500' }\n];\n\nexport default function NewAdminPanel() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [password, setPassword] = useState('');\n  const [challenges, setChallenges] = useState<Challenge[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editingChallenge, setEditingChallenge] = useState<Challenge | null>(null);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [activeTab, setActiveTab] = useState('challenges');\n  const { toast } = useToast();\n\n  // Form state for creating/editing challenges\n  const [challengeForm, setChallengeForm] = useState({\n    title: '',\n    description: '',\n    category: 'web',\n    difficulty: 'beginner' as Challenge['difficulty'],\n    points: 100,\n    flag: '',\n    hints: [''],\n    fileUrl: ''\n  });\n\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/admin/verify-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ password })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        setIsAuthenticated(true);\n        setPassword('');\n        await loadChallenges();\n        toast({\n          title: \"Доступ разрешен\",\n          description: \"Добро пожаловать в админ панель\"\n        });\n      } else {\n        toast({\n          title: \"Ошибка доступа\",\n          description: data.message,\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось проверить пароль\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadChallenges = async () => {\n    try {\n      const response = await fetch('/api/challenges');\n      if (response.ok) {\n        const data = await response.json();\n        setChallenges(data);\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки заданий:', error);\n    }\n  };\n\n  const handleCreateChallenge = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch('/api/admin/challenges', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...challengeForm,\n          hints: challengeForm.hints.filter(hint => hint.trim() !== '')\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Задание создано\",\n          description: \"CTF задание успешно добавлено в базу\"\n        });\n        \n        setShowCreateForm(false);\n        resetForm();\n        await loadChallenges();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка создания\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleUpdateChallenge = async (id: number) => {\n    setIsLoading(true);\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/admin/challenges/${id}`, {\n        method: 'PUT',\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...challengeForm,\n          hints: challengeForm.hints.filter(hint => hint.trim() !== '')\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Задание обновлено\",\n          description: \"Изменения сохранены успешно\"\n        });\n        \n        setEditingChallenge(null);\n        resetForm();\n        await loadChallenges();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка обновления\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteChallenge = async (id: number) => {\n    if (!confirm('Вы уверены, что хотите удалить это задание?')) return;\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/admin/challenges/${id}`, {\n        method: 'DELETE',\n        headers: { \n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Задание удалено\",\n          description: \"CTF задание убрано из базы\"\n        });\n        await loadChallenges();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка удаления\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setChallengeForm({\n      title: '',\n      description: '',\n      category: 'web',\n      difficulty: 'beginner',\n      points: 100,\n      flag: '',\n      hints: [''],\n      fileUrl: ''\n    });\n  };\n\n  const startEditing = (challenge: Challenge) => {\n    setEditingChallenge(challenge);\n    setChallengeForm({\n      title: challenge.title,\n      description: challenge.description,\n      category: challenge.category,\n      difficulty: challenge.difficulty,\n      points: challenge.points,\n      flag: challenge.flag,\n      hints: challenge.hints.length > 0 ? challenge.hints : [''],\n      fileUrl: challenge.fileUrl || ''\n    });\n  };\n\n  const addHint = () => {\n    setChallengeForm({\n      ...challengeForm,\n      hints: [...challengeForm.hints, '']\n    });\n  };\n\n  const removeHint = (index: number) => {\n    setChallengeForm({\n      ...challengeForm,\n      hints: challengeForm.hints.filter((_, i) => i !== index)\n    });\n  };\n\n  const updateHint = (index: number, value: string) => {\n    const newHints = [...challengeForm.hints];\n    newHints[index] = value;\n    setChallengeForm({\n      ...challengeForm,\n      hints: newHints\n    });\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-cyberdark-950 flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md bg-cyberdark-900 border-cyberdark-700\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Shield className=\"w-12 h-12 text-red-400\" />\n            </div>\n            <CardTitle className=\"text-white\">Админ панель CyberWhale</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Панель управления CTF платформой\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handlePasswordSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"password\" className=\"text-gray-300\">Пароль администратора</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                  placeholder=\"Введите пароль\"\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-red-600 hover:bg-red-700\"\n                disabled={isLoading}\n              >\n                {isLoading ? <RefreshCw className=\"w-4 h-4 animate-spin mr-2\" /> : <Shield className=\"w-4 h-4 mr-2\" />}\n                Войти в панель\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-950 p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white flex items-center gap-3\">\n                <Shield className=\"w-8 h-8 text-red-400\" />\n                Админ панель CyberWhale\n              </h1>\n              <p className=\"text-gray-400 mt-2\">Управление CTF платформой и заданиями</p>\n            </div>\n            <Badge variant=\"outline\" className=\"text-green-400 border-green-400\">\n              Панель активна\n            </Badge>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3 bg-cyberdark-800\">\n            <TabsTrigger value=\"challenges\" className=\"data-[state=active]:bg-cyberdark-700 text-white\">\n              CTF Задания\n            </TabsTrigger>\n            <TabsTrigger value=\"guide\" className=\"data-[state=active]:bg-cyberdark-700 text-white\">\n              Инструкция\n            </TabsTrigger>\n            <TabsTrigger value=\"import\" className=\"data-[state=active]:bg-cyberdark-700 text-white\">\n              Импорт/Экспорт\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Challenges Management */}\n          <TabsContent value=\"challenges\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-white\">Управление заданиями</h2>\n              <Button \n                onClick={() => setShowCreateForm(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Создать задание\n              </Button>\n            </div>\n\n            {/* Challenge Form */}\n            {(showCreateForm || editingChallenge) && (\n              <Card className=\"bg-cyberdark-900 border-cyberdark-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">\n                    {editingChallenge ? 'Редактирование задания' : 'Создание нового задания'}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={editingChallenge ? (e) => { e.preventDefault(); handleUpdateChallenge(editingChallenge.id); } : handleCreateChallenge} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-gray-300\">Название задания</Label>\n                        <Input\n                          value={challengeForm.title}\n                          onChange={(e) => setChallengeForm({ ...challengeForm, title: e.target.value })}\n                          className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                          placeholder=\"Например: SQL Injection Basic\"\n                          required\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label className=\"text-gray-300\">Категория</Label>\n                        <Select value={challengeForm.category} onValueChange={(value) => setChallengeForm({ ...challengeForm, category: value })}>\n                          <SelectTrigger className=\"bg-cyberdark-800 border-cyberdark-600 text-white\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-cyberdark-800 border-cyberdark-600\">\n                            {categories.map(cat => (\n                              <SelectItem key={cat.value} value={cat.value} className=\"text-white hover:bg-cyberdark-700\">\n                                {cat.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-gray-300\">Сложность</Label>\n                        <Select value={challengeForm.difficulty} onValueChange={(value) => setChallengeForm({ ...challengeForm, difficulty: value as Challenge['difficulty'] })}>\n                          <SelectTrigger className=\"bg-cyberdark-800 border-cyberdark-600 text-white\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-cyberdark-800 border-cyberdark-600\">\n                            {difficulties.map(diff => (\n                              <SelectItem key={diff.value} value={diff.value} className=\"text-white hover:bg-cyberdark-700\">\n                                {diff.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-gray-300\">Очки за решение</Label>\n                        <Input\n                          type=\"number\"\n                          value={challengeForm.points}\n                          onChange={(e) => setChallengeForm({ ...challengeForm, points: parseInt(e.target.value) || 100 })}\n                          className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                          min=\"10\"\n                          max=\"1000\"\n                          step=\"10\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-300\">Описание задания</Label>\n                      <Textarea\n                        value={challengeForm.description}\n                        onChange={(e) => setChallengeForm({ ...challengeForm, description: e.target.value })}\n                        className=\"bg-cyberdark-800 border-cyberdark-600 text-white min-h-24\"\n                        placeholder=\"Подробное описание задания и цели...\"\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-300\">Флаг (ответ)</Label>\n                      <Input\n                        value={challengeForm.flag}\n                        onChange={(e) => setChallengeForm({ ...challengeForm, flag: e.target.value })}\n                        className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                        placeholder=\"cyberwhale{example_flag}\"\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-300\">Ссылка на файлы (опционально)</Label>\n                      <Input\n                        value={challengeForm.fileUrl}\n                        onChange={(e) => setChallengeForm({ ...challengeForm, fileUrl: e.target.value })}\n                        className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                        placeholder=\"https://example.com/challenge-files.zip\"\n                      />\n                    </div>\n\n                    <div>\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <Label className=\"text-gray-300\">Подсказки</Label>\n                        <Button type=\"button\" onClick={addHint} variant=\"outline\" size=\"sm\">\n                          <Plus className=\"w-3 h-3 mr-1\" />\n                          Добавить\n                        </Button>\n                      </div>\n                      {challengeForm.hints.map((hint, index) => (\n                        <div key={index} className=\"flex gap-2 mb-2\">\n                          <Input\n                            value={hint}\n                            onChange={(e) => updateHint(index, e.target.value)}\n                            className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                            placeholder={`Подсказка ${index + 1}`}\n                          />\n                          {challengeForm.hints.length > 1 && (\n                            <Button type=\"button\" onClick={() => removeHint(index)} variant=\"outline\" size=\"sm\">\n                              <X className=\"w-3 h-3\" />\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button type=\"submit\" className=\"bg-green-600 hover:bg-green-700\" disabled={isLoading}>\n                        {isLoading ? <RefreshCw className=\"w-4 h-4 animate-spin mr-2\" /> : <Save className=\"w-4 h-4 mr-2\" />}\n                        {editingChallenge ? 'Сохранить изменения' : 'Создать задание'}\n                      </Button>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => {\n                          setShowCreateForm(false);\n                          setEditingChallenge(null);\n                          resetForm();\n                        }}\n                      >\n                        Отмена\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Challenges List */}\n            <div className=\"grid gap-4\">\n              {challenges.map((challenge) => (\n                <Card key={challenge.id} className=\"bg-cyberdark-900 border-cyberdark-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"text-lg font-semibold text-white\">{challenge.title}</h3>\n                          <Badge className={difficulties.find(d => d.value === challenge.difficulty)?.color}>\n                            {difficulties.find(d => d.value === challenge.difficulty)?.label}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-blue-400 border-blue-400\">\n                            {categories.find(c => c.value === challenge.category)?.label}\n                          </Badge>\n                          <span className=\"text-yellow-400 font-medium\">{challenge.points} pts</span>\n                        </div>\n                        <p className=\"text-gray-400 mb-2\">{challenge.description}</p>\n                        <div className=\"text-sm text-gray-500\">\n                          Флаг: <code className=\"bg-cyberdark-800 px-2 py-1 rounded\">{challenge.flag}</code>\n                        </div>\n                        {challenge.hints.length > 0 && (\n                          <div className=\"text-sm text-gray-500 mt-1\">\n                            Подсказки: {challenge.hints.length} шт.\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => startEditing(challenge)}\n                          variant=\"outline\" \n                          size=\"sm\"\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <Button \n                          onClick={() => handleDeleteChallenge(challenge.id)}\n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"text-red-400 border-red-400 hover:bg-red-950\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {challenges.length === 0 && (\n                <Card className=\"bg-cyberdark-900 border-cyberdark-700\">\n                  <CardContent className=\"p-8 text-center\">\n                    <FileText className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n                    <p className=\"text-gray-400\">Пока нет созданных заданий</p>\n                    <p className=\"text-gray-500 text-sm\">Создайте первое CTF задание</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          {/* Instructions Guide */}\n          <TabsContent value=\"guide\" className=\"space-y-6\">\n            <Card className=\"bg-cyberdark-900 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <BookOpen className=\"w-5 h-5\" />\n                  Подробная инструкция по использованию админ панели\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6 text-gray-300\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">🔐 Доступ к панели</h3>\n                  <p className=\"mb-2\">Пароль для входа: <code className=\"bg-cyberdark-800 px-2 py-1 rounded text-yellow-400\">301062Ki</code></p>\n                  <p>Панель доступна по ссылке в футере сайта в разделе \"Панель управления\"</p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">📝 Создание CTF заданий</h3>\n                  <ol className=\"list-decimal list-inside space-y-2 ml-4\">\n                    <li>Нажмите кнопку \"Создать задание\" в разделе \"CTF Задания\"</li>\n                    <li>Заполните обязательные поля:\n                      <ul className=\"list-disc list-inside ml-4 mt-1 space-y-1\">\n                        <li><strong>Название:</strong> Краткое описание задания</li>\n                        <li><strong>Категория:</strong> Выберите тип задания (Web, Crypto, OSINT и т.д.)</li>\n                        <li><strong>Сложность:</strong> От начинающий до эксперт</li>\n                        <li><strong>Очки:</strong> Награда за решение (10-1000 очков)</li>\n                        <li><strong>Описание:</strong> Подробное объяснение задачи</li>\n                        <li><strong>Флаг:</strong> Правильный ответ в формате cyberwhale{\"{...}\"}</li>\n                      </ul>\n                    </li>\n                    <li>Добавьте подсказки (опционально) - помогают пользователям</li>\n                    <li>Укажите ссылку на файлы (если нужны дополнительные материалы)</li>\n                    <li>Нажмите \"Создать задание\"</li>\n                  </ol>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">✏️ Редактирование заданий</h3>\n                  <ul className=\"list-disc list-inside space-y-1 ml-4\">\n                    <li>Нажмите кнопку редактирования (карандаш) рядом с заданием</li>\n                    <li>Измените необходимые поля</li>\n                    <li>Сохраните изменения</li>\n                    <li>Изменения сразу отобразятся на сайте</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">🗑️ Удаление заданий</h3>\n                  <ul className=\"list-disc list-inside space-y-1 ml-4\">\n                    <li>Нажмите кнопку удаления (корзина) рядом с заданием</li>\n                    <li>Подтвердите удаление в диалоге</li>\n                    <li>Задание будет скрыто, но останется в базе данных</li>\n                  </ul>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">📊 Примеры хороших заданий</h3>\n                  <div className=\"bg-cyberdark-800 p-4 rounded-lg\">\n                    <h4 className=\"font-semibold text-blue-400 mb-2\">Пример: Web Security</h4>\n                    <ul className=\"space-y-1 text-sm\">\n                      <li><strong>Название:</strong> \"SQL Injection в форме входа\"</li>\n                      <li><strong>Описание:</strong> \"Найдите способ обойти аутентификацию используя SQL injection. Сайт: http://example.com/login\"</li>\n                      <li><strong>Флаг:</strong> \"cyberwhale{\"{sql_bypass_admin}\"}\"</li>\n                      <li><strong>Подсказки:</strong> [\"Попробуйте ввести &apos; OR 1=1--\", \"Обратите внимание на поле пароля\"]</li>\n                    </ul>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">⚠️ Важные рекомендации</h3>\n                  <ul className=\"list-disc list-inside space-y-1 ml-4\">\n                    <li>Всегда тестируйте задания перед публикацией</li>\n                    <li>Используйте понятные описания</li>\n                    <li>Флаги должны быть в формате: cyberwhale{\"{...}\"}</li>\n                    <li>Добавляйте подсказки для сложных заданий</li>\n                    <li>Указывайте реалистичные количества очков</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Import/Export */}\n          <TabsContent value=\"import\" className=\"space-y-6\">\n            <Card className=\"bg-cyberdark-900 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Upload className=\"w-5 h-5\" />\n                  Импорт и экспорт заданий\n                </CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Массовое управление CTF заданиями\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">📄 Формат импорта JSON</h3>\n                  <pre className=\"bg-cyberdark-800 p-4 rounded-lg text-sm text-gray-300 overflow-x-auto\">\n{`[\n  {\n    \"title\": \"SQL Injection Basic\",\n    \"description\": \"Найдите уязвимость в форме входа\",\n    \"category\": \"web\",\n    \"difficulty\": \"beginner\",\n    \"points\": 100,\n    \"flag\": \"cyberwhale{sql_injection}\",\n    \"hints\": [\"Попробуйте ' OR 1=1--\", \"Обратите внимание на поле логина\"],\n    \"fileUrl\": \"https://example.com/files.zip\"\n  }\n]`}\n                  </pre>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <Card className=\"bg-cyberdark-800 border-cyberdark-600\">\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold text-white mb-2 flex items-center gap-2\">\n                        <Upload className=\"w-4 h-4\" />\n                        Импорт заданий\n                      </h4>\n                      <p className=\"text-gray-400 text-sm mb-3\">Загрузите JSON файл с заданиями</p>\n                      <Input \n                        type=\"file\" \n                        accept=\".json\"\n                        className=\"bg-cyberdark-700 border-cyberdark-500 text-white mb-3\"\n                      />\n                      <Button className=\"w-full bg-blue-600 hover:bg-blue-700\" disabled>\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Импортировать (в разработке)\n                      </Button>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-cyberdark-800 border-cyberdark-600\">\n                    <CardContent className=\"p-4\">\n                      <h4 className=\"font-semibold text-white mb-2 flex items-center gap-2\">\n                        <Download className=\"w-4 h-4\" />\n                        Экспорт заданий\n                      </h4>\n                      <p className=\"text-gray-400 text-sm mb-3\">Скачайте все задания в JSON</p>\n                      <Button className=\"w-full bg-green-600 hover:bg-green-700\" disabled>\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Экспортировать (в разработке)\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"bg-yellow-950 border border-yellow-800 rounded-lg p-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-400 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-yellow-400 mb-1\">Функции в разработке</h4>\n                      <p className=\"text-yellow-200 text-sm\">\n                        Импорт и экспорт заданий находятся в процессе разработки. \n                        Пока используйте форму создания заданий вручную.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":33495},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/auth/AuthLayout.tsx":{"content":"\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Shield } from 'lucide-react';\n\ninterface AuthLayoutProps {\n  children: React.ReactNode;\n  title: string;\n  subtitle: React.ReactNode;\n}\n\nexport function AuthLayout({ children, title, subtitle }: AuthLayoutProps) {\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8 bg-cyberdark-900\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <Shield className=\"mx-auto h-12 w-12 text-cyberblue-500\" />\n          <h2 className=\"mt-6 text-3xl font-extrabold text-white\">\n            {title}\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-400\">\n            {subtitle}\n          </p>\n        </div>\n\n        <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-cyberdark-800 py-8 px-4 shadow sm:rounded-lg sm:px-10 border border-cyberdark-700\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1044},"client/src/pages/knowledge/ArticlePage.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { \n  ArrowLeft, \n  Calendar, \n  User, \n  Clock, \n  BookOpen, \n  ThumbsUp, \n  MessageSquare, \n  Share2, \n  Bookmark \n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function ArticlePage() {\n  const { id } = useParams<{ id: string }>();\n  const [article, setArticle] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Mock fetch article from API\n    const fetchArticle = async () => {\n      // Имитация задержки API\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Получение статьи из мока\n      const mockArticle = {\n        id: id,\n        title: 'Основы защиты веб-приложений от SQL-инъекций',\n        content: `\n          <h2>Что такое SQL-инъекции?</h2>\n          <p>SQL-инъекция — это атака, при которой злоумышленник внедряет вредоносный SQL-код в запросы, отправляемые приложением к базе данных. Успешные атаки могут привести к несанкционированному доступу к конфиденциальной информации, изменению или удалению данных, а в некоторых случаях даже к выполнению административных операций на сервере базы данных.</p>\n          \n          <h2>Как работают SQL-инъекции?</h2>\n          <p>SQL-инъекции обычно происходят, когда приложение принимает пользовательский ввод и включает его непосредственно в SQL-запрос без должной валидации или экранирования. Например, рассмотрим простой запрос для аутентификации пользователя:</p>\n          \n          <pre><code>SELECT * FROM users WHERE username = 'USERNAME' AND password = 'PASSWORD';</code></pre>\n          \n          <p>Если приложение просто подставляет пользовательский ввод в этот запрос, злоумышленник может ввести специально сформированный текст, который изменит логику запроса:</p>\n          \n          <pre><code>USERNAME: admin' --\nPASSWORD: что угодно</code></pre>\n          \n          <p>Это приведет к запросу:</p>\n          \n          <pre><code>SELECT * FROM users WHERE username = 'admin' --' AND password = 'что угодно';</code></pre>\n          \n          <p>Комментарий <code>--</code> приводит к тому, что остальная часть запроса игнорируется, позволяя войти в систему без корректного пароля.</p>\n          \n          <h2>Методы защиты от SQL-инъекций</h2>\n          \n          <h3>1. Подготовленные выражения (Prepared Statements)</h3>\n          <p>Использование подготовленных выражений с параметризованными запросами является наиболее эффективным способом защиты от SQL-инъекций. При этом подходе SQL-код и данные разделяются, и СУБД может различать их.</p>\n          \n          <pre><code>// Пример на Node.js с использованием подготовленных выражений\nconst stmt = db.prepare(\"SELECT * FROM users WHERE username = ? AND password = ?\");\nconst result = stmt.get(username, password);</code></pre>\n          \n          <h3>2. ORM (Object-Relational Mapping)</h3>\n          <p>Использование ORM-библиотек помогает абстрагироваться от прямого составления SQL-запросов и автоматически применяет лучшие практики безопасности.</p>\n          \n          <pre><code>// Пример с использованием TypeORM\nconst user = await userRepository.findOne({\n  where: {\n    username: username,\n    password: password\n  }\n});</code></pre>\n          \n          <h3>3. Валидация и санитизация ввода</h3>\n          <p>Всегда проверяйте пользовательский ввод на соответствие ожидаемому формату и типу данных. Отклоняйте любой подозрительный ввод.</p>\n          \n          <h3>4. Принцип наименьших привилегий</h3>\n          <p>Используйте учетные записи базы данных с минимально необходимыми привилегиями для работы приложения.</p>\n          \n          <h3>5. WAF (Web Application Firewall)</h3>\n          <p>Реализуйте WAF для дополнительного уровня защиты, который может обнаруживать и блокировать попытки SQL-инъекций.</p>\n          \n          <h2>Практический пример защиты</h2>\n          <p>Рассмотрим два подхода к реализации аутентификации:</p>\n          \n          <h3>Небезопасный подход:</h3>\n          <pre><code>// НЕ ДЕЛАЙТЕ ТАК!\nconst query = \"SELECT * FROM users WHERE username = '\" + username + \"' AND password = '\" + password + \"'\";\nconst user = db.exec(query);</code></pre>\n          \n          <h3>Безопасный подход:</h3>\n          <pre><code>// Правильный способ\nconst query = \"SELECT * FROM users WHERE username = ? AND password = ?\";\nconst user = db.prepare(query).get(username, password);</code></pre>\n          \n          <h2>Заключение</h2>\n          <p>SQL-инъекции остаются одной из наиболее распространенных и опасных уязвимостей веб-приложений. Следуя описанным выше методам защиты и постоянно обновляя свои знания о безопасности, разработчики могут значительно снизить риск успешных атак на свои приложения.</p>\n          \n          <p>Важно помнить, что безопасность — это непрерывный процесс, требующий постоянного внимания и обновления методов защиты в соответствии с новыми угрозами.</p>\n        `,\n        author: {\n          name: 'Александр Петров',\n          avatar: '/avatar1.png',\n        },\n        date: '2023-11-15',\n        readTime: 8,\n        category: 'Безопасность веб-приложений',\n        tags: ['sql-injection', 'web-security', 'database'],\n        likes: 67,\n        comments: 12,\n      };\n      \n      setArticle(mockArticle);\n      setLoading(false);\n    };\n\n    fetchArticle();\n  }, [id]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n        <div className=\"pt-20 flex-grow flex items-center justify-center\">\n          <div className=\"animate-pulse flex flex-col items-center\">\n            <div className=\"h-8 bg-cyberdark-700 rounded w-64 mb-4\"></div>\n            <div className=\"h-6 bg-cyberdark-700 rounded w-48\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!article) {\n    return (\n      <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n        <div className=\"pt-20 flex-grow flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold text-white mb-4\">Статья не найдена</h2>\n            <p className=\"text-gray-400 mb-6\">Статья с указанным идентификатором не существует.</p>\n            <Link to=\"/knowledge\">\n              <Button>\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Вернуться к базе знаний\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <div className=\"pt-20 flex-grow\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Back button */}\n          <div className=\"mb-6\">\n            <Link to=\"/knowledge\" className=\"inline-flex items-center text-gray-400 hover:text-white transition\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              <span>Вернуться к базе знаний</span>\n            </Link>\n          </div>\n          \n          {/* Article header */}\n          <div className=\"mb-8\">\n            <Badge variant=\"outline\" className=\"bg-cyberdark-800 text-gray-300 mb-4\">\n              {article.category}\n            </Badge>\n            \n            <h1 className=\"text-3xl font-bold text-white mb-6\">{article.title}</h1>\n            \n            <div className=\"flex items-center justify-between flex-wrap gap-4\">\n              <div className=\"flex items-center\">\n                <Avatar className=\"mr-3 h-10 w-10\">\n                  <AvatarImage src={article.author.avatar} alt={article.author.name} />\n                  <AvatarFallback>{article.author.name.charAt(0)}</AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"text-white font-medium\">{article.author.name}</p>\n                  <div className=\"flex items-center text-sm text-gray-400\">\n                    <Calendar className=\"mr-1 h-3 w-3\" />\n                    <span>{article.date}</span>\n                    <span className=\"mx-2\">•</span>\n                    <Clock className=\"mr-1 h-3 w-3\" />\n                    <span>{article.readTime} мин. чтения</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Bookmark className=\"mr-1 h-4 w-4\" />\n                  Сохранить\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Share2 className=\"mr-1 h-4 w-4\" />\n                  Поделиться\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          <Separator className=\"mb-8 bg-cyberdark-700\" />\n          \n          {/* Article content */}\n          <div \n            className=\"prose prose-invert max-w-none mb-10\"\n            dangerouslySetInnerHTML={{ __html: article.content }}\n          />\n          \n          {/* Article footer */}\n          <div className=\"mt-10\">\n            <div className=\"flex flex-wrap gap-2 mb-6\">\n              {article.tags.map((tag: string) => (\n                <Badge key={tag} variant=\"outline\" className=\"bg-cyberdark-800\">\n                  #{tag}\n                </Badge>\n              ))}\n            </div>\n            \n            <Separator className=\"mb-6 bg-cyberdark-700\" />\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex space-x-4\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <ThumbsUp className=\"mr-2 h-4 w-4\" />\n                  Полезно ({article.likes})\n                </Button>\n                <Button variant=\"outline\" size=\"sm\">\n                  <MessageSquare className=\"mr-2 h-4 w-4\" />\n                  Комментарии ({article.comments})\n                </Button>\n              </div>\n            </div>\n          </div>\n          \n          {/* Related articles would go here */}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12522},"client/src/pages/admin/FinalAdminPanel.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Shield, \n  Plus, \n  Edit, \n  Trash2,\n  Save,\n  RefreshCw,\n  BookOpen,\n  Upload,\n  Download,\n  X,\n  CheckCircle,\n  AlertTriangle\n} from 'lucide-react';\n\ninterface Challenge {\n  id: number;\n  title: string;\n  description: string;\n  category: string;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  points: number;\n  flag: string;\n  hints: string[];\n  fileUrl?: string;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst categories = [\n  { value: 'web', label: 'Web Security' },\n  { value: 'crypto', label: 'Криптография' },\n  { value: 'osint', label: 'OSINT' },\n  { value: 'steganography', label: 'Стеганография' },\n  { value: 'reverse-engineering', label: 'Реверс-инжиниринг' },\n  { value: 'forensics', label: 'Форензика' },\n  { value: 'pwn', label: 'PWN' },\n  { value: 'programming', label: 'Программирование' },\n  { value: 'network', label: 'Сетевая безопасность' }\n];\n\nconst difficulties = [\n  { value: 'beginner', label: 'Начинающий', color: 'bg-green-500' },\n  { value: 'intermediate', label: 'Средний', color: 'bg-yellow-500' },\n  { value: 'advanced', label: 'Продвинутый', color: 'bg-orange-500' },\n  { value: 'expert', label: 'Эксперт', color: 'bg-red-500' }\n];\n\nexport default function FinalAdminPanel() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [password, setPassword] = useState('');\n  const [challenges, setChallenges] = useState<Challenge[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [editingChallenge, setEditingChallenge] = useState<Challenge | null>(null);\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [activeTab, setActiveTab] = useState('challenges');\n  const { toast } = useToast();\n\n  const [challengeForm, setChallengeForm] = useState({\n    title: '',\n    description: '',\n    category: 'web',\n    difficulty: 'beginner' as Challenge['difficulty'],\n    points: 100,\n    flag: '',\n    hints: [''],\n    fileUrl: ''\n  });\n\n  const handlePasswordSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch('/api/admin/verify-password', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ password })\n      });\n      \n      const data = await response.json();\n      \n      if (data.success) {\n        setIsAuthenticated(true);\n        setPassword('');\n        await loadChallenges();\n        toast({\n          title: \"Доступ разрешен\",\n          description: \"Добро пожаловать в админ панель\"\n        });\n      } else {\n        toast({\n          title: \"Ошибка доступа\",\n          description: data.message,\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось проверить пароль\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadChallenges = async () => {\n    try {\n      const response = await fetch('/api/challenges');\n      if (response.ok) {\n        const data = await response.json();\n        setChallenges(data);\n      }\n    } catch (error) {\n      console.error('Ошибка загрузки заданий:', error);\n    }\n  };\n\n  const handleCreateChallenge = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch('/api/admin/challenges', {\n        method: 'POST',\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...challengeForm,\n          hints: challengeForm.hints.filter(hint => hint.trim() !== '')\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Задание создано\",\n          description: \"CTF задание успешно добавлено в базу\"\n        });\n        \n        setShowCreateForm(false);\n        resetForm();\n        await loadChallenges();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка создания\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleUpdateChallenge = async (id: number) => {\n    setIsLoading(true);\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/admin/challenges/${id}`, {\n        method: 'PUT',\n        headers: { \n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...challengeForm,\n          hints: challengeForm.hints.filter(hint => hint.trim() !== '')\n        })\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Задание обновлено\",\n          description: \"Изменения сохранены успешно\"\n        });\n        \n        setEditingChallenge(null);\n        resetForm();\n        await loadChallenges();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка обновления\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleDeleteChallenge = async (id: number) => {\n    if (!confirm('Вы уверены, что хотите удалить это задание?')) return;\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/admin/challenges/${id}`, {\n        method: 'DELETE',\n        headers: { \n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        toast({\n          title: \"Задание удалено\",\n          description: \"CTF задание убрано из базы\"\n        });\n        await loadChallenges();\n      } else {\n        throw new Error(data.message);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Ошибка удаления\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const resetForm = () => {\n    setChallengeForm({\n      title: '',\n      description: '',\n      category: 'web',\n      difficulty: 'beginner',\n      points: 100,\n      flag: '',\n      hints: [''],\n      fileUrl: ''\n    });\n  };\n\n  const startEditing = (challenge: Challenge) => {\n    setEditingChallenge(challenge);\n    setChallengeForm({\n      title: challenge.title,\n      description: challenge.description,\n      category: challenge.category,\n      difficulty: challenge.difficulty,\n      points: challenge.points,\n      flag: challenge.flag,\n      hints: challenge.hints.length > 0 ? challenge.hints : [''],\n      fileUrl: challenge.fileUrl || ''\n    });\n  };\n\n  const addHint = () => {\n    setChallengeForm({\n      ...challengeForm,\n      hints: [...challengeForm.hints, '']\n    });\n  };\n\n  const removeHint = (index: number) => {\n    setChallengeForm({\n      ...challengeForm,\n      hints: challengeForm.hints.filter((_, i) => i !== index)\n    });\n  };\n\n  const updateHint = (index: number, value: string) => {\n    const newHints = [...challengeForm.hints];\n    newHints[index] = value;\n    setChallengeForm({\n      ...challengeForm,\n      hints: newHints\n    });\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-cyberdark-950 flex items-center justify-center px-4\">\n        <Card className=\"w-full max-w-md bg-cyberdark-900 border-cyberdark-700\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <Shield className=\"w-12 h-12 text-red-400\" />\n            </div>\n            <CardTitle className=\"text-white\">Админ панель CyberWhale</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Панель управления CTF платформой\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handlePasswordSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"password\" className=\"text-gray-300\">Пароль администратора</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                  placeholder=\"Введите пароль\"\n                  required\n                  disabled={isLoading}\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-red-600 hover:bg-red-700\"\n                disabled={isLoading}\n              >\n                {isLoading ? <RefreshCw className=\"w-4 h-4 animate-spin mr-2\" /> : <Shield className=\"w-4 h-4 mr-2\" />}\n                Войти в панель\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-950 p-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-white flex items-center gap-3\">\n                <Shield className=\"w-8 h-8 text-red-400\" />\n                Админ панель CyberWhale\n              </h1>\n              <p className=\"text-gray-400 mt-2\">Управление CTF платформой и заданиями</p>\n            </div>\n            <Badge variant=\"outline\" className=\"text-green-400 border-green-400\">\n              Панель активна\n            </Badge>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-3 bg-cyberdark-800\">\n            <TabsTrigger value=\"challenges\" className=\"data-[state=active]:bg-cyberdark-700 text-white\">\n              CTF Задания\n            </TabsTrigger>\n            <TabsTrigger value=\"guide\" className=\"data-[state=active]:bg-cyberdark-700 text-white\">\n              Инструкция\n            </TabsTrigger>\n            <TabsTrigger value=\"import\" className=\"data-[state=active]:bg-cyberdark-700 text-white\">\n              Импорт/Экспорт\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"challenges\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-white\">Управление заданиями</h2>\n              <Button \n                onClick={() => setShowCreateForm(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Создать задание\n              </Button>\n            </div>\n\n            {(showCreateForm || editingChallenge) && (\n              <Card className=\"bg-cyberdark-900 border-cyberdark-700\">\n                <CardHeader>\n                  <CardTitle className=\"text-white\">\n                    {editingChallenge ? 'Редактирование задания' : 'Создание нового задания'}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={editingChallenge ? \n                    (e: React.FormEvent) => { e.preventDefault(); handleUpdateChallenge(editingChallenge.id); } : \n                    handleCreateChallenge} \n                    className=\"space-y-4\"\n                  >\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-gray-300\">Название задания</Label>\n                        <Input\n                          value={challengeForm.title}\n                          onChange={(e) => setChallengeForm({ ...challengeForm, title: e.target.value })}\n                          className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                          placeholder=\"Например: SQL Injection Basic\"\n                          required\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label className=\"text-gray-300\">Категория</Label>\n                        <Select value={challengeForm.category} onValueChange={(value) => setChallengeForm({ ...challengeForm, category: value })}>\n                          <SelectTrigger className=\"bg-cyberdark-800 border-cyberdark-600 text-white\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-cyberdark-800 border-cyberdark-600\">\n                            {categories.map(cat => (\n                              <SelectItem key={cat.value} value={cat.value} className=\"text-white hover:bg-cyberdark-700\">\n                                {cat.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-gray-300\">Сложность</Label>\n                        <Select value={challengeForm.difficulty} onValueChange={(value) => setChallengeForm({ ...challengeForm, difficulty: value as Challenge['difficulty'] })}>\n                          <SelectTrigger className=\"bg-cyberdark-800 border-cyberdark-600 text-white\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent className=\"bg-cyberdark-800 border-cyberdark-600\">\n                            {difficulties.map(diff => (\n                              <SelectItem key={diff.value} value={diff.value} className=\"text-white hover:bg-cyberdark-700\">\n                                {diff.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-gray-300\">Очки за решение</Label>\n                        <Input\n                          type=\"number\"\n                          value={challengeForm.points}\n                          onChange={(e) => setChallengeForm({ ...challengeForm, points: parseInt(e.target.value) || 100 })}\n                          className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                          min=\"10\"\n                          max=\"1000\"\n                          step=\"10\"\n                          required\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-300\">Описание задания</Label>\n                      <textarea\n                        value={challengeForm.description}\n                        onChange={(e) => setChallengeForm({ ...challengeForm, description: e.target.value })}\n                        className=\"w-full min-h-24 p-3 bg-cyberdark-800 border border-cyberdark-600 text-white rounded-md\"\n                        placeholder=\"Подробное описание задания и цели...\"\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-300\">Флаг (ответ)</Label>\n                      <Input\n                        value={challengeForm.flag}\n                        onChange={(e) => setChallengeForm({ ...challengeForm, flag: e.target.value })}\n                        className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                        placeholder=\"cyberwhale{example_flag}\"\n                        required\n                      />\n                    </div>\n\n                    <div>\n                      <Label className=\"text-gray-300\">Ссылка на файлы (опционально)</Label>\n                      <Input\n                        value={challengeForm.fileUrl}\n                        onChange={(e) => setChallengeForm({ ...challengeForm, fileUrl: e.target.value })}\n                        className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                        placeholder=\"https://example.com/challenge-files.zip\"\n                      />\n                    </div>\n\n                    <div>\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <Label className=\"text-gray-300\">Подсказки</Label>\n                        <Button type=\"button\" onClick={addHint} variant=\"outline\" size=\"sm\">\n                          <Plus className=\"w-3 h-3 mr-1\" />\n                          Добавить\n                        </Button>\n                      </div>\n                      {challengeForm.hints.map((hint, index) => (\n                        <div key={index} className=\"flex gap-2 mb-2\">\n                          <Input\n                            value={hint}\n                            onChange={(e) => updateHint(index, e.target.value)}\n                            className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                            placeholder={`Подсказка ${index + 1}`}\n                          />\n                          {challengeForm.hints.length > 1 && (\n                            <Button type=\"button\" onClick={() => removeHint(index)} variant=\"outline\" size=\"sm\">\n                              <X className=\"w-3 h-3\" />\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n\n                    <div className=\"flex gap-2 pt-4\">\n                      <Button type=\"submit\" className=\"bg-green-600 hover:bg-green-700\" disabled={isLoading}>\n                        {isLoading ? <RefreshCw className=\"w-4 h-4 animate-spin mr-2\" /> : <Save className=\"w-4 h-4 mr-2\" />}\n                        {editingChallenge ? 'Сохранить изменения' : 'Создать задание'}\n                      </Button>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => {\n                          setShowCreateForm(false);\n                          setEditingChallenge(null);\n                          resetForm();\n                        }}\n                      >\n                        Отмена\n                      </Button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            )}\n\n            <div className=\"grid gap-4\">\n              {challenges.map((challenge) => (\n                <Card key={challenge.id} className=\"bg-cyberdark-900 border-cyberdark-700\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"text-lg font-semibold text-white\">{challenge.title}</h3>\n                          <Badge className={difficulties.find(d => d.value === challenge.difficulty)?.color}>\n                            {difficulties.find(d => d.value === challenge.difficulty)?.label}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-blue-400 border-blue-400\">\n                            {categories.find(c => c.value === challenge.category)?.label}\n                          </Badge>\n                          <span className=\"text-yellow-400 font-medium\">{challenge.points} pts</span>\n                        </div>\n                        <p className=\"text-gray-400 mb-2\">{challenge.description}</p>\n                        <div className=\"text-sm text-gray-500\">\n                          Флаг: <code className=\"bg-cyberdark-800 px-2 py-1 rounded\">{challenge.flag}</code>\n                        </div>\n                        {challenge.hints.length > 0 && (\n                          <div className=\"text-sm text-gray-500 mt-1\">\n                            Подсказки: {challenge.hints.length} шт.\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          onClick={() => startEditing(challenge)}\n                          variant=\"outline\" \n                          size=\"sm\"\n                        >\n                          <Edit className=\"w-3 h-3\" />\n                        </Button>\n                        <Button \n                          onClick={() => handleDeleteChallenge(challenge.id)}\n                          variant=\"outline\" \n                          size=\"sm\"\n                          className=\"text-red-400 border-red-400 hover:bg-red-950\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {challenges.length === 0 && (\n                <Card className=\"bg-cyberdark-900 border-cyberdark-700\">\n                  <CardContent className=\"p-8 text-center\">\n                    <Shield className=\"w-12 h-12 text-gray-500 mx-auto mb-4\" />\n                    <p className=\"text-gray-400\">Пока нет созданных заданий</p>\n                    <p className=\"text-gray-500 text-sm\">Создайте первое CTF задание</p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"guide\" className=\"space-y-6\">\n            <Card className=\"bg-cyberdark-900 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <BookOpen className=\"w-5 h-5\" />\n                  Полная инструкция по использованию админ панели\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6 text-gray-300\">\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">Доступ к панели</h3>\n                  <p className=\"mb-2\">Пароль для входа: <code className=\"bg-cyberdark-800 px-2 py-1 rounded text-yellow-400\">301062Ki</code></p>\n                  <p>Панель доступна по ссылке в футере сайта</p>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">Создание CTF заданий</h3>\n                  <ol className=\"list-decimal list-inside space-y-2 ml-4\">\n                    <li>Нажмите \"Создать задание\"</li>\n                    <li>Заполните название и выберите категорию</li>\n                    <li>Выберите сложность и количество очков</li>\n                    <li>Напишите подробное описание задания</li>\n                    <li>Укажите правильный флаг</li>\n                    <li>Добавьте подсказки при необходимости</li>\n                    <li>Нажмите \"Создать задание\"</li>\n                  </ol>\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold text-white mb-3\">Рекомендации</h3>\n                  <ul className=\"list-disc list-inside space-y-1 ml-4\">\n                    <li>Тестируйте задания перед публикацией</li>\n                    <li>Используйте понятные описания</li>\n                    <li>Флаги в формате cyberwhale с фигурными скобками</li>\n                    <li>Добавляйте подсказки для сложных заданий</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"import\" className=\"space-y-6\">\n            <Card className=\"bg-cyberdark-900 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Импорт и экспорт заданий</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-yellow-950 border border-yellow-800 rounded-lg p-4\">\n                  <div className=\"flex items-start gap-2\">\n                    <AlertTriangle className=\"w-5 h-5 text-yellow-400 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-yellow-400 mb-1\">Функции в разработке</h4>\n                      <p className=\"text-yellow-200 text-sm\">\n                        Импорт и экспорт заданий находятся в процессе разработки. \n                        Пока используйте форму создания заданий вручную.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":27073},"client/src/components/search/SearchResults.tsx":{"content":"\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { SearchResult } from '@/lib/search';\nimport { Shield, BookOpen, Users, Package, Layout, ExternalLink } from 'lucide-react';\n\ninterface SearchResultsProps {\n  results: SearchResult[];\n  isLoading?: boolean;\n  onResultClick?: () => void;\n}\n\n// Helper function to get icon by result type\nconst getIconByType = (type: SearchResult['type']) => {\n  switch (type) {\n    case 'challenge':\n      return <Shield className=\"w-4 h-4\" />;\n    case 'article':\n      return <BookOpen className=\"w-4 h-4\" />;\n    case 'community':\n      return <Users className=\"w-4 h-4\" />;\n    case 'product':\n      return <Package className=\"w-4 h-4\" />;\n    case 'page':\n      return <Layout className=\"w-4 h-4\" />;\n    default:\n      return null;\n  }\n};\n\nconst SearchResults: React.FC<SearchResultsProps> = ({ \n  results, \n  isLoading = false,\n  onResultClick\n}) => {\n  if (isLoading) {\n    return (\n      <div className=\"p-4 text-sm text-gray-400\">\n        Поиск...\n      </div>\n    );\n  }\n\n  if (results.length === 0) {\n    return (\n      <div className=\"p-4 text-sm text-gray-400\">\n        Ничего не найдено\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"py-2\">\n      {results.map((result) => {\n        const isExternal = result.url.startsWith('http');\n        \n        const ResultComponent = isExternal ? (\n          <a\n            href={result.url}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"flex items-start p-3 hover:bg-cyberdark-800 transition-colors rounded-md\"\n            onClick={onResultClick}\n          >\n            <div className=\"mr-3 mt-0.5 text-gray-400\">\n              {getIconByType(result.type)}\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-white font-medium group-hover:text-primary\">\n                {result.title}\n                {isExternal && <ExternalLink className=\"inline-block ml-1 w-3 h-3\" />}\n              </p>\n              <p className=\"text-sm text-gray-400 mt-1\">{result.description}</p>\n            </div>\n          </a>\n        ) : (\n          <Link\n            to={result.url}\n            className=\"flex items-start p-3 hover:bg-cyberdark-800 transition-colors rounded-md\"\n            onClick={onResultClick}\n          >\n            <div className=\"mr-3 mt-0.5 text-gray-400\">\n              {getIconByType(result.type)}\n            </div>\n            <div className=\"flex-1\">\n              <p className=\"text-white font-medium group-hover:text-primary\">\n                {result.title}\n              </p>\n              <p className=\"text-sm text-gray-400 mt-1\">{result.description}</p>\n            </div>\n          </Link>\n        );\n        \n        return (\n          <div key={result.id} className=\"group\">\n            {ResultComponent}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default SearchResults;\n","size_bytes":2938},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        cyberdark: {\n          900: \"#111827\",\n          800: \"#1f2937\",\n          700: \"#374151\",\n          600: \"#4b5563\",\n          500: \"#6b7280\",\n        },\n        cyberblue: {\n          400: \"#60a5fa\",\n          500: \"#3b82f6\",\n          600: \"#2563eb\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      boxShadow: {\n        glow: \"0 0 20px rgba(59, 130, 246, 0.3)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          \"0%\": {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          \"100%\": {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"pulse-light\": {\n          \"0%, 100%\": {\n            opacity: \"0.3\",\n          },\n          \"50%\": {\n            opacity: \"0.8\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.6s ease-out\",\n        \"pulse-light\": \"pulse-light 2s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3635},"client/src/pages/auth/VerifyOTP.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { useLocation, useNavigate, Link } from 'react-router-dom';\nimport { useAuth } from '@/lib/auth';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { AlertCircle, Loader2 } from 'lucide-react';\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\n\nexport default function VerifyOTP() {\n  const [otp, setOtp] = useState('');\n  const { verifyOtp, isLoading, error } = useAuth();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const email = location.state?.email || '';\n  \n  if (!email) {\n    navigate('/register');\n    return null;\n  }\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await verifyOtp(email, otp);\n      navigate('/');\n    } catch (err) {\n      console.error('Verification error:', err);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8 bg-cyberdark-900\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <h2 className=\"mt-6 text-center text-3xl font-extrabold text-white\">\n          Подтверждение аккаунта\n        </h2>\n        <p className=\"mt-2 text-center text-sm text-gray-400\">\n          Введите код, отправленный на {email}\n        </p>\n      </div>\n\n      <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"bg-cyberdark-800 py-8 px-4 shadow sm:rounded-lg sm:px-10 border border-cyberdark-700\">\n          {error && (\n            <Alert variant=\"destructive\" className=\"mb-6\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          <form className=\"space-y-6\" onSubmit={handleSubmit}>\n            <div>\n              <Label htmlFor=\"otp\" className=\"block text-sm font-medium text-gray-200\">\n                Код подтверждения\n              </Label>\n              <div className=\"mt-1\">\n                <InputOTP maxLength={6} value={otp} onChange={(value) => setOtp(value)}>\n                  <InputOTPGroup>\n                    <InputOTPSlot index={0} className=\"bg-cyberdark-700 border-cyberdark-600\" />\n                    <InputOTPSlot index={1} className=\"bg-cyberdark-700 border-cyberdark-600\" />\n                    <InputOTPSlot index={2} className=\"bg-cyberdark-700 border-cyberdark-600\" />\n                    <InputOTPSlot index={3} className=\"bg-cyberdark-700 border-cyberdark-600\" />\n                    <InputOTPSlot index={4} className=\"bg-cyberdark-700 border-cyberdark-600\" />\n                    <InputOTPSlot index={5} className=\"bg-cyberdark-700 border-cyberdark-600\" />\n                  </InputOTPGroup>\n                </InputOTP>\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              disabled={isLoading || otp.length < 6}\n              className=\"w-full bg-cyberblue-500 hover:bg-cyberblue-600\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Проверка...\n                </>\n              ) : (\n                'Подтвердить'\n              )}\n            </Button>\n            \n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-400\">\n                Не получили код?{' '}\n                <Button \n                  variant=\"link\" \n                  className=\"p-0 text-cyberblue-500 hover:text-cyberblue-400\"\n                  onClick={() => navigate('/register')}\n                >\n                  Запросить снова\n                </Button>\n              </p>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4013},"server/newRoutes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertChallengeSchema } from \"@shared/schema\";\nimport { emailService } from \"./emailService\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Authentication middleware\ninterface AuthenticatedRequest extends Request {\n  user: { id: number; email: string; username: string };\n}\n\nconst authenticateToken = (req: Request, res: Response, next: NextFunction) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) return res.status(403).json({ message: 'Invalid token' });\n    (req as AuthenticatedRequest).user = user;\n    next();\n  });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // NEW AUTHENTICATION SYSTEM WITH EMAIL VERIFICATION\n  \n  // Step 1: Register user (creates unverified account)\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password } = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Пользователь с таким email уже существует\" });\n      }\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n      \n      // Generate verification code\n      const verificationCode = emailService.generateVerificationCode();\n      \n      // Create user (unverified)\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        emailVerified: false,\n        verificationCode\n      });\n      \n      // Send verification email (simulated - code will appear in console)\n      await emailService.sendVerificationEmail(email, verificationCode);\n      \n      res.status(201).json({\n        message: \"Регистрация прошла успешно! Проверьте консоль браузера для получения кода подтверждения.\",\n        userId: user.id,\n        email: user.email,\n        verificationRequired: true,\n        // For development, include the code in response\n        developmentCode: verificationCode\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Неверные данные для регистрации\" });\n      }\n      res.status(500).json({ message: \"Ошибка при создании пользователя\" });\n    }\n  });\n\n  // Step 2: Verify email with code\n  app.post(\"/api/auth/verify-email\", async (req, res) => {\n    try {\n      const { email, code } = req.body;\n      \n      // Find user by verification code\n      const user = await storage.getUserByVerificationCode(code);\n      if (!user || user.email !== email) {\n        return res.status(400).json({ message: \"Неверный код подтверждения\" });\n      }\n      \n      // Verify user email\n      await storage.verifyUserEmail(user.id);\n      \n      // Generate JWT token\n      const token = jwt.sign(\n        { id: user.id, email: user.email, username: user.username },\n        JWT_SECRET,\n        { expiresIn: \"7d\" }\n      );\n      \n      res.json({\n        message: \"Email успешно подтвержден! Добро пожаловать в CyberWhale!\",\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          avatar: user.avatar,\n          role: user.role,\n          points: user.points,\n          level: user.level,\n          emailVerified: true\n        },\n        token\n      });\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      res.status(500).json({ message: \"Ошибка при подтверждении email\" });\n    }\n  });\n\n  // Step 3: Login (only for verified users)\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      // Find user\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Неверный email или пароль\" });\n      }\n      \n      // Check if email is verified\n      if (!user.emailVerified) {\n        return res.status(401).json({ \n          message: \"Email не подтвержден. Пожалуйста, подтвердите ваш email.\",\n          emailVerificationRequired: true,\n          email: user.email\n        });\n      }\n      \n      // Check password\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Неверный email или пароль\" });\n      }\n      \n      // Generate JWT token\n      const token = jwt.sign(\n        { id: user.id, email: user.email, username: user.username },\n        JWT_SECRET,\n        { expiresIn: \"7d\" }\n      );\n      \n      res.json({\n        message: \"Вход выполнен успешно\",\n        user: {\n          id: user.id,\n          username: user.username,\n          email: user.email,\n          avatar: user.avatar,\n          role: user.role,\n          points: user.points,\n          level: user.level,\n          emailVerified: user.emailVerified\n        },\n        token\n      });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Ошибка при входе в систему\" });\n    }\n  });\n\n  // Resend verification code\n  app.post(\"/api/auth/resend-verification\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"Пользователь не найден\" });\n      }\n      \n      if (user.emailVerified) {\n        return res.status(400).json({ message: \"Email уже подтвержден\" });\n      }\n      \n      // Generate new verification code\n      const verificationCode = emailService.generateVerificationCode();\n      await storage.setVerificationCode(user.id, verificationCode);\n      \n      // Send verification email\n      await emailService.sendVerificationEmail(email, verificationCode);\n      \n      res.json({\n        message: \"Код подтверждения отправлен повторно. Проверьте консоль браузера.\",\n        developmentCode: verificationCode\n      });\n    } catch (error) {\n      console.error(\"Resend verification error:\", error);\n      res.status(500).json({ message: \"Ошибка при повторной отправке кода\" });\n    }\n  });\n\n  // Password reset request\n  app.post(\"/api/auth/forgot-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if user exists\n        return res.json({ message: \"Если пользователь существует, код восстановления был отправлен на email\" });\n      }\n      \n      // Generate reset code\n      const resetCode = emailService.generateVerificationCode();\n      const expires = new Date();\n      expires.setMinutes(expires.getMinutes() + 15); // 15 minutes\n      \n      await storage.setResetPasswordCode(email, resetCode, expires);\n      await emailService.sendPasswordResetEmail(email, resetCode);\n      \n      res.json({\n        message: \"Код восстановления пароля отправлен на email. Проверьте консоль браузера.\",\n        developmentCode: resetCode\n      });\n    } catch (error) {\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ message: \"Ошибка при восстановлении пароля\" });\n    }\n  });\n\n  // Reset password with code\n  app.post(\"/api/auth/reset-password\", async (req, res) => {\n    try {\n      const { email, code, newPassword } = req.body;\n      \n      const user = await storage.getUserByResetCode(code);\n      if (!user || user.email !== email) {\n        return res.status(400).json({ message: \"Неверный или истекший код восстановления\" });\n      }\n      \n      // Hash new password\n      const hashedPassword = await bcrypt.hash(newPassword, 10);\n      \n      // Update password and clear reset code\n      await storage.updateUser(user.id, {\n        password: hashedPassword,\n        resetPasswordCode: null,\n        resetPasswordExpires: null\n      });\n      \n      res.json({ message: \"Пароль успешно изменен\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ message: \"Ошибка при сбросе пароля\" });\n    }\n  });\n\n  // Get current user (protected)\n  app.get(\"/api/auth/me\", authenticateToken, async (req: any, res: Response) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"Пользователь не найден\" });\n      }\n      \n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        avatar: user.avatar,\n        role: user.role,\n        points: user.points,\n        level: user.level,\n        emailVerified: user.emailVerified\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Ошибка при получении данных пользователя\" });\n    }\n  });\n\n  // Update profile (protected)\n  app.put(\"/api/auth/profile\", authenticateToken, async (req: any, res: Response) => {\n    try {\n      const updates = req.body;\n      \n      // Don't allow updating sensitive fields\n      delete updates.password;\n      delete updates.emailVerified;\n      delete updates.verificationCode;\n      delete updates.resetPasswordCode;\n      delete updates.resetPasswordExpires;\n      \n      const updatedUser = await storage.updateUser(req.user.id, updates);\n      \n      if (!updatedUser) {\n        return res.status(404).json({ message: \"Пользователь не найден\" });\n      }\n      \n      res.json({\n        id: updatedUser.id,\n        username: updatedUser.username,\n        email: updatedUser.email,\n        avatar: updatedUser.avatar,\n        role: updatedUser.role,\n        points: updatedUser.points,\n        level: updatedUser.level,\n        emailVerified: updatedUser.emailVerified\n      });\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      res.status(500).json({ message: \"Ошибка при обновлении профиля\" });\n    }\n  });\n\n  // ADMIN ROUTES FOR CHALLENGE MANAGEMENT\n  \n  // Get all challenges (public)\n  app.get(\"/api/challenges\", async (req, res) => {\n    try {\n      const challenges = await storage.getAllChallenges();\n      res.json(challenges);\n    } catch (error) {\n      console.error(\"Get challenges error:\", error);\n      res.status(500).json({ message: \"Ошибка при получении заданий\" });\n    }\n  });\n\n  // Get single challenge (public)\n  app.get(\"/api/challenges/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const challenge = await storage.getChallenge(id);\n      \n      if (!challenge) {\n        return res.status(404).json({ message: \"Задание не найдено\" });\n      }\n      \n      res.json(challenge);\n    } catch (error) {\n      console.error(\"Get challenge error:\", error);\n      res.status(500).json({ message: \"Ошибка при получении задания\" });\n    }\n  });\n\n  // Create challenge (admin only)\n  app.post(\"/api/admin/challenges\", authenticateToken, async (req: any, res: Response) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Доступ запрещен\" });\n      }\n\n      const challengeData = insertChallengeSchema.parse(req.body);\n      const challenge = await storage.createChallenge(challengeData);\n      \n      res.status(201).json({\n        message: \"Задание создано успешно\",\n        challenge\n      });\n    } catch (error) {\n      console.error(\"Create challenge error:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Неверные данные задания\" });\n      }\n      res.status(500).json({ message: \"Ошибка при создании задания\" });\n    }\n  });\n\n  // Update challenge (admin only)\n  app.put(\"/api/admin/challenges/:id\", authenticateToken, async (req: any, res: Response) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Доступ запрещен\" });\n      }\n\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const challenge = await storage.updateChallenge(id, updates);\n      \n      if (!challenge) {\n        return res.status(404).json({ message: \"Задание не найдено\" });\n      }\n      \n      res.json({\n        message: \"Задание обновлено успешно\",\n        challenge\n      });\n    } catch (error) {\n      console.error(\"Update challenge error:\", error);\n      res.status(500).json({ message: \"Ошибка при обновлении задания\" });\n    }\n  });\n\n  // Delete challenge (admin only)\n  app.delete(\"/api/admin/challenges/:id\", authenticateToken, async (req: any, res: Response) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Доступ запрещен\" });\n      }\n\n      const id = parseInt(req.params.id);\n      await storage.deleteChallenge(id);\n      \n      res.json({ message: \"Задание удалено успешно\" });\n    } catch (error) {\n      console.error(\"Delete challenge error:\", error);\n      res.status(500).json({ message: \"Ошибка при удалении задания\" });\n    }\n  });\n\n  // Admin password verification\n  app.post(\"/api/admin/verify-password\", async (req, res) => {\n    try {\n      const { password } = req.body;\n      const adminPassword = \"301062Ki\"; // This should be in environment variables\n      \n      if (password === adminPassword) {\n        res.json({ success: true, message: \"Доступ к админ панели разрешен\" });\n      } else {\n        res.status(401).json({ success: false, message: \"Неверный пароль\" });\n      }\n    } catch (error) {\n      console.error(\"Admin verification error:\", error);\n      res.status(500).json({ message: \"Ошибка при проверке пароля\" });\n    }\n  });\n\n  // Chat assistant route (replacing Supabase Edge Function)\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const { message, history = [] } = req.body;\n\n      // Simple bot responses for cybersecurity context\n      const responses = [\n        \"Отличный вопрос! В кибербезопасности очень важно начинать с основ. Я рекомендую изучить наш раздел по веб-уязвимостям. Там вы найдете материалы для начинающих. Также попробуйте решить несколько простых CTF-заданий для практики.\",\n        \"Для начинающих в CTF рекомендую начать с простых задач в разделе Web. Там вы найдете задания для новичков с подробными объяснениями. Постепенно переходите к более сложным заданиям по мере получения опыта.\",\n        \"Криптография - увлекательное направление! Вы можете найти материалы в нашей базе знаний и практические задания на платформе CTF. Начните с изучения основных алгоритмов шифрования, таких как AES и RSA.\",\n        \"Обязательно ознакомьтесь с нашими лабораторными работами для практики. Теория важна, но практика — ключ к успеху в кибербезопасности. У нас есть виртуальные лаборатории для безопасного тестирования различных уязвимостей.\",\n        \"В нашем сообществе много опытных специалистов. Не стесняйтесь задавать вопросы и делиться своим опытом! Также регулярно проводятся мероприятия и вебинары, где вы можете получить новые знания и установить полезные контакты.\"\n      ];\n\n      const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n      \n      res.json({ \n        botResponse: randomResponse,\n        success: true \n      });\n    } catch (error) {\n      console.error(\"Chat error:\", error);\n      res.status(500).json({ \n        botResponse: \"Произошла ошибка при обработке запроса. Пожалуйста, попробуйте позже.\",\n        success: false \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":18207},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL must be set\");\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":433},"client/src/components/auth/RegisterForm.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/lib/auth/newProvider';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { AlertCircle, Loader2 } from 'lucide-react';\nimport { Link } from 'react-router-dom';\n\nexport function RegisterForm() {\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  \n  const { register, isLoading, error } = useAuth();\n  const navigate = useNavigate();\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (password !== confirmPassword) {\n      return; // Password mismatch is handled by form validation\n    }\n    \n    try {\n      await register(username, email, password);\n      navigate('/');\n    } catch (err) {\n      // Error is handled by the auth context\n      console.error('Registration error:', err);\n    }\n  };\n\n  return (\n    <>\n      {error && (\n        <Alert variant=\"destructive\" className=\"mb-6\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n      \n      <form className=\"space-y-6\" onSubmit={handleSubmit}>\n        <div>\n          <Label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-200\">\n            Имя пользователя\n          </Label>\n          <div className=\"mt-1\">\n            <Input\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              required\n              className=\"bg-cyberdark-700 border-cyberdark-600\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"username\"\n              minLength={3}\n              maxLength={30}\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-200\">\n            Email\n          </Label>\n          <div className=\"mt-1\">\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              className=\"bg-cyberdark-700 border-cyberdark-600\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"your@email.com\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-200\">\n            Пароль\n          </Label>\n          <div className=\"mt-1\">\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              required\n              className=\"bg-cyberdark-700 border-cyberdark-600\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"••••••••\"\n              minLength={6}\n            />\n          </div>\n          <p className=\"mt-1 text-xs text-gray-400\">Минимум 6 символов</p>\n        </div>\n\n        <div>\n          <Label htmlFor=\"confirm-password\" className=\"block text-sm font-medium text-gray-200\">\n            Подтвердите пароль\n          </Label>\n          <div className=\"mt-1\">\n            <Input\n              id=\"confirm-password\"\n              name=\"confirm-password\"\n              type=\"password\"\n              required\n              className={`bg-cyberdark-700 border-cyberdark-600 ${\n                confirmPassword && password !== confirmPassword ? 'border-red-500' : ''\n              }`}\n              value={confirmPassword}\n              onChange={(e) => setConfirmPassword(e.target.value)}\n              placeholder=\"••••••••\"\n            />\n          </div>\n          {confirmPassword && password !== confirmPassword && (\n            <p className=\"mt-1 text-xs text-red-500\">Пароли не совпадают</p>\n          )}\n        </div>\n\n        <div className=\"flex items-center\">\n          <input\n            id=\"terms\"\n            name=\"terms\"\n            type=\"checkbox\"\n            required\n            className=\"h-4 w-4 rounded border-cyberdark-600 bg-cyberdark-700 text-cyberblue-500 focus:ring-cyberblue-500\"\n          />\n          <Label htmlFor=\"terms\" className=\"ml-2 block text-sm text-gray-300\">\n            Я согласен с{' '}\n            <Link to=\"/terms\" className=\"font-medium text-cyberblue-500 hover:text-cyberblue-400\">\n              условиями использования\n            </Link>{' '}\n            и{' '}\n            <Link to=\"/privacy\" className=\"font-medium text-cyberblue-500 hover:text-cyberblue-400\">\n              политикой конфиденциальности\n            </Link>\n          </Label>\n        </div>\n\n        <div>\n          <Button\n            type=\"submit\"\n            disabled={isLoading || (!!confirmPassword && password !== confirmPassword)}\n            className=\"w-full bg-cyberblue-500 hover:bg-cyberblue-600\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Регистрация...\n              </>\n            ) : (\n              'Зарегистрироваться'\n            )}\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n}\n","size_bytes":5629},"client/src/pages/ctf/ChallengePage.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useParams, Link, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { \n  ArrowLeft, \n  Trophy, \n  Clock, \n  AlertCircle, \n  CheckCircle, \n  Flag,\n  Users,\n  ShieldAlert,\n  Lightbulb,\n  Download\n} from 'lucide-react';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\nimport { useAuth } from '@/lib/auth';\nimport { toast } from '@/hooks/use-toast';\nimport { mockChallenges } from '@/data/challenges';\n\nconst challengeHints: Record<string, string[]> = {\n  '1': [\n    'Изучите документацию по JWT и его структуре (header.payload.signature)',\n    'Обратите внимание на алгоритм подписи JWT токена',\n    'Попробуйте использовать jwt_tool или jwt.io для анализа и манипуляции с токеном',\n    'Слабый секрет может быть уязвим к брутфорс-атаке или словарной атаке'\n  ],\n  '2': [\n    'Изучите метаданные изображения с помощью специальных инструментов',\n    'Проверьте наличие скрытой информации в младших битах изображения (LSB стеганография)',\n    'Попробуйте изменить контрастность или цветовые каналы изображения'\n  ],\n  '3': [\n    'Обратите внимание на подсказку о \"названии команды\" (CyberWhale) и цикличности алфавита',\n    'Подсчитайте сумму позиций букв в названии CyberWhale в английском алфавите',\n    'Помните, что шифр Цезаря использует циклический сдвиг букв алфавита'\n  ],\n  '4': [\n    'Используйте декомпилятор для анализа бинарного файла',\n    'Обратите внимание на строковые константы в коде',\n    'Проверьте функции проверки ввода пользователя'\n  ],\n  '5': [\n    'Используйте Wireshark для анализа pcap-файла',\n    'Обратите внимание на необычные HTTP-запросы',\n    'Проверьте заголовки пакетов на наличие скрытой информации'\n  ],\n  '6': [\n    'Проанализируйте входные данные, которые приводят к переполнению буфера',\n    'Найдите адрес возврата функции в памяти',\n    'Подготовьте payload с шеллкодом для выполнения'\n  ],\n  '7': [\n    'Внимательно изучите подсказку в файле hint.txt о комбинации названия компании и цифры',\n    'Для вычисления ASCII-значений букв можно использовать таблицу ASCII или функции языков программирования',\n    'После распаковки архива, обратите внимание на формат зашифрованных данных - это может быть Base64 с AES-шифрованием'\n  ],\n  '8': [\n    'Начните с анализа заметок в notes.txt, они могут содержать ключи или подсказки',\n    'Проверьте сетевой трафик с помощью Wireshark, ищите необычные пакеты или закономерности',\n    'Для работы с зашифрованным изображением может потребоваться использовать инструменты стеганографии'\n  ],\n  '9': [\n    'Проанализируйте, как формируется SQL-запрос к базе данных при поиске сотрудников',\n    'Попробуйте разные символы, которые могут нарушить структуру SQL-запроса (например, одинарная кавычка)',\n    'Изучите, как можно использовать оператор UNION для объединения результатов нескольких запросов',\n    'Подумайте, где может храниться структура базы данных в SQLite'\n  ]\n};\n\nconst challengeFlags: Record<string, string> = {\n  '1': 'CTF{Ph4nt0m_V4u1t_Expl01t_MASTER}',\n  '2': 'CW{H1dd3n_1n_pl41n_s1ght}',\n  '3': 'CW{SecretFound}',\n  '4': 'CW{R3v3rs1ng_Ch4mp}',\n  '5': 'CW{P4ck3t_4n4lyst}',\n  '6': 'CW{Buff3r_0v3rfl0w_pr0}',\n  '7': 'CW{HiddenInPlainSight}',\n  '8': 'CW{Caesar_AES_Stego}',\n  '9': 'CW{HR_Leak_Protection_Fail}',\n};\n\nexport default function ChallengePage() {\n  const { id } = useParams<{ id: string }>();\n  const { user, isLoading } = useAuth();\n  const navigate = useNavigate();\n  const [flagInput, setFlagInput] = useState('');\n  const [showHints, setShowHints] = useState(false);\n  const [currentHint, setCurrentHint] = useState(0);\n  const [submitting, setSubmitting] = useState(false);\n  const [solved, setSolved] = useState(false);\n  const [startTime, setStartTime] = useState<Date | null>(null);\n  const [elapsedTime, setElapsedTime] = useState<number>(0);\n  const [timerInterval, setTimerInterval] = useState<NodeJS.Timeout | null>(null);\n\n  const challenge = mockChallenges.find(c => c.id === id);\n  \n  const hints = id ? challengeHints[id] || [] : [];\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Требуется авторизация\",\n        description: \"Для доступа к заданиям необходимо войти в систему\",\n        variant: \"destructive\",\n      });\n      navigate('/login?returnUrl=/ctf/challenge/' + id);\n    }\n  }, [user, isLoading, navigate, id]);\n\n  useEffect(() => {\n    if (user && !startTime && !solved) {\n      const now = new Date();\n      setStartTime(now);\n      \n      const interval = setInterval(() => {\n        const currentTime = new Date();\n        const elapsed = Math.floor((currentTime.getTime() - now.getTime()) / 1000);\n        setElapsedTime(elapsed);\n      }, 1000);\n      \n      setTimerInterval(interval);\n    }\n    \n    return () => {\n      if (timerInterval) {\n        clearInterval(timerInterval);\n      }\n    };\n  }, [user, startTime, solved, timerInterval]);\n\n  const formatTime = (seconds: number) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleSubmitFlag = () => {\n    if (!flagInput.trim()) {\n      toast({\n        title: \"Пустое поле\",\n        description: \"Введите флаг перед отправкой\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSubmitting(true);\n    \n    setTimeout(() => {\n      const correctFlag = id ? challengeFlags[id] : '';\n      \n      if (flagInput.trim() === correctFlag) {\n        if (timerInterval) {\n          clearInterval(timerInterval);\n        }\n        \n        setSolved(true);\n        toast({\n          title: \"Поздравляем!\",\n          description: \"Вы успешно решили задание!\",\n          variant: \"default\",\n        });\n      } else {\n        toast({\n          title: \"Неверный флаг\",\n          description: \"Попробуйте еще раз\",\n          variant: \"destructive\",\n        });\n      }\n      \n      setSubmitting(false);\n    }, 1000);\n  };\n\n  const handleNextHint = () => {\n    if (currentHint < hints.length - 1) {\n      setCurrentHint(prev => prev + 1);\n      \n      toast({\n        title: \"Новая подсказка\",\n        description: \"Подсказка разблокирована!\",\n      });\n    } else {\n      toast({\n        title: \"Подсказки исчерпаны\",\n        description: \"Больше подсказок нет, попробуйте решить задание\",\n        variant: \"default\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n        <Navbar />\n        <div className=\"pt-20 flex-grow flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-cyberblue-500\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  if (!challenge) {\n    return (\n      <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n        <Navbar />\n        <div className=\"pt-20 flex-grow\">\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center\">\n            <AlertCircle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n            <h1 className=\"text-3xl font-bold text-white mb-4\">Задание не найдено</h1>\n            <p className=\"text-gray-300 mb-8\">Запрашиваемое задание не существует или было удалено</p>\n            <Link to=\"/ctf\">\n              <Button>\n                <ArrowLeft className=\"mr-2 w-4 h-4\" />\n                Вернуться на CTF платформу\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <Navbar />\n      \n      <div className=\"pt-20 flex-grow\">\n        <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"mb-6\">\n            <Link to={`/ctf/category/${challenge.category}`} className=\"text-cyberblue-400 hover:text-cyberblue-300 flex items-center\">\n              <ArrowLeft className=\"mr-2 w-4 h-4\" />\n              Назад к кейсам\n            </Link>\n          </div>\n          \n          <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 mb-6\">\n            <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-4\">\n              <div>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <div className=\"bg-cyberdark-700 text-cyberblue-400 text-xs font-medium px-2.5 py-0.5 rounded\">\n                    Кейс #{challenge.id}\n                  </div>\n                  <div className=\"bg-cyberdark-700 text-gray-300 text-xs font-medium px-2.5 py-0.5 rounded\">\n                    {challenge.category === 'web' && 'Веб-безопасность'}\n                    {challenge.category === 'crypto' && 'Криптография'}\n                    {challenge.category === 'osint' && 'OSINT'}\n                    {challenge.category === 'steganography' && 'Стеганография'}\n                    {challenge.category === 'reverse-engineering' && 'Реверс-инжиниринг'}\n                    {challenge.category === 'forensics' && 'Форензика'}\n                    {challenge.category === 'pwn' && 'PWN'}\n                    {challenge.category === 'programming' && 'Программирование'}\n                    {challenge.category === 'network' && 'Сетевая безопасность'}\n                  </div>\n                </div>\n                <h1 className=\"text-2xl font-bold text-white\">{challenge.title}</h1>\n              </div>\n              \n              <div className=\"mt-4 md:mt-0 flex flex-col items-end\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <div className=\"flex items-center text-gray-400\">\n                    <Users className=\"w-4 h-4 mr-1\" />\n                    <span className=\"text-sm\">{challenge.solvedBy} решили</span>\n                  </div>\n                  <div className=\"flex items-center text-yellow-500\">\n                    <Trophy className=\"w-4 h-4 mr-1\" />\n                    <span className=\"text-sm\">{challenge.points} очков</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <div className={`text-xs font-medium px-2 py-1 rounded-full border\n                    ${challenge.difficulty === 'beginner' ? 'bg-green-500/20 text-green-500 border-green-500/30' : ''}\n                    ${challenge.difficulty === 'intermediate' ? 'bg-yellow-500/20 text-yellow-500 border-yellow-500/30' : ''}\n                    ${challenge.difficulty === 'advanced' ? 'bg-orange-500/20 text-orange-500 border-orange-500/30' : ''}\n                    ${challenge.difficulty === 'expert' ? 'bg-red-500/20 text-red-500 border-red-500/30' : ''}\n                  `}>\n                    {challenge.difficulty === 'beginner' && 'Начальный'}\n                    {challenge.difficulty === 'intermediate' && 'Средний'}\n                    {challenge.difficulty === 'advanced' && 'Продвинутый'}\n                    {challenge.difficulty === 'expert' && 'Эксперт'}\n                  </div>\n                  \n                  <div className=\"bg-cyberdark-700 text-gray-300 text-xs font-medium px-2.5 py-0.5 rounded flex items-center\">\n                    <Clock className=\"w-3 h-3 mr-1\" />\n                    {formatTime(elapsedTime)}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mb-6\">\n              {challenge.tags.map((tag) => (\n                <span key={tag} className=\"inline-block bg-cyberdark-700 text-gray-300 text-xs px-2.5 py-0.5 rounded mr-2 mb-2\">\n                  #{tag}\n                </span>\n              ))}\n            </div>\n            \n            <div className=\"bg-cyberdark-700 p-4 rounded-md mb-6 text-gray-300\">\n              <p>{challenge.description}</p>\n              \n              {challenge.id === '1' && (\n                <>\n                  <p className=\"mt-4\">Формат флага: CTF{\"{...}\"}</p>\n                </>\n              )}\n              \n              {(challenge.id === '3' || challenge.id === '7' || challenge.id === '8' || challenge.id === '9') && (\n                <>\n                  <p className=\"mt-4\">Формат флага: CW{\"{...}\"}</p>\n                </>\n              )}\n            </div>\n            \n            {solved && (\n              <div className=\"bg-green-900/20 border border-green-700 rounded-md p-4 mb-6 flex items-start\">\n                <CheckCircle className=\"text-green-500 w-5 h-5 mt-0.5 mr-3 flex-shrink-0\" />\n                <div>\n                  <h3 className=\"text-green-500 font-semibold mb-1\">Задание выполнено!</h3>\n                  <p className=\"text-gray-300\">Поздравляем! Вы успешно решили задание и получили {challenge.points} очков.</p>\n                  <p className=\"text-gray-400 text-sm mt-2\">Время решения: {formatTime(elapsedTime)}</p>\n                </div>\n              </div>\n            )}\n            \n            {!solved && (\n              <div className=\"flex flex-col md:flex-row md:items-center space-y-4 md:space-y-0 md:space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Введите флаг (например, CTF{fl4g_h3r3} или CW{fl4g_h3r3})\"\n                    className=\"bg-cyberdark-700 border-cyberdark-600 pl-10\"\n                    value={flagInput}\n                    onChange={(e) => setFlagInput(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') {\n                        handleSubmitFlag();\n                      }\n                    }}\n                  />\n                  <Flag className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                </div>\n                <Button \n                  disabled={submitting}\n                  onClick={handleSubmitFlag}\n                >\n                  {submitting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Проверка...\n                    </>\n                  ) : (\n                    \"Отправить флаг\"\n                  )}\n                </Button>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"md:col-span-2\">\n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 mb-6\">\n                <h2 className=\"text-xl font-bold text-white mb-4 flex items-center\">\n                  <ShieldAlert className=\"w-5 h-5 mr-2 text-cyberblue-400\" />\n                  Задание\n                </h2>\n                \n                <div className=\"bg-cyberdark-700 p-4 rounded-md text-gray-300\">\n                  {/* Для веб-задания (Phantom Vault) */}\n                  {challenge.id === '1' && (\n                    <>\n                      <p className=\"mb-4\">Это задание требует эксплуатации уязвимости в реализации JWT веб-приложения Phantom Vault.</p>\n                      \n                      <p className=\"mb-4\">Ваши задачи:</p>\n                      <ul className=\"list-disc pl-5 mt-2 space-y-1\">\n                        <li>Проанализировать механизм аутентификации приложения</li>\n                        <li>Выявить уязвимости в реализации JWT</li>\n                        <li>Использовать уязвимость для получения доступа администратора</li>\n                        <li>Извлечь флаг из панели администратора</li>\n                      </ul>\n                      \n                      <div className=\"mt-6 p-4 bg-cyberdark-800 rounded-md\">\n                        <p className=\"font-medium mb-2\">Функции приложения Phantom Vault:</p>\n                        <ul className=\"list-disc pl-5 space-y-1\">\n                          <li>Система входа и регистрации пользователей</li>\n                          <li>Защищенная панель пользователя</li>\n                          <li>Панель администратора с доступом к конфиденциальной информации</li>\n                        </ul>\n                      </div>\n                      \n                      <p className=\"mt-4\">Найдите уязвимость в реализации JWT и используйте ее для доступа к панели администратора.</p>\n\n                      <div className=\"mt-5 flex flex-col sm:flex-row items-center justify-center gap-4\">\n                        <a \n                          href=\"https://cloud.mail.ru/public/ip9t/ajXd2ZLbp\" \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\" \n                          className=\"inline-flex items-center px-4 py-2 bg-cyberblue-600 text-white rounded-md hover:bg-cyberblue-700 transition-colors w-full sm:w-auto justify-center\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Скачать архив\n                        </a>\n                      </div>\n                    </>\n                  )}\n                  \n                  {/* Для первого задания криптографии (Утечка данных CyberWhale: Тайна зашифрованного чата) */}\n                  {challenge.id === '3' && (\n                    <>\n                      <p className=\"mb-4\">Ваша команда по кибербезопасности расследует утечку данных из компании CyberWhale. Вам удалось перехватить логи чата, который, предположительно, содержит информацию об утечке. Сообщения в чате зашифрованы.</p>\n                      \n                      <p className=\"mb-4\">В зашифрованных сообщениях один из участников оставил подсказку: \"Ключ — в нашей команде, точнее, в её имени. Помни, что алфавит цикличен.\"</p>\n                      \n                      <div className=\"bg-cyberdark-800 p-4 rounded-md mb-4\">\n                        <p className=\"text-sm text-gray-400 mb-1\">Перехваченное сообщение:</p>\n                        <p className=\"text-cyberblue-400 font-mono\">Khoor#Zruog#43#Fkdw#lv#khuh1#Fkhuv2#CW{\"SecretFound\"}</p>\n                      </div>\n                      \n                      <p className=\"mb-4\">Цель: Расшифровать перехваченное сообщение, используя подсказку, и найти флаг в формате CW{\"{...}\"}.</p>\n                    </>\n                  )}\n                  \n                  {/* Для второго задания криптографии (Утечка данных CyberWhale: Зашифрованный архив) */}\n                  {challenge.id === '7' && (\n                    <>\n                      <p className=\"mb-4\">Ваша команда получила доступ к зашифрованному архиву, который предположительно содержит важную информацию о деятельности компании CyberWhale. Архив был найден на компрометированном сервере, и его содержимое защищено паролем.</p>\n                      \n                      <p className=\"mb-4\">Анализируя метаданные архива, вы обнаружили следующее:</p>\n                      <ol className=\"list-decimal pl-5 mb-4 space-y-1\">\n                        <li>Архив содержит один файл с названием secret.txt.</li>\n                        <li>Пароль для распаковки архива был сгенерирован на основе фразы, связанной с компанией CyberWhale.</li>\n                        <li>Вместе с архивом был найден текстовый файл hint.txt, содержащий подсказку.</li>\n                      </ol>\n                      \n                      <div className=\"bg-cyberdark-800 p-4 rounded-md mb-4\">\n                        <p className=\"text-sm text-gray-400 mb-1\">Содержимое файла hint.txt:</p>\n                        <p>Пароль представляет собой комбинацию названия компании и цифры.</p>\n                        <p>Цифра представляет собой сумму значений в формате ASCII первых трех букв названия компании.</p>\n                      </div>\n                      \n                      <div className=\"mt-5 flex flex-col sm:flex-row items-center justify-center gap-4\">\n                        <a \n                          href=\"https://cloud.mail.ru/public/DMbD/FVSq8QsaK\" \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\" \n                          className=\"inline-flex items-center px-4 py-2 bg-cyberblue-600 text-white rounded-md hover:bg-cyberblue-700 transition-colors w-full sm:w-auto justify-center\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Скачать архив\n                        </a>\n                      </div>\n                      \n                      <p className=\"mt-4\">Цель: Расшифруйте архив, извлеките содержимое файла secret.txt и найдите флаг в формате CW{\"{...}\"}.</p>\n                    </>\n                  )}\n                  \n                  {/* Для третьего задания криптографии (Эхо Прошлого: Завещание в Битах) */}\n                  {challenge.id === '8' && (\n                    <>\n                      <p className=\"mb-4\">Вы - команда исследователей, получившая доступ к старому жесткому диску, принадлежавшему эксцентричному криптографу, недавно покинувшему этот мир. По слухам, он спрятал свое состояние, зашифровав информацию о его местонахождении в своих исследованиях. На диске обнаружены файлы с обрывками заметок и подозрительным сетевым трафиком. Ваша задача - собрать воедино все улики, расшифровать сообщения и найти спрятанное завещание.</p>\n                      \n                      <p className=\"mb-4\">Формат флага: CW{\"{...}\"}</p>\n                      <p className=\"mb-4\">Сложность: Продвинутый</p>\n                      \n                      <p className=\"mb-4\">Навыки: Анализ сетевого трафика (Wireshark), криптография (AES, шифр Цезаря), стеганография, base64, работа с командной строкой.</p>\n                      \n                      <div className=\"bg-cyberdark-800 p-4 rounded-md mb-4\">\n                        <p className=\"font-medium mb-2\">Предоставляемые файлы:</p>\n                        <ol className=\"list-decimal pl-5 space-y-1\">\n                          <li>notes.txt: Текстовый файл с обрывками заметок.</li>\n                          <li>encrypted_image.png: Зашифрованное изображение.</li>\n                          <li>traffic.pcapng: Дамп сетевого трафика Wireshark.</li>\n                        </ol>\n                      </div>\n                      \n                      <div className=\"mt-5 flex flex-col sm:flex-row items-center justify-center gap-4\">\n                        <a \n                          href=\"https://cloud.mail.ru/public/cFib/6dkAnZzfo\" \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\" \n                          className=\"inline-flex items-center px-4 py-2 bg-cyberblue-600 text-white rounded-md hover:bg-cyberblue-700 transition-colors w-full sm:w-auto justify-center\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Скачать архив\n                        </a>\n                      </div>\n                    </>\n                  )}\n\n                  {/* Для веб-задания - HR-портал CyberWolf Corp: SQL-инъекция */}\n                  {challenge.id === '9' && (\n                    <>\n                      <p className=\"mb-4\">Вы получили доступ к внутреннему HR-порталу компании CyberWolf Corp. Система позволяет искать сотрудников по имени, но администраторы уверены, что в ней есть критическая уязвимость, позволяющая получить доступ к конфиденциальным данным.</p>\n                      \n                      <p className=\"mb-4\">Ваши задачи:</p>\n                      <ul className=\"list-disc pl-5 mt-2 space-y-1\">\n                        <li>Проанализировать механизм поиска сотрудников</li>\n                        <li>Выявить уязвимости в обработке входных данных</li>\n                        <li>Использовать уязвимость для доступа к конфиденциальной информации</li>\n                        <li>Найти скрытый флаг в системе</li>\n                      </ul>\n                      \n                      <div className=\"mt-6 p-4 bg-cyberdark-800 rounded-md\">\n                        <p className=\"font-medium mb-2\">Функции HR-портала:</p>\n                        <ul className=\"list-disc pl-5 space-y-1\">\n                          <li>Поиск сотрудников по имени</li>\n                          <li>Отображение основной информации о сотрудниках</li>\n                          <li>База данных с конфиденциальной информацией</li>\n                        </ul>\n                      </div>\n                      \n                      <div className=\"mt-6 p-4 bg-cyberdark-800 rounded-md\">\n                        <p className=\"font-medium mb-2\">Инструкция по запуску:</p>\n                        <ol className=\"list-decimal pl-5 space-y-1\">\n                          <li>Распакуйте архив в удобное место</li>\n                          <li>Перейдите в распакованную папку</li>\n                          <li>Запустите веб-сервер командой: <code className=\"bg-cyberdark-900 px-2 py-1 rounded\">php -S 0.0.0.0:8000</code></li>\n                          <li>Откройте в браузере: <code className=\"bg-cyberdark-900 px-2 py-1 rounded\">http://localhost:8000</code></li>\n                        </ol>\n                      </div>\n\n                      <div className=\"mt-5 flex flex-col sm:flex-row items-center justify-center gap-4\">\n                        <a \n                          href=\"https://cloud.mail.ru/public/NGcQ/FGdbzMBa9\" \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\" \n                          className=\"inline-flex items-center px-4 py-2 bg-cyberblue-600 text-white rounded-md hover:bg-cyberblue-700 transition-colors w-full sm:w-auto justify-center\"\n                        >\n                          <Download className=\"w-4 h-4 mr-2\" />\n                          Скачать архив\n                        </a>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n              \n              {/* Инструкция для веб-задания (Phantom Vault) */}\n              {challenge.id === '1' && (\n                <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                  <h2 className=\"text-xl font-bold text-white mb-4\">Инструкция по развертыванию</h2>\n                  \n                  <div className=\"bg-cyberdark-700 p-4 rounded-md text-gray-300\">\n                    <h3 className=\"font-semibold text-lg mb-2\">1. Подготовка системы (Kali Linux / Ubuntu):</h3>\n                    <p className=\"mb-2\">Убедитесь, что установлены Docker и Python3:</p>\n                    \n                    <div className=\"bg-cyberdark-800 p-3 rounded-md mb-4 font-mono text-sm\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-gray-400\">bash</span>\n                      </div>\n                      <code className=\"text-cyan-400\">sudo apt update && sudo apt install -y docker.io python3 python3-pip</code>\n                    </div>\n                    \n                    <h3 className=\"font-semibold text-lg mb-2\">2. Запуск CTF-окружения:</h3>\n                    <ol className=\"list-decimal pl-5 space-y-3\">\n                      <li>\n                        <p>Распакуйте архив (phantom_vault.zip):</p>\n                        <div className=\"bg-cyberdark-800 p-3 rounded-md my-2 font-mono text-sm\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-gray-400\">bash</span>\n                          </div>\n                          <code className=\"text-cyan-400\">unzip phantom_vault.zip -d ~/phantom_vault && cd ~/phantom_vault</code>\n                        </div>\n                      </li>\n                      <li>\n                        <p>Запустите Docker-контейнер:</p>\n                        <div className=\"bg-cyberdark-800 p-3 rounded-md my-2 font-mono text-sm\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-gray-400\">bash</span>\n                          </div>\n                          <code className=\"text-cyan-400\">docker-compose up -d --build</code>\n                        </div>\n                      </li>\n                      <li>\n                        <p>Проверьте, что сервер работает:</p>\n                        <p className=\"mb-2\">Откройте в браузере:</p>\n                        <div className=\"bg-cyberdark-800 p-3 rounded-md my-2 font-mono text-sm\">\n                          <div className=\"flex justify-between items-center\">\n                            <span className=\"text-gray-400\">url</span>\n                          </div>\n                          <code className=\"text-cyan-400\">http://localhost:5000</code>\n                        </div>\n                      </li>\n                    </ol>\n                  </div>\n                </div>\n              )}\n              \n              {/* Дополнительные ресурсы для веб-задания */}\n              {challenge.id === '1' && (\n                <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 mt-6\">\n                  <h2 className=\"text-xl font-bold text-white mb-4\">Дополнительные ресурсы</h2>\n                  \n                  <div className=\"bg-cyberdark-700 p-4 rounded-md text-gray-300\">\n                    <p>Вот несколько полезных ресурсов для работы с JWT:</p>\n                    <ul className=\"list-disc pl-5 mt-3 space-y-2\">\n                      <li>\n                        <a href=\"https://jwt.io\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-cyberblue-400 hover:text-cyberblue-300\">JWT.io</a> - JWT декодер и отладчик\n                      </li>\n                      <li>\n                        <a href=\"https://github.com/ticarpi/jwt_tool\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-cyberblue-400 hover:text-cyberblue-300\">jwt_tool</a> - Инструмент для тестирования, подделки и манипуляции JWT\n                      </li>\n                      <li>\n                        <a href=\"https://ctf.web.jwtdecoder\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-cyberblue-400 hover:text-cyberblue-300\">jwt-decode</a> - ctf.web.jwtDecoder\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              )}\n\n              {/* Дополнительные ресурсы для SQL-инъекции */}\n              {challenge.id === '9' && (\n                <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 mt-6\">\n                  <h2 className=\"text-xl font-bold text-white mb-4\">Дополнительные ресурсы</h2>\n                  \n                  <div className=\"bg-cyberdark-700 p-4 rounded-md text-gray-300\">\n                    <p>Вот несколько полезных ресурсов для работы с SQL-инъекциями:</p>\n                    <ul className=\"list-disc pl-5 mt-3 space-y-2\">\n                      <li>\n                        <a href=\"https://portswigger.net/web-security/sql-injection\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-cyberblue-400 hover:text-cyberblue-300\">Portswigger SQL Injection</a> - Подробное руководство по SQL-инъекциям\n                      </li>\n                      <li>\n                        <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-cyberblue-400 hover:text-cyberblue-300\">OWASP SQL Injection</a> - Описание атаки и методов защиты\n                      </li>\n                      <li>\n                        <a href=\"https://www.sqlite.org/lang_expr.html\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-cyberblue-400 hover:text-cyberblue-300\">SQLite Документация</a> - Справочник по SQLite, используемому в задании\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"md:col-span-1\">\n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 sticky top-24\">\n                <h2 className=\"text-xl font-bold text-white mb-4 flex items-center\">\n                  <Lightbulb className=\"w-5 h-5 mr-2 text-yellow-500\" />\n                  Подсказки\n                </h2>\n                \n                {!showHints ? (\n                  <div className=\"text-center py-6\">\n                    <p className=\"text-gray-400 mb-4\">Подсказки могут помочь вам в решении задания, но использование подсказок уменьшает количество получаемых очков.</p>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowHints(true)}\n                    >\n                      Показать подсказки\n                    </Button>\n                  </div>\n                ) : (\n                  <div>\n                    {hints.slice(0, currentHint + 1).map((hint, index) => (\n                      <div \n                        key={index}\n                        className=\"bg-cyberdark-700 p-3 rounded-md mb-3 text-gray-300 text-sm\"\n                      >\n                        <p className=\"text-xs text-gray-400 mb-1\">Подсказка {index + 1}</p>\n                        <p>{hint}</p>\n                      </div>\n                    ))}\n                    \n                    {currentHint < hints.length - 1 && (\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"w-full\"\n                        onClick={handleNextHint}\n                      >\n                        Следующая подсказка\n                      </Button>\n                    )}\n                    \n                    {currentHint === hints.length - 1 && hints.length > 0 && (\n                      <p className=\"text-xs text-gray-400 text-center mt-2\">Больше подсказок нет</p>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ChatAssistant />\n    </div>\n  );\n}\n","size_bytes":40087},"client/src/pages/ctf/CategoryChallenges.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Link, useParams, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Search, Filter, Trophy, Users } from 'lucide-react';\nimport { Challenge } from '@/types';\nimport { mockChallenges } from '@/data/challenges';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\nimport { useAuth } from '@/lib/auth';\nimport { toast } from '@/hooks/use-toast';\n\n// Map difficulty to color classes\nconst difficultyColors: Record<Challenge['difficulty'], string> = {\n  beginner: 'bg-green-500/20 text-green-500 border-green-500/30',\n  intermediate: 'bg-yellow-500/20 text-yellow-500 border-yellow-500/30',\n  advanced: 'bg-orange-500/20 text-orange-500 border-orange-500/30',\n  expert: 'bg-red-500/20 text-red-500 border-red-500/30',\n};\n\n// Map difficulty to display names\nconst difficultyNames: Record<Challenge['difficulty'], string> = {\n  beginner: 'Начальный',\n  intermediate: 'Средний',\n  advanced: 'Продвинутый',\n  expert: 'Эксперт',\n};\n\n// Map categories to display names\nconst categoryNames: Record<string, string> = {\n  web: 'Веб-безопасность',\n  crypto: 'Криптография',\n  osint: 'OSINT',\n  steganography: 'Стеганография',\n  'reverse-engineering': 'Реверс-инжиниринг',\n  forensics: 'Форензика',\n  pwn: 'PWN',\n  programming: 'Программирование',\n  network: 'Сетевая безопасность',\n};\n\nexport default function CategoryChallenges() {\n  const { category } = useParams<{ category: string }>();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterDifficulty, setFilterDifficulty] = useState<Challenge['difficulty'] | 'all'>('all');\n  const { user, isLoading } = useAuth();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Если пользователь не авторизован и загрузка завершена, перенаправляем на страницу входа\n    if (!isLoading && !user) {\n      toast({\n        title: \"Требуется авторизация\",\n        description: \"Для доступа к заданиям необходимо войти в систему\",\n        variant: \"destructive\",\n      });\n      navigate('/login?returnUrl=/ctf/category/' + category);\n    }\n  }, [user, isLoading, navigate, category]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n        <Navbar />\n        <div className=\"pt-20 flex-grow flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-cyberblue-500\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null; // Не показываем содержимое до перенаправления\n  }\n\n  const handleChallengeComplete = () => {\n    toast({\n      title: \"Задание выполнено!\",\n      description: \"Вы успешно решили задание и получили очки.\",\n      variant: \"default\",\n    });\n  };\n\n  // Фильтруем задания по выбранной категории\n  const categoryChallenges = mockChallenges.filter(challenge => \n    challenge.category === category &&\n    (filterDifficulty === 'all' || challenge.difficulty === filterDifficulty) &&\n    (searchQuery === '' || \n      challenge.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      challenge.description.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <Navbar />\n      \n      <div className=\"pt-20 flex-grow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"mb-8\">\n            <Link to=\"/ctf\" className=\"text-cyberblue-400 hover:text-cyberblue-300\">\n              ← Назад к CTF платформе\n            </Link>\n            <h1 className=\"text-3xl font-bold text-white mt-4\">\n              Кейсы: {categoryNames[category || 'web']}\n            </h1>\n            <p className=\"mt-2 text-gray-400\">\n              Решайте практические задания по {categoryNames[category || 'web'].toLowerCase()} и улучшайте свои навыки кибербезопасности\n            </p>\n          </div>\n\n          {/* Search and filter */}\n          <div className=\"mb-8 space-y-4 sm:space-y-0 sm:flex sm:items-center sm:justify-between\">\n            <div className=\"flex-1 relative sm:max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Поиск по кейсам...\"\n                className=\"pl-10 w-full bg-cyberdark-800 border-cyberdark-700\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n              />\n            </div>\n            \n            <div className=\"relative\">\n              <select\n                className=\"appearance-none bg-cyberdark-800 border border-cyberdark-700 text-white py-2 px-4 pr-8 rounded focus:outline-none focus:ring-1 focus:ring-cyberblue-500\"\n                value={filterDifficulty}\n                onChange={(e) => setFilterDifficulty(e.target.value as Challenge['difficulty'] | 'all')}\n              >\n                <option value=\"all\">Все уровни</option>\n                <option value=\"beginner\">Начальный</option>\n                <option value=\"intermediate\">Средний</option>\n                <option value=\"advanced\">Продвинутый</option>\n                <option value=\"expert\">Эксперт</option>\n              </select>\n              <Filter className=\"absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400 pointer-events-none\" />\n            </div>\n          </div>\n\n          {/* Challenges list */}\n          {categoryChallenges.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {categoryChallenges.map((challenge) => (\n                <div\n                  key={challenge.id}\n                  className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm\"\n                >\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <span className=\"text-sm font-medium text-cyberblue-400\">\n                        Кейс #{challenge.id}\n                      </span>\n                      <div className={`text-xs font-medium px-2 py-1 rounded-full border ${difficultyColors[challenge.difficulty]}`}>\n                        {difficultyNames[challenge.difficulty]}\n                      </div>\n                    </div>\n                    \n                    <h3 className=\"text-xl font-bold text-white mb-2\">{challenge.title}</h3>\n                    \n                    <p className=\"text-gray-300 mb-6 line-clamp-3\">\n                      {challenge.description}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"flex items-center text-gray-400\">\n                          <Trophy className=\"w-4 h-4 mr-1\" />\n                          <span className=\"text-sm\">{challenge.points} очков</span>\n                        </div>\n                        <div className=\"flex items-center text-gray-400\">\n                          <Users className=\"w-4 h-4 mr-1\" />\n                          <span className=\"text-sm\">{challenge.solvedBy} решили</span>\n                        </div>\n                      </div>\n                      \n                      <Link to={`/ctf/challenge/${challenge.id}`}>\n                        <Button size=\"sm\">\n                          Решить\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"bg-cyberdark-800 rounded-lg p-8 text-center border border-cyberdark-700\">\n              <h3 className=\"text-xl font-semibold text-white mb-2\">Кейсы не найдены</h3>\n              <p className=\"text-gray-400 mb-4\">По вашему запросу не найдено ни одного кейса</p>\n              <Button onClick={() => {\n                setSearchQuery('');\n                setFilterDifficulty('all');\n              }}>\n                Сбросить фильтры\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <ChatAssistant />\n    </div>\n  );\n}\n","size_bytes":9091},"client/src/components/layout/Footer.tsx":{"content":"\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Shield, Users, Bot, BookOpen, ExternalLink, Mail, Github, Twitter } from 'lucide-react';\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-cyberdark-950 pt-16 border-t border-cyberdark-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-12\">\n          <div>\n            <h3 className=\"text-white text-lg font-semibold mb-4\">CyberWhale</h3>\n            <p className=\"text-gray-400 text-sm mb-4\">\n              Ваш путь в мир кибербезопасности начинается здесь. Учитесь, практикуйтесь и становитесь экспертом вместе с нами.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-400 hover:text-white transition\">\n                <Github className=\"w-5 h-5\" />\n              </a>\n              <a href=\"https://twitter.com\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-gray-400 hover:text-white transition\">\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n              <a href=\"mailto:cyberehaleoffical@gmail.com\" className=\"text-gray-400 hover:text-white transition\">\n                <Mail className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h3 className=\"text-white text-lg font-semibold mb-4\">Платформа</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link to=\"/ctf\" className=\"text-gray-400 hover:text-white transition flex items-center\">\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  <span>CTF Платформа</span>\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/ai-assistant\" className=\"text-gray-400 hover:text-white transition flex items-center\">\n                  <Bot className=\"w-4 h-4 mr-2\" />\n                  <span>ИИ Ассистент</span>\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/community\" className=\"text-gray-400 hover:text-white transition flex items-center\">\n                  <Users className=\"w-4 h-4 mr-2\" />\n                  <span>Сообщество</span>\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/admin\" className=\"text-gray-400 hover:text-red-400 transition flex items-center text-xs\">\n                  <Shield className=\"w-3 h-3 mr-2\" />\n                  <span>Панель управления</span>\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/knowledge\" className=\"text-gray-400 hover:text-white transition flex items-center\">\n                  <BookOpen className=\"w-4 h-4 mr-2\" />\n                  <span>База знаний</span>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-white text-lg font-semibold mb-4\">Ресурсы</h3>\n            <ul className=\"space-y-2\">\n              <li>\n                <Link to=\"/about\" className=\"text-gray-400 hover:text-white transition\">\n                  О нас\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/blog\" className=\"text-gray-400 hover:text-white transition\">\n                  Блог\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/faq\" className=\"text-gray-400 hover:text-white transition\">\n                  Часто задаваемые вопросы\n                </Link>\n              </li>\n              <li>\n                <Link to=\"/support\" className=\"text-gray-400 hover:text-white transition\">\n                  Поддержка\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h3 className=\"text-white text-lg font-semibold mb-4\">Связаться с нами</h3>\n            <p className=\"text-gray-400 text-sm mb-4\">\n              Есть вопросы или предложения? Напишите нам.\n            </p>\n            <a \n              href=\"https://t.me/Valerri_09\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\" \n              className=\"inline-flex items-center px-4 py-2 rounded bg-cyberblue-500 hover:bg-cyberblue-600 text-white transition\"\n            >\n              Связаться\n              <ExternalLink className=\"ml-2 w-4 h-4\" />\n            </a>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-cyberdark-800 py-6\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <p className=\"text-gray-400 text-sm\">\n              &copy; {new Date().getFullYear()} CyberWhale. Все права защищены.\n            </p>\n            <div className=\"flex space-x-6 mt-4 md:mt-0\">\n              <Link to=\"/privacy\" className=\"text-gray-400 hover:text-white text-sm transition\">\n                Политика конфиденциальности\n              </Link>\n              <Link to=\"/terms\" className=\"text-gray-400 hover:text-white text-sm transition\">\n                Условия использования\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5602},"client/src/pages/knowledge/reference-guide.tsx":{"content":"\nimport React from 'react';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\nimport { Button } from '@/components/ui/button';\nimport { Link } from 'react-router-dom';\nimport { \n  Github, \n  ExternalLink, \n  BookOpen, \n  ArrowLeft, \n  Shield, \n  Database, \n  Search, \n  Code,\n  Bug,\n  Blocks,\n  Terminal,\n  Network,\n  Fingerprint,\n  Cpu,\n  Star\n} from 'lucide-react';\n\nexport default function ReferenceGuide() {\n  const categories = [\n    {\n      name: \"Операционные системы\",\n      icon: <Shield className=\"h-6 w-6 text-white\" />,\n      description: \"Специализированные ОС для пентеста и анализа безопасности\",\n      tools: [\"Kali Linux\", \"Parrot OS\", \"BlackArch\", \"Commando VM\", \"Flare VM\"]\n    },\n    {\n      name: \"Анализ вредоносного ПО\",\n      icon: <Bug className=\"h-6 w-6 text-white\" />,\n      description: \"Инструменты для анализа и исследования вредоносного кода\",\n      tools: [\"Any.Run\", \"VirusTotal\", \"REMnux\", \"Cuckoo Sandbox\", \"Intezer\"]\n    },\n    {\n      name: \"OSINT\",\n      icon: <Search className=\"h-6 w-6 text-white\" />,\n      description: \"Инструменты для разведки на основе открытых источников\",\n      tools: [\"OSINT Framework\", \"Maltego\", \"Shodan\", \"theHarvester\", \"SpiderFoot\"]\n    },\n    {\n      name: \"Анализ уязвимостей\",\n      icon: <Code className=\"h-6 w-6 text-white\" />,\n      description: \"Инструменты для поиска и анализа уязвимостей\",\n      tools: [\"Nmap\", \"Metasploit\", \"Burp Suite\", \"OWASP ZAP\", \"Acunetix\"]\n    },\n    {\n      name: \"Форензика\",\n      icon: <Fingerprint className=\"h-6 w-6 text-white\" />,\n      description: \"Инструменты для цифровой криминалистики и расследований\",\n      tools: [\"Autopsy\", \"Volatility\", \"FTK Imager\", \"Sleuth Kit\", \"CAINE\"]\n    },\n    {\n      name: \"Реверс-инжиниринг\",\n      icon: <Blocks className=\"h-6 w-6 text-white\" />,\n      description: \"Инструменты для анализа и декомпиляции программ\",\n      tools: [\"Ghidra\", \"IDA Pro\", \"Radare2\", \"Binary Ninja\", \"OllyDbg\"]\n    },\n    {\n      name: \"Сетевая безопасность\",\n      icon: <Network className=\"h-6 w-6 text-white\" />,\n      description: \"Инструменты для анализа и защиты сетей\",\n      tools: [\"Wireshark\", \"Zeek\", \"Suricata\", \"Snort\", \"NetworkMiner\"]\n    },\n    {\n      name: \"Базы данных уязвимостей\",\n      icon: <Database className=\"h-6 w-6 text-white\" />,\n      description: \"Базы данных с информацией о уязвимостях и угрозах\",\n      tools: [\"MITRE ATT&CK\", \"CVE\", \"NVD\", \"Exploit-DB\", \"Vulnhub\"]\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <Navbar />\n      \n      <div className=\"pt-20 flex-grow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"mb-8\">\n            <Link to=\"/knowledge\" className=\"text-gray-400 hover:text-white flex items-center mb-6\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Назад к базе знаний\n            </Link>\n            \n            <h1 className=\"text-4xl font-bold text-white mb-6\">\n              <span className=\"text-cyberblue-400\">CyberWhale</span> Справочник кибербезопасности\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-8 max-w-3xl\">\n              Полная коллекция инструментов, ресурсов и методов для специалистов в области кибербезопасности. \n              Справочник постоянно обновляется и содержит более 300 полезных ссылок.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 mb-12\">\n              <a href=\"https://github.com/CyberWhaleOffical1/CyberWhale_Cybersecurity_Reference\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 w-full sm:w-auto\">\n                  <Github className=\"mr-2 h-5 w-5\" />\n                  Открыть на GitHub\n                  <ExternalLink className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </a>\n              <a href=\"https://github.com/CyberWhaleOffical1/CyberWhale_Cybersecurity_Reference/blob/main/README.md\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button variant=\"outline\" className=\"w-full sm:w-auto\">\n                  <BookOpen className=\"mr-2 h-5 w-5\" />\n                  Читать README\n                </Button>\n              </a>\n            </div>\n          </div>\n          \n          <div className=\"bg-gradient-to-r from-cyberdark-800 to-cyberdark-700 rounded-lg border border-cyberdark-700 p-8 mb-12\">\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n              <div className=\"bg-cyberdark-700/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-white\">300+</div>\n                <div className=\"text-sm text-gray-400\">Инструментов</div>\n              </div>\n              <div className=\"bg-cyberdark-700/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-white\">20+</div>\n                <div className=\"text-sm text-gray-400\">Категорий</div>\n              </div>\n              <div className=\"bg-cyberdark-700/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-white\">100%</div>\n                <div className=\"text-sm text-gray-400\">Бесплатно</div>\n              </div>\n              <div className=\"bg-cyberdark-700/50 p-4 rounded-lg\">\n                <div className=\"text-2xl font-bold text-white\">24/7</div>\n                <div className=\"text-sm text-gray-400\">Доступ</div>\n              </div>\n            </div>\n          </div>\n          \n          <h2 className=\"text-2xl font-semibold text-white mb-6\">Основные категории справочника</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12\">\n            {categories.map((category, index) => (\n              <div key={index} className=\"bg-cyberdark-800 rounded-lg border border-cyberdark-700 hover:border-cyberblue-500/50 transition-colors p-6 flex flex-col h-full\">\n                <div className=\"bg-gradient-to-br from-cyberblue-600/20 to-purple-600/20 p-4 rounded-full w-16 h-16 flex items-center justify-center mb-4\">\n                  {category.icon}\n                </div>\n                <h3 className=\"text-xl font-semibold text-white mb-2\">{category.name}</h3>\n                <p className=\"text-gray-400 mb-4 flex-grow\">{category.description}</p>\n                <div className=\"mt-2\">\n                  <p className=\"text-gray-300 text-sm font-medium mb-2\">Популярные инструменты:</p>\n                  <ul className=\"space-y-1\">\n                    {category.tools.slice(0, 3).map((tool, i) => (\n                      <li key={i} className=\"text-gray-400 text-sm flex items-center\">\n                        <Terminal className=\"mr-2 h-3 w-3 text-cyberblue-400\" />\n                        {tool}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"bg-gradient-to-r from-cyberblue-900/50 to-purple-900/50 rounded-lg p-8 border border-cyberblue-500/30 text-center\">\n            <h2 className=\"text-2xl font-bold text-white mb-4\">Присоединяйтесь к проекту</h2>\n            <p className=\"text-lg text-gray-300 mb-6 max-w-2xl mx-auto\">\n              Справочник CyberWhale является проектом с открытым исходным кодом. \n              Мы приветствуем ваш вклад в расширение и улучшение нашей базы знаний.\n            </p>\n            <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n              <a href=\"https://github.com/CyberWhaleOffical1/CyberWhale_Cybersecurity_Reference\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 w-full\">\n                  <Github className=\"mr-2 h-5 w-5\" />\n                  Перейти в репозиторий\n                </Button>\n              </a>\n              <a href=\"https://github.com/CyberWhaleOffical1/CyberWhale_Cybersecurity_Reference/stargazers\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button variant=\"outline\" className=\"w-full\">\n                  <Star className=\"mr-2 h-5 w-5\" />\n                  Поставить звезду\n                </Button>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <ChatAssistant />\n    </div>\n  );\n}\n","size_bytes":9284},"client/src/lib/auth/hook.tsx":{"content":"\nimport { useContext } from 'react';\nimport { AuthContext } from './context';\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n","size_bytes":277},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/pages/community/index.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\n\nimport { \n  Users, \n  Globe, \n  MessageSquare, \n  Calendar, \n  Clock, \n  ArrowRight, \n  ExternalLink, \n  ChevronRight, \n  Bell, \n  User,\n  Zap,\n  ShieldCheck as Shield\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { toast } from '@/components/ui/use-toast';\nimport { Event } from '@/types';\n\nconst mockEvents: Event[] = [\n  {\n    id: '1',\n    title: 'Воркшоп по веб-безопасности',\n    description: 'Изучите распространенные веб-уязвимости и методы их предотвращения.',\n    date: new Date(Date.now() + 86400000), // Tomorrow\n    timeZone: 'МСК',\n    type: 'workshop',\n    registeredUsers: 45,\n  },\n  {\n    id: '2',\n    title: 'CTF Соревнование',\n    description: 'Проверьте свои навыки в нашем ежемесячном соревновании.',\n    date: new Date(Date.now() + 604800000), // Next week\n    timeZone: 'МСК',\n    type: 'competition',\n    registeredUsers: 128,\n  },\n  {\n    id: '3',\n    title: 'Вебинар по криптографии',\n    description: 'Основы криптографии и её применение в современной кибербезопасности.',\n    date: new Date(Date.now() + 1209600000), // Two weeks from now\n    timeZone: 'МСК',\n    type: 'webinar',\n    registeredUsers: 67,\n  },\n  {\n    id: '4',\n    title: 'Мастер-класс по реверс-инжинирингу',\n    description: 'Практический мастер-класс по анализу бинарных файлов и декомпиляции программ.',\n    date: new Date(Date.now() + 1814400000), // Three weeks from now\n    timeZone: 'МСК',\n    type: 'workshop',\n    registeredUsers: 34,\n  },\n];\n\nconst mockTopics = [\n  {\n    id: '1',\n    title: 'Обнаружена новая уязвимость в Apache Log4j',\n    category: 'Новости',\n    author: 'admin',\n    replies: 24,\n    views: 342,\n    lastUpdate: new Date(Date.now() - 86400000), // Yesterday\n  },\n  {\n    id: '2',\n    title: 'Как начать карьеру в сфере кибербезопасности?',\n    category: 'Карьера',\n    author: 'newbie123',\n    replies: 18,\n    views: 203,\n    lastUpdate: new Date(Date.now() - 172800000), // 2 days ago\n  },\n  {\n    id: '3',\n    title: 'Советы по решению CTF заданий для начинающих',\n    category: 'CTF',\n    author: 'ctfmaster',\n    replies: 31,\n    views: 289,\n    lastUpdate: new Date(Date.now() - 259200000), // 3 days ago\n  },\n  {\n    id: '4',\n    title: 'Обзор инструментов для тестирования на проникновение',\n    category: 'Инструменты',\n    author: 'pentester',\n    replies: 15,\n    views: 178,\n    lastUpdate: new Date(Date.now() - 345600000), // 4 days ago\n  },\n  {\n    id: '5',\n    title: 'Вышло обновление Kali Linux 2023.3',\n    category: 'Новости',\n    author: 'securityguy',\n    replies: 7,\n    views: 145,\n    lastUpdate: new Date(Date.now() - 432000000), // 5 days ago\n  },\n];\n\nconst EventCard = ({ event }: { event: Event }) => {\n  const [registered, setRegistered] = useState(false);\n  \n  const handleRegister = () => {\n    setRegistered(!registered);\n    toast({\n      title: registered ? \"Регистрация отменена\" : \"Вы зарегистрированы!\",\n      description: registered \n        ? `Вы отменили регистрацию на событие \"${event.title}\"` \n        : `Вы успешно зарегистрировались на событие \"${event.title}\"`,\n    });\n  };\n\n  const formatDate = (date: Date) => {\n    const options: Intl.DateTimeFormatOptions = { \n      weekday: 'long', \n      month: 'long', \n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    };\n    return date.toLocaleDateString('ru-RU', options);\n  };\n\n  const getEventBadgeColor = (type: Event['type']) => {\n    switch (type) {\n      case 'workshop':\n        return 'bg-blue-500/20 text-blue-400 border-blue-500/30';\n      case 'competition':\n        return 'bg-purple-500/20 text-purple-400 border-purple-500/30';\n      case 'webinar':\n        return 'bg-green-500/20 text-green-400 border-green-500/30';\n      case 'meetup':\n        return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';\n      default:\n        return 'bg-gray-500/20 text-gray-400 border-gray-500/30';\n    }\n  };\n\n  const getEventIcon = (type: Event['type']) => {\n    switch (type) {\n      case 'workshop':\n        return <Users className=\"w-4 h-4\" />;\n      case 'competition':\n        return <Zap className=\"w-4 h-4\" />;\n      case 'webinar':\n        return <Globe className=\"w-4 h-4\" />;\n      case 'meetup':\n        return <MessageSquare className=\"w-4 h-4\" />;\n      default:\n        return <Calendar className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700 hover:border-cyberblue-500/30 transition-all duration-300\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <Badge variant=\"outline\" className={getEventBadgeColor(event.type)}>\n            <div className=\"flex items-center\">\n              {getEventIcon(event.type)}\n              <span className=\"ml-1\">\n                {event.type === 'workshop' && 'Воркшоп'}\n                {event.type === 'competition' && 'Соревнование'}\n                {event.type === 'webinar' && 'Вебинар'}\n                {event.type === 'meetup' && 'Встреча'}\n              </span>\n            </div>\n          </Badge>\n          <div className=\"flex items-center text-gray-400 text-sm\">\n            <Users className=\"w-4 h-4 mr-1\" />\n            <span>{event.registeredUsers} участников</span>\n          </div>\n        </div>\n        \n        <h3 className=\"text-xl font-bold text-white mb-2\">{event.title}</h3>\n        \n        <p className=\"text-gray-300 mb-4\">\n          {event.description}\n        </p>\n        \n        <div className=\"flex items-center text-gray-400 text-sm mb-6\">\n          <Calendar className=\"w-4 h-4 mr-1\" />\n          <span>{formatDate(event.date)} {event.timeZone}</span>\n        </div>\n        \n        <Button\n          onClick={handleRegister}\n          className={registered ? \"bg-red-500 hover:bg-red-600\" : \"bg-cyberblue-500 hover:bg-cyberblue-600\"}\n          variant={registered ? \"destructive\" : \"default\"}\n        >\n          {registered ? 'Отменить регистрацию' : 'Зарегистрироваться'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default function Community() {\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <Navbar />\n      \n      <div className=\"pt-20 flex-grow\">\n        <div className=\"bg-gradient-to-b from-cyberdark-800 to-cyberdark-900\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n            <div className=\"text-center max-w-3xl mx-auto\">\n              <h1 className=\"text-3xl font-bold text-white sm:text-4xl mb-4\">\n                СООБЩЕСТВО\n              </h1>\n              <h2 className=\"text-2xl sm:text-3xl font-bold mb-6\">\n                <span className=\"text-gradient\">Присоединяйтесь к нашей сети безопасности</span>\n              </h2>\n              <p className=\"text-lg text-gray-300 mb-8\">\n                Станьте частью активного сообщества профессионалов и энтузиастов кибербезопасности.\n                Обменивайтесь опытом, участвуйте в дискуссиях и расширяйте свои знания вместе с нами.\n              </p>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-6 mb-8\">\n                <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                  <div className=\"text-2xl font-bold text-white\">5,000+</div>\n                  <div className=\"text-gray-400\">Активных участников</div>\n                </div>\n                <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                  <div className=\"text-2xl font-bold text-white\">24/7</div>\n                  <div className=\"text-gray-400\">Каналы для обсуждений</div>\n                </div>\n                <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                  <div className=\"text-2xl font-bold text-white\">Еженедельно</div>\n                  <div className=\"text-gray-400\">События и воркшопы</div>\n                </div>\n              </div>\n              \n              <div className=\"flex flex-col sm:flex-row justify-center gap-4\">\n                <a \n                  href=\"https://t.me/HackCtrl_Official\" \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\" \n                  className=\"inline-flex items-center justify-center\"\n                >\n                  <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 btn-glow\">\n                    Присоединиться к сообществу\n                    <svg className=\"ml-2 h-4 w-4\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M22.05 2.25c.566 0 1.029.463 1.029 1.03v17.445c0 .566-.463 1.029-1.03 1.029H4.604a1.029 1.029 0 01-1.03-1.03V3.28c0-.567.464-1.03 1.03-1.03h17.446zM4.604 1A2.28 2.28 0 002.325 3.28v17.445A2.28 2.28 0 004.604 23H22.05a2.28 2.28 0 002.28-2.28V3.28A2.28 2.28 0 0022.05 1H4.604z\" fill=\"currentColor\"/>\n                      <path d=\"M10.75 8.848c2.798-1.21 4.355-1.887 4.67-2.03.95-.432 2.058-.147 2.347.917.117.432.216 1.328.294 2.687.117 2.079.311 5.586-.117 7.32-.216.874-.639 1.167-1.056 1.198-.899.061-1.581-.54-2.452-1.062-.49-.295-2.179-1.4-2.935-1.771-.432-.216-.961-.433-1.58.147-.372.355-1.257 1.225-1.803 1.756-.249.246-.558.338-.838.329a.66.66 0 01-.34-.075c-.413-.153-.911-.352-1.209-.468-.932-.36-1.674-.726-1.602-1.529.037-.4.269-.803.9-1.323 1.684-1.384 3.175-2.56 4.104-3.405 1.184-1.077 2.576-2.712 1.617-3.69z\" fill=\"currentColor\"/>\n                    </svg>\n                  </Button>\n                </a>\n                <a \n                  href=\"#events\" \n                  className=\"inline-flex items-center justify-center\"\n                >\n                  <Button variant=\"outline\">\n                    Предстоящие события\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"ml-2 h-4 w-4\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path fillRule=\"evenodd\" d=\"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </Button>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div id=\"events\" className=\"mb-20\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl font-bold text-white\">Предстоящие события</h2>\n              <Link to=\"/community/events\" className=\"text-cyberblue-500 hover:text-cyberblue-400 flex items-center\">\n                Все события\n                <ArrowRight className=\"ml-1 w-4 h-4\" />\n              </Link>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {mockEvents.slice(0, 3).map((event) => (\n                <EventCard key={event.id} event={event} />\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"mb-20\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl font-bold text-white\">Обсуждения на форуме</h2>\n              <Link to=\"/community/forum\" className=\"text-cyberblue-500 hover:text-cyberblue-400 flex items-center\">\n                Перейти на форум\n                <ArrowRight className=\"ml-1 w-4 h-4\" />\n              </Link>\n            </div>\n            \n            <div className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700\">\n              <table className=\"w-full\">\n                <thead className=\"bg-cyberdark-700\">\n                  <tr>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider\">Тема</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider hidden md:table-cell\">Категория</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider hidden md:table-cell\">Автор</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider hidden sm:table-cell\">Ответы</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider hidden lg:table-cell\">Просмотры</th>\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider hidden sm:table-cell\">Последнее</th>\n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-cyberdark-700\">\n                  {mockTopics.map((topic) => (\n                    <tr key={topic.id} className=\"hover:bg-cyberdark-700/50 transition-colors\">\n                      <td className=\"px-6 py-4\">\n                        <Link to={`/community/forum/topic/${topic.id}`} className=\"font-medium text-white hover:text-cyberblue-400 transition-colors\">\n                          {topic.title}\n                        </Link>\n                      </td>\n                      <td className=\"px-6 py-4 hidden md:table-cell\">\n                        <Badge variant=\"outline\" className=\"bg-cyberdark-700/50 text-gray-300\">\n                          {topic.category}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 hidden md:table-cell\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-6 h-6 rounded-full bg-cyberdark-600 mr-2\"></div>\n                          <span className=\"text-gray-300\">{topic.author}</span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 text-gray-300 hidden sm:table-cell\">{topic.replies}</td>\n                      <td className=\"px-6 py-4 text-gray-300 hidden lg:table-cell\">{topic.views}</td>\n                      <td className=\"px-6 py-4 text-gray-300 hidden sm:table-cell\">\n                        <div className=\"flex items-center\">\n                          <Clock className=\"w-4 h-4 mr-1\" />\n                          <span>{topic.lastUpdate.toLocaleDateString()}</span>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n          \n          <div className=\"mb-20\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl font-bold text-white\">Активные участники</h2>\n              <Link to=\"/community/members\" className=\"text-cyberblue-500 hover:text-cyberblue-400 flex items-center\">\n                Все участники\n                <ArrowRight className=\"ml-1 w-4 h-4\" />\n              </Link>\n            </div>\n            \n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 hover:border-cyberblue-500/30 transition-all duration-300\">\n                  <div className=\"flex items-center mb-4\">\n                    <Avatar className=\"h-12 w-12 mr-4\">\n                      <AvatarImage src={`https://api.dicebear.com/7.x/avataaars/svg?seed=user${i}`} alt=\"Avatar\" />\n                      <AvatarFallback>ПИ</AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium text-white\">Пользователь{i}</div>\n                      <div className=\"text-gray-400 text-sm\">@user{i}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-gray-300 mb-4\">\n                    Специалист по кибербезопасности с опытом работы в области {['веб-безопасности', 'сетевой безопасности', 'криптографии', 'анализа вредоносного ПО'][i-1]}.\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-gray-400 text-sm\">\n                      <Badge className=\"bg-cyberdark-700 text-gray-300\">\n                        Ранг: {['Эксперт', 'Продвинутый', 'Средний', 'Начинающий'][i-1]}\n                      </Badge>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">\n                      Профиль\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-2xl font-bold text-white\">Каналы коммуникации</h2>\n            </div>\n            \n            <Tabs defaultValue=\"all\" className=\"w-full\">\n              <TabsList className=\"grid grid-cols-4 w-full bg-cyberdark-800 rounded-t-lg\">\n                <TabsTrigger value=\"all\">Все каналы</TabsTrigger>\n                <TabsTrigger value=\"telegram\">Telegram</TabsTrigger>\n                <TabsTrigger value=\"discord\">Discord</TabsTrigger>\n                <TabsTrigger value=\"forum\">Форум</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"all\" className=\"bg-cyberdark-800 rounded-b-lg p-6 border border-t-0 border-cyberdark-700\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <a \n                    href=\"https://t.me/cyberwhale\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"bg-cyberdark-700 rounded-lg p-6 hover:bg-cyberdark-600 transition-colors\"\n                  >\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"w-10 h-10 rounded-full bg-blue-500 flex items-center justify-center mr-3\">\n                        <svg width=\"20\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"text-white\">\n                          <path d=\"M22.05 2.25c.566 0 1.029.463 1.029 1.03v17.445c0 .566-.463 1.029-1.03 1.029H4.604a1.029 1.029 0 01-1.03-1.03V3.28c0-.567.464-1.03 1.03-1.03h17.446zM4.604 1A2.28 2.28 0 002.325 3.28v17.445A2.28 2.28 0 004.604 23H22.05a2.28 2.28 0 002.28-2.28V3.28A2.28 2.28 0 0022.05 1H4.604z\" fill=\"currentColor\"/>\n                          <path d=\"M10.75 8.848c2.798-1.21 4.355-1.887 4.67-2.03.95-.432 2.058-.147 2.347.917.117.432.216 1.328.294 2.687.117 2.079.311 5.586-.117 7.32-.216.874-.639 1.167-1.056 1.198-.899.061-1.581-.54-2.452-1.062-.49-.295-2.179-1.4-2.935-1.771-.432-.216-.961-.433-1.58.147-.372.355-1.257 1.225-1.803 1.756-.249.246-.558.338-.838.329a.66.66 0 01-.34-.075c-.413-.153-.911-.352-1.209-.468-.932-.36-1.674-.726-1.602-1.529.037-.4.269-.803.9-1.323 1.684-1.384 3.175-2.56 4.104-3.405 1.184-1.077 2.576-2.712 1.617-3.69z\" fill=\"currentColor\"/>\n                        </svg>\n                      </div>\n                      <h3 className=\"text-white font-medium\">Telegram</h3>\n                    </div>\n                    <p className=\"text-gray-300 mb-4\">\n                      Присоединяйтесь к нашему Telegram-каналу для новостей, обсуждений и помощи по кибербезопасности.\n                    </p>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-400\">3,200+ участников</span>\n                      <span className=\"text-blue-400\">@cyberwhale</span>\n                    </div>\n                  </a>\n                  \n                  <a \n                    href=\"https://discord.gg/cyberwhale\" \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"bg-cyberdark-700 rounded-lg p-6 hover:bg-cyberdark-600 transition-colors\"\n                  >\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"w-10 h-10 rounded-full bg-indigo-500 flex items-center justify-center mr-3\">\n                        <svg width=\"20\" height=\"15\" viewBox=\"0 0 71 55\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"text-white\">\n                          <path d=\"M60.1045 4.8978C55.5792 2.8214 50.7265 1.2916 45.6527 0.41542C45.5603 0.39851 45.468 0.440769 45.4204 0.525289C44.7963 1.6353 44.105 3.0834 43.6209 4.2216C38.1637 3.4046 32.7345 3.4046 27.3892 4.2216C26.905 3.0581 26.1886 1.6353 25.5617 0.525289C25.5141 0.443589 25.4218 0.40133 25.3294 0.41542C20.2584 1.2888 15.4057 2.8186 10.8776 4.8978C10.8384 4.9147 10.8048 4.9429 10.7825 4.9795C1.57795 18.7309 -0.943561 32.1443 0.293408 45.3914C0.299005 45.4562 0.335386 45.5182 0.385761 45.5576C6.45866 50.0174 12.3413 52.7249 18.1147 54.5195C18.2071 54.5477 18.305 54.5139 18.3638 54.4378C19.7295 52.5728 20.9469 50.6063 21.9907 48.5383C22.0523 48.4172 21.9935 48.2735 21.8676 48.2256C19.9366 47.4931 18.0979 46.6 16.3292 45.5858C16.1893 45.5041 16.1781 45.304 16.3068 45.2082C16.679 44.9293 17.0513 44.6391 17.4067 44.3461C17.471 44.2926 17.5606 44.2813 17.6362 44.3151C29.2558 49.6202 41.8354 49.6202 53.3179 44.3151C53.3935 44.2785 53.4831 44.2898 53.5502 44.3433C53.9057 44.6363 54.2779 44.9293 54.6529 45.2082C54.7816 45.304 54.7732 45.5041 54.6333 45.5858C52.8646 46.6197 51.0259 47.4931 49.0921 48.2228C48.9662 48.2707 48.9102 48.4172 48.9718 48.5383C50.038 50.6034 51.2554 52.5699 52.5959 54.435C52.6519 54.5139 52.7526 54.5477 52.845 54.5195C58.6464 52.7249 64.529 50.0174 70.6019 45.5576C70.6551 45.5182 70.6887 45.459 70.6943 45.3942C72.1747 30.0791 68.2147 16.7757 60.1968 4.9823C60.1772 4.9429 60.1437 4.9147 60.1045 4.8978ZM23.7259 37.3253C20.2276 37.3253 17.3451 34.1136 17.3451 30.1693C17.3451 26.225 20.1717 23.0133 23.7259 23.0133C27.308 23.0133 30.1626 26.2532 30.1066 30.1693C30.1066 34.1136 27.28 37.3253 23.7259 37.3253ZM47.3178 37.3253C43.8196 37.3253 40.9371 34.1136 40.9371 30.1693C40.9371 26.225 43.7636 23.0133 47.3178 23.0133C50.9 23.0133 53.7545 26.2532 53.6986 30.1693C53.6986 34.1136 50.9 37.3253 47.3178 37.3253Z\" fill=\"currentColor\"/>\n                        </svg>\n                      </div>\n                      <h3 className=\"text-white font-medium\">Discord</h3>\n                    </div>\n                    <p className=\"text-gray-300 mb-4\">\n                      Общайтесь в реальном времени с другими специалистами и энтузиастами в нашем Discord-сервере.\n                    </p>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-400\">1,800+ участников</span>\n                      <span className=\"text-indigo-400\">discord.gg/cyberwhale</span>\n                    </div>\n                  </a>\n                  \n                  <Link \n                    to=\"/community/forum\"\n                    className=\"bg-cyberdark-700 rounded-lg p-6 hover:bg-cyberdark-600 transition-colors\"\n                  >\n                    <div className=\"flex items-center mb-4\">\n                      <div className=\"w-10 h-10 rounded-full bg-cyberblue-500 flex items-center justify-center mr-3\">\n                        <MessageSquare className=\"h-5 w-5 text-white\" />\n                      </div>\n                      <h3 className=\"text-white font-medium\">Форум</h3>\n                    </div>\n                    <p className=\"text-gray-300 mb-4\">\n                      Наш форум предлагает структурированные дискуссии и базу знаний по различным темам кибербезопасности.\n                    </p>\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-400\">500+ тем</span>\n                      <span className=\"text-cyberblue-400\">forum.cyberwhale.com</span>\n                    </div>\n                  </Link>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"telegram\" className=\"bg-cyberdark-800 rounded-b-lg p-6 border border-t-0 border-cyberdark-700\">\n                <div className=\"max-w-2xl mx-auto\">\n                  <div className=\"flex items-center mb-6\">\n                    <div className=\"w-16 h-16 rounded-full bg-blue-500 flex items-center justify-center mr-4\">\n                      <svg width=\"32\" height=\"30\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"text-white\">\n                        <path d=\"M22.05 2.25c.566 0 1.029.463 1.029 1.03v17.445c0 .566-.463 1.029-1.03 1.029H4.604a1.029 1.029 0 01-1.03-1.03V3.28c0-.567.464-1.03 1.03-1.03h17.446zM4.604 1A2.28 2.28 0 002.325 3.28v17.445A2.28 2.28 0 004.604 23H22.05a2.28 2.28 0 002.28-2.28V3.28A2.28 2.28 0 0022.05 1H4.604z\" fill=\"currentColor\"/>\n                        <path d=\"M10.75 8.848c2.798-1.21 4.355-1.887 4.67-2.03.95-.432 2.058-.147 2.347.917.117.432.216 1.328.294 2.687.117 2.079.311 5.586-.117 7.32-.216.874-.639 1.167-1.056 1.198-.899.061-1.581-.54-2.452-1.062-.49-.295-2.179-1.4-2.935-1.771-.432-.216-.961-.433-1.58.147-.372.355-1.257 1.225-1.803 1.756-.249.246-.558.338-.838.329a.66.66 0 01-.34-.075c-.413-.153-.911-.352-1.209-.468-.932-.36-1.674-.726-1.602-1.529.037-.4.269-.803.9-1.323 1.684-1.384 3.175-2.56 4.104-3.405 1.184-1.077 2.576-2.712 1.617-3.69z\" fill=\"currentColor\"/>\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-white\">Telegram канал CyberWhale</h3>\n                      <p className=\"text-gray-300\">@cyberwhale • 3,200+ участников</p>\n                    </div>\n                  </div>\n                  <div className=\"bg-cyberdark-700 rounded-lg p-6 mb-6\">\n                    <h4 className=\"font-medium text-white mb-4\">О канале:</h4>\n                    <p className=\"text-gray-300 mb-4\">\n                      Официальный Telegram-канал сообщества CyberWhale. Здесь вы найдете:\n                    </p>\n                    <ul className=\"space-y-2 mb-4\">\n                      <li className=\"flex items-start\">\n                        <div className=\"w-2 h-2 bg-cyberblue-500 rounded-full mt-2 mr-2\"></div>\n                        <span className=\"text-gray-300\">Новости из мира кибербезопасности</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <div className=\"w-2 h-2 bg-cyberblue-500 rounded-full mt-2 mr-2\"></div>\n                        <span className=\"text-gray-300\">Анонсы событий и соревнований</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <div className=\"w-2 h-2 bg-cyberblue-500 rounded-full mt-2 mr-2\"></div>\n                        <span className=\"text-gray-300\">Обсуждение актуальных тем и уязвимостей</span>\n                      </li>\n                      <li className=\"flex items-start\">\n                        <div className=\"w-2 h-2 bg-cyberblue-500 rounded-full mt-2 mr-2\"></div>\n                        <span className=\"text-gray-300\">Помощь от сообщества и экспертов</span>\n                      </li>\n                    </ul>\n                  </div>\n                  <div className=\"flex justify-center\">\n                    <a \n                      href=\"https://t.me/cyberwhale\" \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                    >\n                      <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                        Присоединиться к каналу\n                        <ExternalLink className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </a>\n                  </div>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"discord\" className=\"bg-cyberdark-800 rounded-b-lg p-6 border border-t-0 border-cyberdark-700\">\n                <div className=\"max-w-2xl mx-auto\">\n                  <div className=\"flex items-center mb-6\">\n                    <div className=\"w-16 h-16 rounded-full bg-indigo-500 flex items-center justify-center mr-4\">\n                      <svg width=\"32\" height=\"25\" viewBox=\"0 0 71 55\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" className=\"text-white\">\n                        <path d=\"M60.1045 4.8978C55.5792 2.8214 50.7265 1.2916 45.6527 0.41542C45.5603 0.39851 45.468 0.440769 45.4204 0.525289C44.7963 1.6353 44.105 3.0834 43.6209 4.2216C38.1637 3.4046 32.7345 3.4046 27.3892 4.2216C26.905 3.0581 26.1886 1.6353 25.5617 0.525289C25.5141 0.443589 25.4218 0.40133 25.3294 0.41542C20.2584 1.2888 15.4057 2.8186 10.8776 4.8978C10.8384 4.9147 10.8048 4.9429 10.7825 4.9795C1.57795 18.7309 -0.943561 32.1443 0.293408 45.3914C0.299005 45.4562 0.335386 45.5182 0.385761 45.5576C6.45866 50.0174 12.3413 52.7249 18.1147 54.5195C18.2071 54.5477 18.305 54.5139 18.3638 54.4378C19.7295 52.5728 20.9469 50.6063 21.9907 48.5383C22.0523 48.4172 21.9935 48.2735 21.8676 48.2256C19.9366 47.4931 18.0979 46.6 16.3292 45.5858C16.1893 45.5041 16.1781 45.304 16.3068 45.2082C16.679 44.9293 17.0513 44.6391 17.4067 44.3461C17.471 44.2926 17.5606 44.2813 17.6362 44.3151C29.2558 49.6202 41.8354 49.6202 53.3179 44.3151C53.3935 44.2785 53.4831 44.2898 53.5502 44.3433C53.9057 44.6363 54.2779 44.9293 54.6529 45.2082C54.7816 45.304 54.7732 45.5041 54.6333 45.5858C52.8646 46.6197 51.0259 47.4931 49.0921 48.2228C48.9662 48.2707 48.9102 48.4172 48.9718 48.5383C50.038 50.6034 51.2554 52.5699 52.5959 54.435C52.6519 54.5139 52.7526 54.5477 52.845 54.5195C58.6464 52.7249 64.529 50.0174 70.6019 45.5576C70.6551 45.5182 70.6887 45.459 70.6943 45.3942C72.1747 30.0791 68.2147 16.7757 60.1968 4.9823C60.1772 4.9429 60.1437 4.9147 60.1045 4.8978ZM23.7259 37.3253C20.2276 37.3253 17.3451 34.1136 17.3451 30.1693C17.3451 26.225 20.1717 23.0133 23.7259 23.0133C27.308 23.0133 30.1626 26.2532 30.1066 30.1693C30.1066 34.1136 27.28 37.3253 23.7259 37.3253ZM47.3178 37.3253C43.8196 37.3253 40.9371 34.1136 40.9371 30.1693C40.9371 26.225 43.7636 23.0133 47.3178 23.0133C50.9 23.0133 53.7545 26.2532 53.6986 30.1693C53.6986 34.1136 50.9 37.3253 47.3178 37.3253Z\" fill=\"currentColor\"/>\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-white\">Discord сервер CyberWhale</h3>\n                      <p className=\"text-gray-300\">discord.gg/cyberwhale • 1,800+ участников</p>\n                    </div>\n                  </div>\n                  <div className=\"bg-cyberdark-700 rounded-lg p-6 mb-6\">\n                    <h4 className=\"font-medium text-white mb-4\">Доступные каналы:</h4>\n                    <div className=\"space-y-4 mb-4\">\n                      <div className=\"flex items-center\">\n                        <span className=\"text-gray-400 w-32\">#general</span>\n                        <span className=\"text-gray-300\">Общее обсуждение кибербезопасности</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <span className=\"text-gray-400 w-32\">#ctf</span>\n                        <span className=\"text-gray-300\">Обсуждение CTF задач и соревнований</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <span className=\"text-gray-400 w-32\">#web-security</span>\n                        <span className=\"text-gray-300\">Веб-безопасность и уязвимости</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <span className=\"text-gray-400 w-32\">#crypto</span>\n                        <span className=\"text-gray-300\">Криптография и шифрование</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <span className=\"text-gray-400 w-32\">#reverse-eng</span>\n                        <span className=\"text-gray-300\">Реверс-инжиниринг и анализ</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <span className=\"text-gray-400 w-32\">#help</span>\n                        <span className=\"text-gray-300\">Помощь и поддержка</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-center\">\n                    <a \n                      href=\"https://discord.gg/cyberwhale\" \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                    >\n                      <Button className=\"bg-indigo-500 hover:bg-indigo-600\">\n                        Присоединиться к серверу\n                        <ExternalLink className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </a>\n                  </div>\n                </div>\n              </TabsContent>\n              \n              <TabsContent value=\"forum\" className=\"bg-cyberdark-800 rounded-b-lg p-6 border border-t-0 border-cyberdark-700\">\n                <div className=\"max-w-2xl mx-auto\">\n                  <div className=\"flex items-center mb-6\">\n                    <div className=\"w-16 h-16 rounded-full bg-cyberblue-500 flex items-center justify-center mr-4\">\n                      <MessageSquare className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-xl font-bold text-white\">Форум CyberWhale</h3>\n                      <p className=\"text-gray-300\">forum.cyberwhale.com • 500+ тем</p>\n                    </div>\n                  </div>\n                  <div className=\"bg-cyberdark-700 rounded-lg p-6 mb-6\">\n                    <h4 className=\"font-medium text-white mb-4\">Популярные категории:</h4>\n                    <div className=\"space-y-4 mb-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <Shield className=\"h-5 w-5 text-cyberblue-400 mr-3\" />\n                          <span className=\"text-white\">Web Security</span>\n                        </div>\n                        <span className=\"text-gray-400\">124 темы</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <Shield className=\"h-5 w-5 text-cyberblue-400 mr-3\" />\n                          <span className=\"text-white\">Криптография</span>\n                        </div>\n                        <span className=\"text-gray-400\">87 тем</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <Shield className=\"h-5 w-5 text-cyberblue-400 mr-3\" />\n                          <span className=\"text-white\">Reverse Engineering</span>\n                        </div>\n                        <span className=\"text-gray-400\">93 темы</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <Shield className=\"h-5 w-5 text-cyberblue-400 mr-3\" />\n                          <span className=\"text-white\">CTF и соревнования</span>\n                        </div>\n                        <span className=\"text-gray-400\">118 тем</span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <Shield className=\"h-5 w-5 text-cyberblue-400 mr-3\" />\n                          <span className=\"text-white\">Карьера и обучение</span>\n                        </div>\n                        <span className=\"text-gray-400\">78 тем</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"flex justify-center\">\n                    <Link to=\"/community/forum\">\n                      <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600\">\n                        Перейти на форум\n                        <ArrowRight className=\"ml-2 h-4 w-4\" />\n                      </Button>\n                    </Link>\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n        \n        <div className=\"bg-gradient-to-b from-cyberdark-900 to-cyberdark-800 py-20\">\n          <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-white mb-6\">\n              Присоединяйтесь к нашему сообществу сегодня\n            </h2>\n            <p className=\"text-xl text-gray-300 mb-10 max-w-3xl mx-auto\">\n              Станьте частью растущего сообщества специалистов и энтузиастов кибербезопасности. \n              Обменивайтесь знаниями, участвуйте в событиях и развивайтесь вместе с нами.\n            </p>\n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n              <Link to=\"/register\">\n                <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 btn-glow text-lg px-8 py-6\">\n                  Зарегистрироваться\n                </Button>\n              </Link>\n              <Link to=\"/login\">\n                <Button variant=\"outline\" className=\"text-white text-lg px-8 py-6\">\n                  Уже зарегистрированы? Войти\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":40285},"client/src/components/search/SearchBox.tsx":{"content":"\nimport React, { useState, useRef, useEffect } from 'react';\nimport { Search, X } from 'lucide-react';\nimport { Input } from '@/components/ui/input';\nimport { searchContent, SearchResult } from '@/lib/search';\nimport SearchResults from './SearchResults';\nimport { useNavigate } from 'react-router-dom';\n\ninterface SearchBoxProps {\n  className?: string;\n  placeholder?: string;\n  onClose?: () => void;\n  isExpanded?: boolean;\n}\n\nconst SearchBox: React.FC<SearchBoxProps> = ({\n  className = '',\n  placeholder = 'Поиск по сайту...',\n  onClose,\n  isExpanded = false\n}) => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<SearchResult[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFocused, setIsFocused] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const resultsRef = useRef<HTMLDivElement>(null);\n  const navigate = useNavigate();\n\n  const handleSearch = (searchQuery: string) => {\n    setQuery(searchQuery);\n    setIsLoading(true);\n    \n    // Simulate API delay\n    setTimeout(() => {\n      const searchResults = searchContent(searchQuery);\n      setResults(searchResults);\n      setIsLoading(false);\n    }, 300);\n  };\n\n  const handleClear = () => {\n    setQuery('');\n    setResults([]);\n    inputRef.current?.focus();\n  };\n\n  const handleResultClick = () => {\n    // Close search dropdown\n    setQuery('');\n    setResults([]);\n    setIsFocused(false);\n    onClose?.();\n  };\n\n  useEffect(() => {\n    // Focus input when expanded\n    if (isExpanded) {\n      inputRef.current?.focus();\n    }\n  }, [isExpanded]);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        resultsRef.current && \n        !resultsRef.current.contains(event.target as Node) &&\n        inputRef.current &&\n        !inputRef.current.contains(event.target as Node)\n      ) {\n        setIsFocused(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  return (\n    <div className={`relative ${className}`}>\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n        <Input\n          ref={inputRef}\n          type=\"search\"\n          placeholder={placeholder}\n          className=\"pl-10 pr-10 bg-cyberdark-800 border-cyberdark-700 text-sm\"\n          value={query}\n          onChange={(e) => handleSearch(e.target.value)}\n          onFocus={() => setIsFocused(true)}\n        />\n        {query && (\n          <button\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white\"\n            onClick={handleClear}\n          >\n            <X className=\"h-4 w-4\" />\n          </button>\n        )}\n      </div>\n\n      {(isFocused && (query || isLoading)) && (\n        <div \n          ref={resultsRef}\n          className=\"absolute z-10 mt-1 w-full bg-cyberdark-900 border border-cyberdark-700 rounded-md shadow-lg overflow-hidden\"\n        >\n          <SearchResults \n            results={results} \n            isLoading={isLoading} \n            onResultClick={handleResultClick} \n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SearchBox;\n","size_bytes":3336},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"client/src/lib/api.ts":{"content":"// API client for server-side authentication\ninterface AuthResponse {\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    avatar?: string;\n    role: string;\n    points: number;\n    level: number;\n  };\n  token: string;\n}\n\nclass ApiClient {\n  private baseUrl = '/api';\n  private token: string | null = null;\n\n  constructor() {\n    this.token = localStorage.getItem('auth_token');\n  }\n\n  setToken(token: string) {\n    this.token = token;\n    localStorage.setItem('auth_token', token);\n  }\n\n  clearToken() {\n    this.token = null;\n    localStorage.removeItem('auth_token');\n  }\n\n  private async request(endpoint: string, options: RequestInit = {}) {\n    const url = `${this.baseUrl}${endpoint}`;\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...(options.headers as Record<string, string>),\n    };\n\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers,\n    });\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ message: 'Network error' }));\n      throw new Error(error.message || 'Request failed');\n    }\n\n    return response.json();\n  }\n\n  async register(username: string, email: string, password: string): Promise<AuthResponse> {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify({ username, email, password }),\n    });\n  }\n\n  async login(email: string, password: string): Promise<AuthResponse> {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    });\n  }\n\n  async getMe() {\n    return this.request('/auth/me');\n  }\n\n  async updateProfile(updates: any) {\n    return this.request('/auth/profile', {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  }\n\n  async chat(message: string, history: any[] = []) {\n    return this.request('/chat', {\n      method: 'POST',\n      body: JSON.stringify({ message, history }),\n    });\n  }\n}\n\nexport const apiClient = new ApiClient();","size_bytes":2094},"client/src/lib/auth/utils.ts":{"content":"import { User } from '@/types';\nimport { apiClient } from '@/lib/api';\n\nexport const handleUserLogin = async (authData: any): Promise<User | null> => {\n  try {\n    if (!authData || !authData.user) {\n      console.error('No auth data provided to handleUserLogin');\n      return null;\n    }\n    \n    const user = authData.user;\n    console.log('Processing user:', user.id);\n    \n    const mappedUser: User = {\n      id: user.id.toString(),\n      username: user.username,\n      email: user.email,\n      avatar: user.avatar,\n      role: user.role || 'user',\n      points: user.points || 0,\n      level: user.level || 1,\n      createdAt: new Date()\n    };\n    \n    console.log('Mapped user:', mappedUser);\n    return mappedUser;\n  } catch (err) {\n    console.error('Error in handleUserLogin:', err);\n    return null;\n  }\n};\n\nexport const getCurrentUser = async (): Promise<User | null> => {\n  try {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      return null;\n    }\n\n    apiClient.setToken(token);\n    const userData = await apiClient.getMe();\n    \n    if (!userData) {\n      return null;\n    }\n\n    const mappedUser: User = {\n      id: userData.id.toString(),\n      username: userData.username,\n      email: userData.email,\n      avatar: userData.avatar,\n      role: userData.role || 'user',\n      points: userData.points || 0,\n      level: userData.level || 1,\n      createdAt: new Date()\n    };\n\n    return mappedUser;\n  } catch (err) {\n    console.error('Error getting current user:', err);\n    apiClient.clearToken();\n    return null;\n  }\n};\n\nexport const getAvatarFallbackText = (username: string): string => {\n  if (!username) return 'UN';\n  \n  const nameParts = username.split(' ');\n  if (nameParts.length > 1) {\n    return `${nameParts[0].charAt(0)}${nameParts[1].charAt(0)}`.toUpperCase();\n  }\n  \n  return username.substring(0, 2).toUpperCase();\n};\n","size_bytes":1884},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/settings/index.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { useAuth } from '@/lib/auth';\nimport { supabase } from '@/integrations/supabase/client';\nimport { toast } from '@/components/ui/use-toast';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardFooter, \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport { \n  Tabs, \n  TabsContent, \n  TabsList, \n  TabsTrigger \n} from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Separator } from '@/components/ui/separator';\nimport { Switch } from '@/components/ui/switch';\nimport { Loader2, User, Settings, Shield, Bell, Lock } from 'lucide-react';\n\nexport default function SettingsPage() {\n  const { user, isLoading } = useAuth();\n  const [saving, setSaving] = useState(false);\n  \n  // Форма профиля\n  const [username, setUsername] = useState(user?.username || '');\n  const [avatarUrl, setAvatarUrl] = useState(user?.avatar || '');\n  \n  // Настройки уведомлений\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [securityAlerts, setSecurityAlerts] = useState(true);\n  \n  // Смена пароля\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-cyberdark-900 p-4\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-cyberblue-500 mb-4\" />\n        <p className=\"text-gray-400\">Загрузка настроек...</p>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-cyberdark-900 p-4\">\n        <div className=\"text-center\">\n          <Settings className=\"h-12 w-12 text-gray-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-white mb-2\">Настройки недоступны</h2>\n          <p className=\"text-gray-400 mb-6\">Войдите в аккаунт, чтобы получить доступ к настройкам</p>\n        </div>\n      </div>\n    );\n  }\n\n  const updateProfile = async () => {\n    setSaving(true);\n    \n    try {\n      const { error } = await supabase\n        .from('profiles')\n        .update({\n          username,\n          avatar_url: avatarUrl,\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', user.id);\n      \n      if (error) throw error;\n      \n      toast({\n        title: \"Профиль обновлен\",\n        description: \"Ваши изменения успешно сохранены\",\n      });\n    } catch (err) {\n      console.error('Error updating profile:', err);\n      toast({\n        variant: \"destructive\",\n        title: \"Ошибка обновления профиля\",\n        description: \"Не удалось сохранить изменения\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const updatePassword = async () => {\n    setSaving(true);\n    \n    try {\n      if (newPassword !== confirmPassword) {\n        throw new Error('Пароли не совпадают');\n      }\n      \n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      \n      if (error) throw error;\n      \n      setCurrentPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n      \n      toast({\n        title: \"Пароль обновлен\",\n        description: \"Ваш пароль успешно изменен\",\n      });\n    } catch (err: any) {\n      console.error('Error updating password:', err);\n      toast({\n        variant: \"destructive\",\n        title: \"Ошибка обновления пароля\",\n        description: err.message || \"Не удалось сохранить новый пароль\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const updateNotifications = async () => {\n    setSaving(true);\n    \n    try {\n      // Здесь должен быть код для сохранения настроек уведомлений\n      // Но для демо просто имитируем успешное сохранение\n      \n      toast({\n        title: \"Настройки обновлены\",\n        description: \"Параметры уведомлений успешно сохранены\",\n      });\n    } catch (err: any) {\n      console.error('Error updating notifications:', err);\n      toast({\n        variant: \"destructive\",\n        title: \"Ошибка обновления настроек\",\n        description: \"Не удалось сохранить параметры уведомлений\",\n      });\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 pt-20 pb-10 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-white\">Настройки аккаунта</h1>\n          <p className=\"text-gray-400 mt-2\">Управляйте своим профилем, безопасностью и предпочтениями</p>\n        </div>\n\n        <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n          <TabsList className=\"bg-cyberdark-800 border border-cyberdark-700\">\n            <TabsTrigger value=\"profile\" className=\"data-[state=active]:bg-cyberdark-700\">\n              <User className=\"h-4 w-4 mr-2\" />\n              Профиль\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"data-[state=active]:bg-cyberdark-700\">\n              <Shield className=\"h-4 w-4 mr-2\" />\n              Безопасность\n            </TabsTrigger>\n            <TabsTrigger value=\"notifications\" className=\"data-[state=active]:bg-cyberdark-700\">\n              <Bell className=\"h-4 w-4 mr-2\" />\n              Уведомления\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"profile\">\n            <Card className=\"bg-cyberdark-800 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Информация профиля</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Обновите личную информацию вашего аккаунта\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"flex items-center space-x-4\">\n                  <Avatar className=\"h-16 w-16 rounded-full border border-cyberdark-600\">\n                    <AvatarImage src={avatarUrl} alt={username} />\n                    <AvatarFallback className=\"bg-cyberdark-700 text-white\">\n                      {username.substring(0, 2).toUpperCase()}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"text-sm font-medium text-white\">Аватар профиля</h3>\n                    <p className=\"text-xs text-gray-400 mb-2\">JPG, GIF или PNG. Макс. размер 2MB</p>\n                    <Button variant=\"outline\" size=\"sm\" className=\"bg-cyberdark-700 text-white border-cyberdark-600\">\n                      Изменить аватар\n                    </Button>\n                  </div>\n                </div>\n\n                <Separator className=\"bg-cyberdark-700\" />\n\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"username\" className=\"text-white\">Имя пользователя</Label>\n                    <Input\n                      id=\"username\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      className=\"bg-cyberdark-700 border-cyberdark-600\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\" className=\"text-white\">Email</Label>\n                    <Input\n                      id=\"email\"\n                      value={user.email}\n                      disabled\n                      className=\"bg-cyberdark-700 border-cyberdark-600 opacity-70\"\n                    />\n                    <p className=\"text-xs text-gray-400\">\n                      Ваш email используется для входа и не может быть изменен\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  onClick={updateProfile} \n                  disabled={saving}\n                  className=\"bg-cyberblue-500 hover:bg-cyberblue-600\"\n                >\n                  {saving ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Сохранение...\n                    </>\n                  ) : (\n                    'Сохранить изменения'\n                  )}\n                </Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"security\">\n            <Card className=\"bg-cyberdark-800 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Смена пароля</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Обновите пароль для повышения безопасности аккаунта\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"current-password\" className=\"text-white\">Текущий пароль</Label>\n                  <Input\n                    id=\"current-password\"\n                    type=\"password\"\n                    value={currentPassword}\n                    onChange={(e) => setCurrentPassword(e.target.value)}\n                    className=\"bg-cyberdark-700 border-cyberdark-600\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-password\" className=\"text-white\">Новый пароль</Label>\n                  <Input\n                    id=\"new-password\"\n                    type=\"password\"\n                    value={newPassword}\n                    onChange={(e) => setNewPassword(e.target.value)}\n                    className=\"bg-cyberdark-700 border-cyberdark-600\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirm-password\" className=\"text-white\">Подтвердите новый пароль</Label>\n                  <Input\n                    id=\"confirm-password\"\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    className=\"bg-cyberdark-700 border-cyberdark-600\"\n                  />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  onClick={updatePassword} \n                  disabled={saving || !currentPassword || !newPassword || !confirmPassword}\n                  className=\"bg-cyberblue-500 hover:bg-cyberblue-600\"\n                >\n                  {saving ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Сохранение...\n                    </>\n                  ) : (\n                    'Обновить пароль'\n                  )}\n                </Button>\n              </CardFooter>\n            </Card>\n\n            <Card className=\"bg-cyberdark-800 border-cyberdark-700 mt-6\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Двухфакторная аутентификация</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Добавьте дополнительный уровень защиты для вашего аккаунта\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"p-2 rounded-full bg-cyberdark-700\">\n                      <Lock className=\"h-6 w-6 text-gray-400\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-white\">Двухфакторная аутентификация</p>\n                      <p className=\"text-sm text-gray-400\">Защитите аккаунт с помощью 2FA</p>\n                    </div>\n                  </div>\n                  <Button variant=\"outline\" className=\"bg-cyberdark-700 text-white border-cyberdark-600\">\n                    Настроить\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"notifications\">\n            <Card className=\"bg-cyberdark-800 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Настройки уведомлений</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Настройте, какие уведомления вы хотите получать\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-white\">Email-уведомления</p>\n                      <p className=\"text-sm text-gray-400\">Получать уведомления по email</p>\n                    </div>\n                    <Switch \n                      checked={emailNotifications} \n                      onCheckedChange={setEmailNotifications} \n                    />\n                  </div>\n\n                  <Separator className=\"bg-cyberdark-700\" />\n\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-white\">Уведомления о безопасности</p>\n                      <p className=\"text-sm text-gray-400\">Получать уведомления о важных событиях безопасности</p>\n                    </div>\n                    <Switch \n                      checked={securityAlerts} \n                      onCheckedChange={setSecurityAlerts} \n                    />\n                  </div>\n\n                  <Separator className=\"bg-cyberdark-700\" />\n                </div>\n              </CardContent>\n              <CardFooter>\n                <Button \n                  onClick={updateNotifications} \n                  disabled={saving}\n                  className=\"bg-cyberblue-500 hover:bg-cyberblue-600\"\n                >\n                  {saving ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Сохранение...\n                    </>\n                  ) : (\n                    'Сохранить настройки'\n                  )}\n                </Button>\n              </CardFooter>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":15985},"server/storage.ts":{"content":"import { eq, and, gt } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport { users, challenges, type User, type InsertUser, type Challenge, type InsertChallenge } from \"@shared/schema\";\n\nexport interface IStorage {\n  // User management\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<User>): Promise<User | undefined>;\n  verifyUserEmail(userId: number): Promise<void>;\n  setVerificationCode(userId: number, code: string): Promise<void>;\n  getUserByVerificationCode(code: string): Promise<User | undefined>;\n  setResetPasswordCode(email: string, code: string, expires: Date): Promise<void>;\n  getUserByResetCode(code: string): Promise<User | undefined>;\n  \n  // Challenge management\n  getAllChallenges(): Promise<Challenge[]>;\n  getChallenge(id: number): Promise<Challenge | undefined>;\n  createChallenge(challenge: InsertChallenge): Promise<Challenge>;\n  updateChallenge(id: number, updates: Partial<Challenge>): Promise<Challenge | undefined>;\n  deleteChallenge(id: number): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User management methods\n  async getUser(id: number): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(insertUser).returning();\n    return result[0];\n  }\n\n  async updateUser(id: number, updates: Partial<User>): Promise<User | undefined> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  async verifyUserEmail(userId: number): Promise<void> {\n    await db.update(users)\n      .set({ emailVerified: true, verificationCode: null })\n      .where(eq(users.id, userId));\n  }\n\n  async setVerificationCode(userId: number, code: string): Promise<void> {\n    await db.update(users)\n      .set({ verificationCode: code })\n      .where(eq(users.id, userId));\n  }\n\n  async getUserByVerificationCode(code: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.verificationCode, code));\n    return result[0];\n  }\n\n  async setResetPasswordCode(email: string, code: string, expires: Date): Promise<void> {\n    await db.update(users)\n      .set({ resetPasswordCode: code, resetPasswordExpires: expires })\n      .where(eq(users.email, email));\n  }\n\n  async getUserByResetCode(code: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(\n      and(\n        eq(users.resetPasswordCode, code),\n        gt(users.resetPasswordExpires, new Date())\n      )\n    );\n    return result[0];\n  }\n\n  // Challenge management methods\n  async getAllChallenges(): Promise<Challenge[]> {\n    const result = await db.select().from(challenges).where(eq(challenges.isActive, true));\n    return result;\n  }\n\n  async getChallenge(id: number): Promise<Challenge | undefined> {\n    const result = await db.select().from(challenges).where(eq(challenges.id, id));\n    return result[0];\n  }\n\n  async createChallenge(challenge: InsertChallenge): Promise<Challenge> {\n    const result = await db.insert(challenges).values(challenge).returning();\n    return result[0];\n  }\n\n  async updateChallenge(id: number, updates: Partial<Challenge>): Promise<Challenge | undefined> {\n    const result = await db.update(challenges).set(updates).where(eq(challenges.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteChallenge(id: number): Promise<void> {\n    await db.update(challenges).set({ isActive: false }).where(eq(challenges.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4219},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/ctf/index.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { \n  Filter, \n  Search, \n  ArrowRight, \n  Trophy, \n  Code, \n  Cpu, \n  BookOpen, \n  Shield, \n  Clock, \n  Users,\n  Link as LinkIcon\n} from 'lucide-react';\nimport { useAuth } from '@/lib/auth';\nimport { ChallengeCategory } from '@/types';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\nimport { toast } from '@/hooks/use-toast';\nimport { mockChallenges } from '@/data/challenges';\n\nconst categoryIcons: Record<ChallengeCategory, React.ReactNode> = {\n  web: <Code className=\"w-5 h-5\" />,\n  crypto: <Shield className=\"w-5 h-5\" />,\n  osint: <Search className=\"w-5 h-5\" />,\n  steganography: <Search className=\"w-5 h-5\" />,\n  'reverse-engineering': <Cpu className=\"w-5 h-5\" />,\n  forensics: <Search className=\"w-5 h-5\" />,\n  pwn: <Shield className=\"w-5 h-5\" />,\n  programming: <Code className=\"w-5 h-5\" />,\n  network: <Shield className=\"w-5 h-5\" />,\n};\n\nconst categoryNames: Record<ChallengeCategory, string> = {\n  web: 'Веб-безопасность',\n  crypto: 'Криптография',\n  osint: 'OSINT',\n  steganography: 'Стеганография',\n  'reverse-engineering': 'Реверс-инжиниринг',\n  forensics: 'Форензика',\n  pwn: 'PWN',\n  programming: 'Программирование',\n  network: 'Сетевая безопасность',\n};\n\nconst categoryDescriptions: Record<ChallengeCategory, string> = {\n  web: 'Исследуйте уязвимости веб-приложений, включая SQL-инъекции, XSS и CSRF атаки, недостатки аутентификации и авторизации.',\n  crypto: 'Решайте задачи на расшифровку сообщений, анализ криптографических алгоритмов и поиск уязвимостей в их реализации.',\n  osint: 'Находите информацию из открытых источников для решения заданий, используя методы поиска и анализа данных.',\n  steganography: 'Извлекайте скрытую информацию из различных файлов, включая изображения, аудио и видео.',\n  'reverse-engineering': 'Анализируйте бинарные файлы и исходный код для понимания их функциональности и поиска уязвимостей.',\n  forensics: 'Проводите цифровую криминалистику, анализируя образы дисков, сетевой трафик и другие артефакты.',\n  pwn: 'Используйте уязвимости в исполняемых файлах для получения контроля над системой.',\n  programming: 'Создавайте скрипты и программы для автоматизации решения заданий и анализа данных.',\n  network: 'Анализируйте сетевой трафик, протоколы и настройки для обнаружения и эксплуатации уязвимостей.',\n};\n\nconst getCategoryChallengesCount = (category: ChallengeCategory) => {\n  return mockChallenges.filter(challenge => challenge.category === category).length;\n};\n\nexport default function CTFPlatform() {\n  const { user, isLoading } = useAuth();\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterCategory, setFilterCategory] = useState<ChallengeCategory | 'all'>('all');\n  \n  const categoriesToShow = Object.keys(categoryNames).filter(category => {\n    const count = getCategoryChallengesCount(category as ChallengeCategory);\n    return count > 0;\n  }) as ChallengeCategory[];\n\n  const handleStartChallenge = () => {\n    if (!user) {\n      toast({\n        title: \"Требуется авторизация\",\n        description: \"Для начала выполнения заданий необходимо войти в систему\",\n        variant: \"destructive\",\n      });\n      navigate('/login?returnUrl=/ctf');\n      return;\n    }\n    \n    toast({\n      title: \"Начато новое задание\",\n      description: \"Удачи в решении!\",\n      variant: \"default\",\n    });\n    \n    navigate(`/ctf/challenge/1`);\n  };\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Гостевой режим\",\n        description: \"Для решения заданий необходимо войти в систему\",\n        variant: \"default\",\n      });\n    }\n  }, [user, isLoading]);\n\n  const handleCategoryClick = (category: ChallengeCategory) => {\n    if (!user && !isLoading) {\n      toast({\n        title: \"Требуется авторизация\",\n        description: \"Для доступа к заданиям необходимо войти в систему\",\n        variant: \"destructive\",\n      });\n      navigate('/login?returnUrl=/ctf/category/' + category);\n      return;\n    }\n    \n    navigate(`/ctf/category/${category}`);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <Navbar />\n      \n      <div className=\"pt-20 flex-grow\">\n        <div className=\"bg-cyberdark-800\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n            <div className=\"md:flex md:items-center md:justify-between\">\n              <div className=\"md:w-2/3\">\n                <h1 className=\"text-3xl font-bold text-white sm:text-4xl\">\n                  <span className=\"block text-cyberblue-400\">CTF ПЛАТФОРМА</span>\n                  <span className=\"block mt-1\">Проверьте свои навыки в реальных сценариях</span>\n                </h1>\n                <p className=\"mt-3 text-lg text-gray-300\">\n                  Наша CTF платформа предлагает разнообразные задания по кибербезопасности, от начального до продвинутого уровня. \n                  Решайте задачи, зарабатывайте очки и соревнуйтесь с другими участниками.\n                </p>\n                <div className=\"mt-6 flex\">\n                  <Button \n                    className=\"bg-cyberblue-500 hover:bg-cyberblue-600\"\n                    onClick={() => {\n                      if (!user && !isLoading) {\n                        toast({\n                          title: \"Требуется авторизация\",\n                          description: \"Для доступа к заданиям необходимо войти в систему\",\n                          variant: \"destructive\",\n                        });\n                        navigate('/login?returnUrl=/ctf');\n                        return;\n                      }\n                      const firstCategory = categoriesToShow[0];\n                      navigate(`/ctf/category/${firstCategory}`);\n                    }}\n                  >\n                    Начать решать задания\n                    <ArrowRight className=\"ml-2 w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n              \n              <div className=\"hidden md:block md:w-1/3 mt-8 md:mt-0\">\n                <div className=\"bg-cyberdark-700 rounded-lg p-6 text-center border border-cyberdark-600\">\n                  <h3 className=\"text-xl font-semibold text-white mb-4\">Статистика платформы</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"bg-cyberdark-800 p-4 rounded-md\">\n                      <div className=\"text-2xl font-bold text-white\">{mockChallenges.length}+</div>\n                      <div className=\"text-sm text-gray-400\">Активных заданий</div>\n                    </div>\n                    <div className=\"bg-cyberdark-800 p-4 rounded-md\">\n                      <div className=\"text-2xl font-bold text-white\">500+</div>\n                      <div className=\"text-sm text-gray-400\">Участников</div>\n                    </div>\n                    <div className=\"bg-cyberdark-800 p-4 rounded-md\">\n                      <div className=\"text-2xl font-bold text-white\">{categoriesToShow.length}</div>\n                      <div className=\"text-sm text-gray-400\">Категорий</div>\n                    </div>\n                    <div className=\"bg-cyberdark-800 p-4 rounded-md\">\n                      <div className=\"text-2xl font-bold text-white\">4</div>\n                      <div className=\"text-sm text-gray-400\">Уровня сложности</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"md:flex md:items-center md:justify-between mb-8\">\n            <h2 className=\"text-2xl font-bold text-white\">Категории заданий</h2>\n            <p className=\"mt-2 md:mt-0 text-gray-400\">\n              Выберите категорию, чтобы перейти к соответствующим заданиям\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-16\">\n            {categoriesToShow.map((category) => (\n              <div \n                key={category}\n                className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm\"\n              >\n                <div className=\"p-6\">\n                  <div className=\"flex items-center space-x-3 mb-4\">\n                    <div className=\"bg-cyberdark-700 rounded-full p-2\">\n                      {categoryIcons[category]}\n                    </div>\n                    <h3 className=\"text-xl font-bold text-white\">{categoryNames[category]}</h3>\n                  </div>\n                  \n                  <p className=\"text-gray-300 mb-6 min-h-[4rem]\">\n                    {categoryDescriptions[category]}\n                  </p>\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"bg-cyberdark-700 px-2 py-1 rounded text-sm text-gray-300\">\n                        {getCategoryChallengesCount(category)} заданий\n                      </div>\n                    </div>\n                    \n                    <Button \n                      onClick={() => handleCategoryClick(category)}\n                      variant=\"outline\"\n                    >\n                      Перейти к кейсам\n                      <ArrowRight className=\"ml-2 w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-16 grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n              <div className=\"bg-cyberdark-700 inline-flex items-center justify-center p-3 rounded-lg mb-4\">\n                <Code className=\"h-6 w-6 text-cyberblue-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Практические навыки</h3>\n              <p className=\"text-gray-300\">\n                Развивайте практические навыки кибербезопасности в безопасной среде с реалистичными сценариями.\n              </p>\n            </div>\n            \n            <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n              <div className=\"bg-cyberdark-700 inline-flex items-center justify-center p-3 rounded-lg mb-4\">\n                <Trophy className=\"h-6 w-6 text-cyberblue-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Соревнования</h3>\n              <p className=\"text-gray-300\">\n                Участвуйте в регулярных соревнованиях, сравнивайте свои результаты с другими и выигрывайте призы.\n              </p>\n            </div>\n            \n            <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n              <div className=\"bg-cyberdark-700 inline-flex items-center justify-center p-3 rounded-lg mb-4\">\n                <BookOpen className=\"h-6 w-6 text-cyberblue-400\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Обучение</h3>\n              <p className=\"text-gray-300\">\n                Изучайте новые концепции и техники кибербезопасности через практические задания и подробные разборы.\n              </p>\n            </div>\n          </div>\n\n          <div className=\"mt-16 bg-gradient-to-r from-cyberdark-800 to-cyberdark-900 rounded-lg overflow-hidden border border-cyberdark-700\">\n            <div className=\"md:flex\">\n              <div className=\"p-8 md:w-2/3\">\n                <div className=\"flex items-center mb-4\">\n                  <Clock className=\"h-5 w-5 text-cyberblue-400 mr-2\" />\n                  <span className=\"text-sm font-medium text-cyberblue-400\">Следующая неделя, 18:00 МСК</span>\n                </div>\n                <h3 className=\"text-2xl font-bold text-white mb-3\">CTF Соревнование</h3>\n                <p className=\"text-gray-300 mb-6\">\n                  Примите участие в нашем ежемесячном CTF соревновании. Решайте уникальные задачи, соревнуйтесь с другими участниками и выигрывайте ценные призы. Подходит для всех уровней подготовки.\n                </p>\n                <Button \n                  className=\"bg-cyberblue-500 hover:bg-cyberblue-600\" \n                  onClick={() => {\n                    if (!user && !isLoading) {\n                      toast({\n                        title: \"Требуется авторизация\",\n                        description: \"Для регистрации необходимо войти в систему\",\n                        variant: \"destructive\",\n                      });\n                      navigate('/login?returnUrl=/ctf');\n                      return;\n                    }\n                    toast({\n                      title: \"Регистрация открыта\",\n                      description: \"Вы успешно зарегистрированы на соревнование!\",\n                      variant: \"default\",\n                    });\n                  }}\n                >\n                  Зарегистрироваться\n                </Button>\n              </div>\n              <div className=\"md:w-1/3 bg-cyberdark-700 flex items-center justify-center p-8\">\n                <div className=\"text-center\">\n                  <Trophy className=\"h-16 w-16 text-yellow-500 mx-auto mb-4\" />\n                  <h4 className=\"text-lg font-semibold text-white mb-2\">1-е место</h4>\n                  <p className=\"text-gray-300\">5000 очков + VIP доступ на 1 месяц</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ChatAssistant />\n    </div>\n  );\n}\n","size_bytes":16029},"client/src/data/challengeData.ts":{"content":"export const challengeHints: Record<string, string[]> = {\n  '1': [\n    'Изучите документацию по JWT и его структуре (header.payload.signature)',\n    'Обратите внимание на алгоритм подписи JWT токена',\n    'Попробуйте использовать jwt_tool или jwt.io для анализа и манипуляции с токеном',\n    'Слабый секрет может быть уязвим к брутфорс-атаке или словарной атаке',\n  ],\n  '2': [\n    'Изучите метаданные изображения с помощью специальных инструментов',\n    'Проверьте наличие скрытой информации в младших битах изображения (LSB стеганография)',\n    'Попробуйте изменить контрастность или цветовые каналы изображения',\n  ],\n  '3': [\n    'Обратите внимание на подсказку о \"названии команды\" (CyberWhale) и цикличности алфавита',\n    'Подсчитайте сумму позиций букв в названии CyberWhale в английском алфавите',\n    'Помните, что шифр Цезаря использует циклический сдвиг букв алфавита',\n  ],\n  '4': [\n    'Используйте декомпилятор для анализа бинарного файла',\n    'Обратите внимание на строковые константы в коде',\n    'Проверьте функции проверки ввода пользователя',\n  ],\n  '5': [\n    'Используйте Wireshark для анализа pcap-файла',\n    'Обратите внимание на необычные HTTP-запросы',\n    'Проверьте заголовки пакетов на наличие скрытой информации',\n  ],\n  '6': [\n    'Проанализируйте входные данные, которые приводят к переполнению буфера',\n    'Найдите адрес возврата функции в памяти',\n    'Подготовьте payload с шеллкодом для выполнения',\n  ],\n  '7': [\n    'Внимательно изучите подсказку в файле hint.txt о комбинации названия компании и цифры',\n    'Для вычисления ASCII-значений букв можно использовать таблицу ASCII или функции языков программирования',\n    'После распаковки архива, обратите внимание на формат зашифрованных данных - это может быть Base64 с AES-шифрованием',\n  ],\n  '8': [\n    'Начните с анализа заметок в notes.txt, они могут содержать ключи или подсказки',\n    'Проверьте сетевой трафик с помощью Wireshark, ищите необычные пакеты или закономерности',\n    'Для работы с зашифрованным изображением может потребоваться использовать инструменты стеганографии',\n  ],\n  '9': [\n    'Проанализируйте, как формируется SQL-запрос к базе данных при поиске сотрудников',\n    'Попробуйте разные символы, которые могут нарушить структуру SQL-запроса (например, одинарная кавычка)',\n    'Изучите, как можно использовать оператор UNION для объединения результатов нескольких запросов',\n    'Подумайте, где может храниться структура базы данных в SQLite',\n  ],\n  '10': [\n    'Проверьте форму входа на SQL-инъекции. Попробуйте использовать комментарии для обхода проверки (например, --).',\n    'Исследуйте API-эндпоинты на наличие уязвимостей CORS. Попробуйте запросы с другими доменами.',\n    'Используйте SSRF для доступа к внутреннему серверу. Проверьте порт 8080 через URL-параметр.',\n    'Флаг спрятан в PCAP-файле. Скачайте его через уязвимость и проанализируйте в Wireshark.',\n  ],\n};\n\nexport const challengeFlags: Record<string, string> = {\n  '1': 'CTF{Ph4nt0m_V4u1t_Expl01t_MASTER}',\n  '2': 'CW{H1dd3n_1n_pl41n_s1ght}',\n  '3': 'CW{SecretFound}',\n  '4': 'CW{R3v3rs1ng_Ch4mp}',\n  '5': 'CW{P4ck3t_4n4lyst}',\n  '6': 'CW{Buff3r_0v3rfl0w_pr0}',\n  '7': 'CW{HiddenInPlainSight}',\n  '8': 'CW{Caesar_AES_Stego}',\n  '9': 'CW{HR_Leak_Protection_Fail}',\n  '10': 'CW{550e8400-e29b-41d4-a716-446655440000}',\n};","size_bytes":5236},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/pages/ctf/AddChallenge.tsx":{"content":"import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { mockChallenges, Challenge } from '@/data/challenges';\nimport { challengeHints, challengeFlags } from '@/data/challengeData';\n\n// Интерфейс для входных данных JSON\ninterface ChallengeInput {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  difficulty: string;\n  points: number;\n  tags: string[];\n  solved: boolean;\n  solvedBy: number;\n  createdAt: string;\n  updatedAt: string;\n  downloadUrl: string;\n  fileType: string;\n  hints: string[];\n  flag: string;\n}\n\nexport default function AddChallenge() {\n  const navigate = useNavigate();\n\n  const handleTestImport = () => {\n    fetch('/test-challenge.json', { method: 'GET' })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`Не удалось загрузить файл (статус: ${response.status})`);\n        }\n        alert('Файл успешно загружен, парсим JSON...');\n        return response.json();\n      })\n      .then((json: ChallengeInput[]) => {\n        alert(`Получен JSON: ${JSON.stringify(json, null, 2)}`);\n        if (!Array.isArray(json)) {\n          throw new Error('JSON должен быть массивом');\n        }\n\n        const newChallenges: Challenge[] = json.map((item: ChallengeInput) => {\n          alert(`Проверяем кейс: ${JSON.stringify(item)}`);\n          if (!item.id || !item.title || !item.description || !item.category || !item.difficulty || !item.points || !item.tags || !item.solvedBy) {\n            throw new Error('Некорректный формат кейса: отсутствуют обязательные поля');\n          }\n\n          if (!item.hints || !Array.isArray(item.hints) || item.hints.length === 0) {\n            throw new Error(`Кейс с ID ${item.id} должен содержать массив подсказок (hints)`);\n          }\n          if (!item.flag || typeof item.flag !== 'string') {\n            throw new Error(`Кейс с ID ${item.id} должен содержать флаг (flag) в виде строки`);\n          }\n\n          return {\n            id: item.id,\n            title: item.title,\n            description: item.description,\n            category: item.category,\n            difficulty: item.difficulty,\n            points: item.points,\n            tags: item.tags,\n            solved: item.solved !== undefined ? item.solved : false,\n            solvedBy: item.solvedBy,\n            createdAt: item.createdAt ? new Date(item.createdAt) : new Date(),\n            updatedAt: item.updatedAt ? new Date(item.updatedAt) : new Date(),\n            downloadUrl: item.downloadUrl || '',\n            fileType: item.fileType || '',\n          };\n        });\n\n        const existingIds = new Set(mockChallenges.map(c => c.id));\n        for (const challenge of newChallenges) {\n          if (existingIds.has(challenge.id)) {\n            throw new Error(`Кейс с ID ${challenge.id} уже существует`);\n          }\n        }\n\n        mockChallenges.push(...newChallenges);\n\n        json.forEach((item: ChallengeInput) => {\n          challengeHints[item.id] = item.hints;\n          challengeFlags[item.id] = item.flag;\n        });\n\n        alert(`Кейсы импортированы. Успешно добавлено ${newChallenges.length} новых кейсов`);\n        navigate('/ctf');\n      })\n      .catch((error: Error) => {\n        alert(`Ошибка импорта: ${error.message}`);\n      });\n  };\n\n  return (\n    <div style={{ padding: '20px', backgroundColor: '#111827', color: '#e5e7eb' }}>\n      <Link to=\"/ctf\" style={{ color: '#60a5fa', display: 'flex', alignItems: 'center' }}>\n        <span style={{ marginRight: '8px' }}>←</span> Назад к CTF платформе\n      </Link>\n\n      <div style={{ backgroundColor: '#1f2937', borderRadius: '8px', padding: '24px', marginTop: '24px' }}>\n        <h1 style={{ fontSize: '24px', fontWeight: 'bold', color: 'white', marginBottom: '16px' }}>\n          Импорт новых кейсов\n        </h1>\n        <p style={{ color: '#d1d5db', marginBottom: '24px' }}>\n          Нажмите кнопку ниже, чтобы протестировать импорт тестового кейса из файла внутри проекта.\n        </p>\n\n        <button\n          onClick={handleTestImport}\n          style={{\n            backgroundColor: '#3b82f6',\n            color: 'white',\n            padding: '8px 16px',\n            borderRadius: '4px',\n            display: 'inline-flex',\n            alignItems: 'center',\n            cursor: 'pointer',\n          }}\n        >\n          <span style={{ marginRight: '8px' }}>↑</span> Тестовый импорт\n        </button>\n\n        <div style={{ marginTop: '24px', backgroundColor: '#374151', padding: '16px', borderRadius: '8px', color: '#d1d5db' }}>\n          <h3 style={{ fontSize: '18px', fontWeight: '600', marginBottom: '8px' }}>\n            Пример формата JSON:\n          </h3>\n          <pre style={{ fontSize: '14px', whiteSpace: 'pre-wrap' }}>\n{`[\n  {\n    \"id\": \"11\",\n    \"title\": \"Тестовый кейс\",\n    \"description\": \"Это тестовый кейс для проверки импорта.\",\n    \"category\": \"web\",\n    \"difficulty\": \"beginner\",\n    \"points\": 100,\n    \"tags\": [\"web\", \"test\"],\n    \"solved\": false,\n    \"solvedBy\": 0,\n    \"createdAt\": \"2025-05-18\",\n    \"updatedAt\": \"2025-05-18\",\n    \"downloadUrl\": \"https://example.com/test.zip\",\n    \"fileType\": \"archive\",\n    \"hints\": [\n      \"Проверьте первую подсказку.\",\n      \"Попробуйте вторую подсказку.\"\n    ],\n    \"flag\": \"CW{TestFlag123}\"\n  }\n]`}\n          </pre>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5876},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/lib/chat.ts":{"content":"import { apiClient } from './api';\n\nexport interface Message {\n  id: string;\n  text: string;\n  isBot: boolean;\n  timestamp: Date;\n}\n\nexport class ChatService {\n  async sendMessage(message: string, history: Message[] = []): Promise<string> {\n    try {\n      const response = await apiClient.chat(message, history);\n      return response.botResponse;\n    } catch (error) {\n      console.error('Chat error:', error);\n      return 'Произошла ошибка при обработке запроса. Пожалуйста, попробуйте позже.';\n    }\n  }\n}\n\nexport const chatService = new ChatService();","size_bytes":617},"client/src/pages/products/index.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\n\nimport { \n  Shield, \n  Eye, \n  Lock, \n  Cpu, \n  Code, \n  Network, \n  Server, \n  CheckCircle, \n  Clock, \n  ChevronRight, \n  ArrowRight, \n  Search\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Product } from '@/types';\n\n// Mock products data\nconst mockProducts: Product[] = [\n  {\n    id: '1',\n    name: 'CyberWhale Scanner',\n    description: 'Интеллектуальный сканер уязвимостей с элементами ИИ для автоматического анализа безопасности веб-приложений.',\n    price: 49.99,\n    features: [\n      'Автоматическое обнаружение уязвимостей',\n      'ИИ-powered анализ рисков',\n      'Интеграция с CI/CD',\n      'Подробные отчеты'\n    ],\n    isFeatured: true,\n    isPopular: true,\n    comingSoon: false,\n    category: 'scanner'\n  },\n  {\n    id: '2',\n    name: 'CyberWhale Monitor',\n    description: 'Система мониторинга сетевой безопасности в реальном времени с продвинутой аналитикой и обнаружением аномалий.',\n    price: 79.99,\n    features: [\n      'Мониторинг в реальном времени',\n      'Обнаружение аномалий',\n      'Анализ сетевого трафика',\n      'Оповещения об инцидентах'\n    ],\n    isFeatured: true,\n    isPopular: false,\n    comingSoon: false,\n    category: 'monitor'\n  },\n  {\n    id: '3',\n    name: 'CyberWhale Crypto',\n    description: 'Инструмент для безопасного хранения и управления криптографическими ключами с поддержкой аппаратных токенов.',\n    price: 39.99,\n    features: [\n      'Управление ключами',\n      'Интеграция с HSM',\n      'Шифрование данных',\n      'Аудит доступа'\n    ],\n    isFeatured: false,\n    isPopular: false,\n    comingSoon: false,\n    category: 'crypto'\n  },\n  {\n    id: '4',\n    name: 'CyberWhale PenTest',\n    description: 'Комплексная платформа для проведения тестирования на проникновение с автоматизированными инструментами.',\n    price: 89.99,\n    features: [\n      'Автоматизированное тестирование',\n      'Готовые сценарии атак',\n      'Генерация отчетов',\n      'База данных эксплойтов'\n    ],\n    isFeatured: false,\n    isPopular: true,\n    comingSoon: false,\n    category: 'pentest'\n  },\n  {\n    id: '5',\n    name: 'CyberWhale DevSec',\n    description: 'Инструменты для безопасной разработки с интеграцией в IDE и автоматическим анализом кода.',\n    price: 0,\n    features: [\n      'Анализ исходного кода',\n      'Проверка зависимостей',\n      'Интеграция с IDE',\n      'Рекомендации по безопасности'\n    ],\n    isFeatured: false,\n    isPopular: false,\n    comingSoon: true,\n    category: 'devsec'\n  },\n  {\n    id: '6',\n    name: 'CyberWhale Network',\n    description: 'Комплексное решение для защиты корпоративных сетей с поддержкой Zero Trust архитектуры.',\n    price: 0,\n    features: [\n      'Zero Trust архитектура',\n      'Сегментация сети',\n      'Контроль доступа',\n      'Анализ угроз'\n    ],\n    isFeatured: false,\n    isPopular: false,\n    comingSoon: true,\n    category: 'network'\n  },\n];\n\n// Category icons mapping\nconst categoryIcons: Record<Product['category'], React.ReactNode> = {\n  scanner: <Shield className=\"w-6 h-6\" />,\n  monitor: <Eye className=\"w-6 h-6\" />,\n  crypto: <Lock className=\"w-6 h-6\" />,\n  pentest: <Code className=\"w-6 h-6\" />,\n  devsec: <Cpu className=\"w-6 h-6\" />,\n  network: <Network className=\"w-6 h-6\" />,\n  other: <Server className=\"w-6 h-6\" />,\n};\n\nexport default function Products() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filter, setFilter] = useState<'all' | 'featured' | 'popular' | 'coming-soon'>('all');\n  \n  // Filter products based on search and filter\n  const filteredProducts = mockProducts.filter(product => {\n    // Apply search filter\n    const matchesSearch = \n      searchQuery === '' ||\n      product.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      product.description.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    // Apply category filter\n    if (filter === 'featured' && !product.isFeatured) return false;\n    if (filter === 'popular' && !product.isPopular) return false;\n    if (filter === 'coming-soon' && !product.comingSoon) return false;\n    \n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 flex flex-col\">\n      <Navbar />\n      \n      <div className=\"pt-20 flex-grow\">\n        {/* Hero section */}\n        <div className=\"bg-gradient-to-b from-cyberdark-800 to-cyberdark-900\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n            <div className=\"text-center max-w-3xl mx-auto\">\n              <h1 className=\"text-3xl font-bold text-white sm:text-4xl mb-4\">\n                Продукты CyberWhale\n              </h1>\n              <h2 className=\"text-2xl sm:text-3xl font-bold mb-6\">\n                <span className=\"text-gradient\">Профессиональные инструменты для обеспечения кибербезопасности</span>\n              </h2>\n              <p className=\"text-lg text-gray-300 mb-8\">\n                Наши продукты созданы экспертами в области кибербезопасности и предлагают инновационные решения \n                для защиты ваших систем и данных от современных угроз.\n              </p>\n              \n              <div className=\"flex justify-center\">\n                <div className=\"relative max-w-xl w-full\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400\" />\n                  <Input\n                    type=\"search\"\n                    placeholder=\"Поиск по продуктам...\"\n                    className=\"pl-10 w-full bg-cyberdark-700 border-cyberdark-600\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          {/* Filter tabs */}\n          <Tabs \n            defaultValue=\"all\" \n            className=\"mb-10\"\n            onValueChange={(value) => setFilter(value as 'all' | 'featured' | 'popular' | 'coming-soon')}\n          >\n            <div className=\"flex justify-center\">\n              <TabsList className=\"bg-cyberdark-800\">\n                <TabsTrigger value=\"all\">Все продукты</TabsTrigger>\n                <TabsTrigger value=\"featured\">Рекомендуемые</TabsTrigger>\n                <TabsTrigger value=\"popular\">Популярные</TabsTrigger>\n                <TabsTrigger value=\"coming-soon\">Скоро в продаже</TabsTrigger>\n              </TabsList>\n            </div>\n          </Tabs>\n          \n          {/* Featured products */}\n          {filter === 'all' && (\n            <div className=\"mb-16\">\n              <h2 className=\"text-2xl font-bold text-white mb-8\">Рекомендуемые продукты</h2>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                {mockProducts\n                  .filter(product => product.isFeatured)\n                  .map((product) => (\n                    <div \n                      key={product.id}\n                      className=\"bg-gradient-to-b from-cyberdark-800 to-cyberdark-700 rounded-lg overflow-hidden border border-cyberdark-600 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm\"\n                    >\n                      <div className=\"p-6\">\n                        <div className=\"flex items-start\">\n                          <div className=\"bg-gradient-to-br from-cyberblue-500 to-cyberblue-700 rounded-lg p-3 mr-4\">\n                            {categoryIcons[product.category]}\n                          </div>\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h3 className=\"text-xl font-bold text-white\">{product.name}</h3>\n                              {product.isPopular && (\n                                <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">\n                                  Популярный\n                                </Badge>\n                              )}\n                            </div>\n                            <p className=\"text-gray-300 mb-4\">\n                              {product.description}\n                            </p>\n                            <ul className=\"space-y-2 mb-6\">\n                              {product.features.map((feature, index) => (\n                                <li key={index} className=\"flex items-start\">\n                                  <CheckCircle className=\"w-5 h-5 text-cyberblue-500 mr-2 flex-shrink-0\" />\n                                  <span className=\"text-gray-300\">{feature}</span>\n                                </li>\n                              ))}\n                            </ul>\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"text-2xl font-bold text-white\">\n                                ${product.price.toFixed(2)}\n                                <span className=\"text-gray-400 text-sm ml-1\">/месяц</span>\n                              </div>\n                              <Link to={`/products/${product.id}`}>\n                                <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600\">\n                                  Подробнее\n                                  <ChevronRight className=\"ml-2 h-4 w-4\" />\n                                </Button>\n                              </Link>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </div>\n          )}\n          \n          {/* All products grid */}\n          <div>\n            <h2 className=\"text-2xl font-bold text-white mb-8\">\n              {filter === 'all' && 'Все продукты'}\n              {filter === 'featured' && 'Рекомендуемые продукты'}\n              {filter === 'popular' && 'Популярные продукты'}\n              {filter === 'coming-soon' && 'Скоро в продаже'}\n            </h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProducts.map((product) => (\n                <div \n                  key={product.id}\n                  className=\"bg-cyberdark-800 rounded-lg overflow-hidden border border-cyberdark-700 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm\"\n                >\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"bg-cyberdark-700 rounded-lg p-2\">\n                        {categoryIcons[product.category]}\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        {product.isPopular && (\n                          <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">\n                            Популярный\n                          </Badge>\n                        )}\n                        {product.isFeatured && (\n                          <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                            Рекомендуемый\n                          </Badge>\n                        )}\n                        {product.comingSoon && (\n                          <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">\n                            Скоро\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <h3 className=\"text-xl font-bold text-white mb-2\">{product.name}</h3>\n                    \n                    <p className=\"text-gray-300 mb-4\">\n                      {product.description}\n                    </p>\n                    \n                    <div className=\"border-t border-cyberdark-700 pt-4 mb-6\">\n                      <h4 className=\"text-sm font-medium text-white mb-2\">Основные возможности:</h4>\n                      <ul className=\"space-y-1\">\n                        {product.features.slice(0, 3).map((feature, index) => (\n                          <li key={index} className=\"flex items-start text-sm\">\n                            <CheckCircle className=\"w-4 h-4 text-cyberblue-500 mr-2 flex-shrink-0\" />\n                            <span className=\"text-gray-300\">{feature}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"font-bold text-white\">\n                        {product.comingSoon ? (\n                          <span className=\"text-yellow-400\">Скоро в продаже</span>\n                        ) : (\n                          <span className=\"text-xl\">${product.price.toFixed(2)}<span className=\"text-gray-400 text-sm\">/месяц</span></span>\n                        )}\n                      </div>\n                      <Link to={`/products/${product.id}`}>\n                        <Button variant=\"outline\" size=\"sm\">\n                          Подробнее\n                        </Button>\n                      </Link>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {filteredProducts.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"bg-cyberdark-800 rounded-lg p-8 border border-cyberdark-700 inline-block\">\n                  <Search className=\"h-12 w-12 text-gray-500 mx-auto mb-4\" />\n                  <h3 className=\"text-xl font-medium text-white mb-2\">Ничего не найдено</h3>\n                  <p className=\"text-gray-300 mb-4\">\n                    По вашему запросу \"{searchQuery}\" не найдено продуктов. \n                    Попробуйте изменить поисковый запрос или фильтры.\n                  </p>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setSearchQuery('');\n                      setFilter('all');\n                    }}\n                  >\n                    Сбросить фильтры\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Comparison section */}\n          <div className=\"mt-20\">\n            <h2 className=\"text-2xl font-bold text-white mb-8 text-center\">Сравнение продуктов</h2>\n            \n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full min-w-[800px] bg-cyberdark-800 rounded-lg border border-cyberdark-700\">\n                <thead>\n                  <tr className=\"border-b border-cyberdark-700\">\n                    <th className=\"px-6 py-4 text-left text-white font-bold\">Функция</th>\n                    <th className=\"px-6 py-4 text-center text-white font-bold\">Scanner</th>\n                    <th className=\"px-6 py-4 text-center text-white font-bold\">Monitor</th>\n                    <th className=\"px-6 py-4 text-center text-white font-bold\">Crypto</th>\n                    <th className=\"px-6 py-4 text-center text-white font-bold\">PenTest</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr className=\"border-b border-cyberdark-700\">\n                    <td className=\"px-6 py-4 text-gray-300\">Автоматическое сканирование</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                  </tr>\n                  <tr className=\"border-b border-cyberdark-700\">\n                    <td className=\"px-6 py-4 text-gray-300\">Интеграция с CI/CD</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                  </tr>\n                  <tr className=\"border-b border-cyberdark-700\">\n                    <td className=\"px-6 py-4 text-gray-300\">Мониторинг в реальном времени</td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                  </tr>\n                  <tr className=\"border-b border-cyberdark-700\">\n                    <td className=\"px-6 py-4 text-gray-300\">Управление криптоключами</td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                  </tr>\n                  <tr className=\"border-b border-cyberdark-700\">\n                    <td className=\"px-6 py-4 text-gray-300\">Анализ на основе ИИ</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-gray-500\">-</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                  </tr>\n                  <tr>\n                    <td className=\"px-6 py-4 text-gray-300\">Генерация отчетов</td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                    <td className=\"px-6 py-4 text-center text-cyberblue-500\"><CheckCircle className=\"w-5 h-5 mx-auto\" /></td>\n                  </tr>\n                </tbody>\n                <tfoot className=\"border-t border-cyberdark-700 bg-cyberdark-700/50\">\n                  <tr>\n                    <td className=\"px-6 py-4 text-white font-bold\">Цена (в месяц)</td>\n                    <td className=\"px-6 py-4 text-center text-white font-medium\">$49.99</td>\n                    <td className=\"px-6 py-4 text-center text-white font-medium\">$79.99</td>\n                    <td className=\"px-6 py-4 text-center text-white font-medium\">$39.99</td>\n                    <td className=\"px-6 py-4 text-center text-white font-medium\">$89.99</td>\n                  </tr>\n                </tfoot>\n              </table>\n            </div>\n          </div>\n          \n          {/* Bundle offer */}\n          <div className=\"mt-20 bg-gradient-to-r from-cyberdark-800 to-cyberdark-700 rounded-lg overflow-hidden border border-cyberdark-600\">\n            <div className=\"p-8\">\n              <div className=\"flex flex-col lg:flex-row lg:items-center\">\n                <div className=\"lg:w-2/3 mb-6 lg:mb-0 lg:pr-8\">\n                  <Badge className=\"mb-4 bg-cyberblue-500/20 text-cyberblue-400 border-cyberblue-500/30 px-3 py-1\">\n                    Специальное предложение\n                  </Badge>\n                  <h2 className=\"text-2xl md:text-3xl font-bold text-white mb-4\">\n                    Пакет Security Pro Bundle\n                  </h2>\n                  <p className=\"text-lg text-gray-300 mb-6\">\n                    Получите полный набор наших ключевых продуктов по специальной цене.\n                    Включает Scanner, Monitor и Crypto для комплексной защиты ваших систем.\n                  </p>\n                  <div className=\"flex flex-wrap gap-4 mb-6\">\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">3 продукта в 1 пакете</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">Экономия 30%</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <CheckCircle className=\"w-5 h-5 text-cyberblue-500 mr-2\" />\n                      <span className=\"text-gray-300\">Приоритетная поддержка</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"mr-4\">\n                      <div className=\"text-2xl font-bold text-white\">$119.99</div>\n                      <div className=\"text-gray-400 line-through\">$169.97</div>\n                    </div>\n                    <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 btn-glow\">\n                      Подробнее о предложении\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n                <div className=\"lg:w-1/3 flex justify-center\">\n                  <div className=\"relative\">\n                    <div className=\"w-20 h-20 bg-cyberdark-600 rounded-full flex items-center justify-center absolute top-0 left-0 -translate-x-1/4 -translate-y-1/4\">\n                      <Shield className=\"w-10 h-10 text-cyberblue-500\" />\n                    </div>\n                    <div className=\"w-24 h-24 bg-cyberdark-600 rounded-full flex items-center justify-center\">\n                      <Eye className=\"w-12 h-12 text-cyberblue-500\" />\n                    </div>\n                    <div className=\"w-20 h-20 bg-cyberdark-600 rounded-full flex items-center justify-center absolute bottom-0 right-0 translate-x-1/4 translate-y-1/4\">\n                      <Lock className=\"w-10 h-10 text-cyberblue-500\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Testimonials */}\n          <div className=\"mt-20\">\n            <h2 className=\"text-2xl font-bold text-white mb-8 text-center\">Отзывы клиентов</h2>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-cyberdark-600\"></div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"font-medium text-white\">Иван К.</h4>\n                    <p className=\"text-gray-400 text-sm\">Chief Security Officer</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"CyberWhale Scanner значительно упростил процесс обнаружения уязвимостей в наших \n                  веб-приложениях. Особенно впечатляет аналитический модуль на базе ИИ.\"\n                </p>\n                <div className=\"flex text-yellow-500\">\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                </div>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-cyberdark-600\"></div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"font-medium text-white\">Анна Д.</h4>\n                    <p className=\"text-gray-400 text-sm\">Сетевой администратор</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"После внедрения CyberWhale Monitor наша команда стала гораздо быстрее реагировать \n                  на инциденты. Система обнаружения аномалий работает превосходно.\"\n                </p>\n                <div className=\"flex text-yellow-500\">\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <HalfStarIcon />\n                </div>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <div className=\"flex items-center mb-4\">\n                  <div className=\"w-10 h-10 rounded-full bg-cyberdark-600\"></div>\n                  <div className=\"ml-3\">\n                    <h4 className=\"font-medium text-white\">Михаил С.</h4>\n                    <p className=\"text-gray-400 text-sm\">DevOps инженер</p>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-4\">\n                  \"Интеграция CyberWhale Scanner в наш CI/CD пайплайн позволила нам автоматизировать \n                  тестирование безопасности и значительно снизить риски.\"\n                </p>\n                <div className=\"flex text-yellow-500\">\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                  <StarIcon />\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* FAQ section */}\n          <div className=\"mt-20\">\n            <h2 className=\"text-2xl font-bold text-white mb-8 text-center\">Часто задаваемые вопросы</h2>\n            \n            <div className=\"max-w-3xl mx-auto space-y-4\">\n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <h3 className=\"text-lg font-bold text-white mb-2\">Какие способы оплаты вы принимаете?</h3>\n                <p className=\"text-gray-300\">\n                  Мы принимаем оплату кредитными картами (Visa, MasterCard, American Express), \n                  PayPal, а также банковскими переводами для корпоративных клиентов.\n                </p>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <h3 className=\"text-lg font-bold text-white mb-2\">Есть ли у вас пробный период?</h3>\n                <p className=\"text-gray-300\">\n                  Да, мы предлагаем 14-дневный бесплатный пробный период для всех наших продуктов. \n                  Вы можете протестировать полную функциональность продукта без каких-либо ограничений.\n                </p>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <h3 className=\"text-lg font-bold text-white mb-2\">Какая поддержка предоставляется?</h3>\n                <p className=\"text-gray-300\">\n                  Все наши продукты включают базовую техническую поддержку по электронной почте. Для \n                  корпоративных клиентов доступны расширенные планы поддержки с гарантированным временем отклика.\n                </p>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <h3 className=\"text-lg font-bold text-white mb-2\">Можно ли интегрировать ваши продукты с другими решениями?</h3>\n                <p className=\"text-gray-300\">\n                  Да, наши продукты поддерживают интеграцию с популярными системами безопасности, \n                  инструментами CI/CD и платформами управления. Для получения подробной информации \n                  обратитесь к документации или в нашу службу поддержки.\n                </p>\n              </div>\n              \n              <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700\">\n                <h3 className=\"text-lg font-bold text-white mb-2\">Предлагаете ли вы скидки для образовательных учреждений?</h3>\n                <p className=\"text-gray-300\">\n                  Да, мы предлагаем специальные образовательные лицензии для учебных заведений и \n                  некоммерческих организаций. Пожалуйста, свяжитесь с нашим отделом продаж для \n                  получения дополнительной информации.\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          {/* CTA section */}\n          <div className=\"mt-20 bg-gradient-to-b from-cyberdark-900 to-cyberdark-800 py-12 rounded-lg border border-cyberdark-700\">\n            <div className=\"max-w-4xl mx-auto text-center px-4\">\n              <h2 className=\"text-3xl font-bold text-white mb-4\">\n                Готовы защитить свои системы?\n              </h2>\n              <p className=\"text-xl text-gray-300 mb-8 max-w-2xl mx-auto\">\n                Выберите продукты CyberWhale и получите передовые решения для кибербезопасности \n                от экспертов отрасли.\n              </p>\n              <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n                <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 btn-glow\">\n                  Получить консультацию\n                </Button>\n                <Button variant=\"outline\">\n                  Смотреть демо\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <ChatAssistant />\n    </div>\n  );\n}\n\n// Star icon components\nconst StarIcon = () => (\n  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n    <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"></path>\n  </svg>\n);\n\nconst HalfStarIcon = () => (\n  <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n    <defs>\n      <linearGradient id=\"halfGradient\">\n        <stop offset=\"50%\" stopColor=\"currentColor\" />\n        <stop offset=\"50%\" stopColor=\"#4B5563\" />\n      </linearGradient>\n    </defs>\n    <path fill=\"url(#halfGradient)\" d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"></path>\n  </svg>\n);\n","size_bytes":35050},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":880},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/types/index.ts":{"content":"\n// User types\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  avatar?: string;\n  role: 'user' | 'admin';\n  points: number;\n  level: number;\n  createdAt: Date;\n  profile?: UserProfile;\n}\n\nexport interface UserProfile {\n  fullName?: string;\n  bio?: string;\n  website?: string;\n  github?: string;\n  twitter?: string;\n  telegram?: string;\n  skills?: string[];\n  achievements?: Achievement[];\n}\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  earnedAt: Date;\n}\n\n// CTF Challenge types\nexport interface Challenge {\n  id: string;\n  title: string;\n  description: string;\n  category: ChallengeCategory;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'expert';\n  points: number;\n  tags: string[];\n  solved: boolean;\n  solvedBy: number;\n  createdAt: Date;\n  updatedAt: Date;\n  timeLimit?: number; // Optional time limit in seconds\n  downloadUrl?: string; // Optional URL for downloadable content\n  fileType?: 'archive' | 'image' | 'text' | 'binary' | 'other'; // Optional file type\n}\n\nexport type ChallengeCategory = \n  | 'web' \n  | 'crypto' \n  | 'osint' \n  | 'steganography' \n  | 'reverse-engineering' \n  | 'forensics'\n  | 'pwn'\n  | 'programming'\n  | 'network';\n\n// Knowledge Base types\nexport interface Article {\n  id: string;\n  title: string;\n  description: string;\n  content: string;\n  category: string;\n  tags: string[];\n  level: 'beginner' | 'intermediate' | 'advanced';\n  author: string;\n  readTime: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Product types\nexport interface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  features: string[];\n  isFeatured: boolean;\n  isPopular: boolean;\n  comingSoon: boolean;\n  category: 'scanner' | 'monitor' | 'crypto' | 'pentest' | 'devsec' | 'network' | 'other';\n}\n\n// Community types\nexport interface Event {\n  id: string;\n  title: string;\n  description: string;\n  date: Date;\n  timeZone: string;\n  type: 'workshop' | 'competition' | 'webinar' | 'meetup';\n  registeredUsers?: number;\n}\n\n// Notification types\nexport interface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  read: boolean;\n  createdAt: Date;\n}\n","size_bytes":2252},"client/src/lib/auth/actions.ts":{"content":"import { NavigateFunction } from 'react-router-dom';\nimport { Dispatch, SetStateAction } from 'react';\nimport { User } from '@/types';\nimport { apiClient } from '@/lib/api';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface AuthResponse {\n  user: {\n    id: number;\n    username: string;\n    email: string;\n    avatar?: string;\n    role: string;\n    points: number;\n    level: number;\n    emailVerified?: boolean;\n  };\n  token: string;\n  message?: string;\n}\n\ninterface RegisterResponse {\n  userId: number;\n  email: string;\n  message: string;\n  verificationRequired?: boolean;\n  developmentCode?: string;\n}\n\nexport const login = async (\n  email: string,\n  password: string,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n  setError: Dispatch<SetStateAction<string | null>>\n): Promise<AuthResponse | null> => {\n  setIsLoading(true);\n  setError(null);\n  \n  try {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      setError(data.message || 'Login failed');\n      toast({\n        title: \"Ошибка входа\",\n        description: data.message || 'Неверный email или пароль',\n        variant: \"destructive\",\n      });\n      return null;\n    }\n\n    if (data.token) {\n      apiClient.setToken(data.token);\n    }\n    \n    toast({\n      title: \"Успешный вход\",\n      description: \"Добро пожаловать в CyberWhale!\",\n    });\n\n    return data;\n  } catch (err: any) {\n    console.error('Unexpected login error:', err);\n    setError(err.message);\n    toast({\n      title: \"Ошибка входа\",\n      description: \"Произошла неожиданная ошибка при входе\",\n      variant: \"destructive\",\n    });\n    return null;\n  } finally {\n    setIsLoading(false);\n  }\n};\n\nexport const register = async (\n  username: string,\n  email: string,\n  password: string,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n  setError: Dispatch<SetStateAction<string | null>>,\n  navigate: NavigateFunction\n): Promise<RegisterResponse | null> => {\n  setIsLoading(true);\n  setError(null);\n  \n  try {\n    const response = await fetch('/api/auth/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ username, email, password }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      setError(data.message || 'Registration failed');\n      toast({\n        title: \"Ошибка регистрации\",\n        description: data.message,\n        variant: \"destructive\",\n      });\n      return null;\n    }\n    \n    if (data.verificationRequired) {\n      toast({\n        title: \"Регистрация прошла успешно!\",\n        description: data.message,\n      });\n      \n      if (data.developmentCode) {\n        console.log('Verification code:', data.developmentCode);\n      }\n      \n      navigate('/auth/verify-otp', { state: { email: data.email } });\n    }\n    \n    return data;\n  } catch (err: any) {\n    console.error('Unexpected registration error:', err);\n    setError(err.message);\n    toast({\n      title: \"Ошибка регистрации\",\n      description: \"Произошла неожиданная ошибка при регистрации\",\n      variant: \"destructive\",\n    });\n    return null;\n  } finally {\n    setIsLoading(false);\n  }\n};\n\nexport const logout = async (\n  setUser: Dispatch<SetStateAction<User | null>>,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n  setError: Dispatch<SetStateAction<string | null>>,\n  navigate: NavigateFunction\n): Promise<void> => {\n  setIsLoading(true);\n  \n  try {\n    apiClient.clearToken();\n    setUser(null);\n    navigate('/');\n    \n    toast({\n      title: \"Выход выполнен\",\n      description: \"Вы успешно вышли из системы\",\n    });\n  } catch (err: any) {\n    console.error('Unexpected logout error:', err);\n    setError(err.message);\n    toast({\n      title: \"Ошибка выхода\",\n      description: \"Произошла неожиданная ошибка при выходе\",\n      variant: \"destructive\",\n    });\n  } finally {\n    setIsLoading(false);\n  }\n};\n\nexport const resetPassword = async (\n  email: string,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n  setError: Dispatch<SetStateAction<string | null>>\n): Promise<void> => {\n  setIsLoading(true);\n  setError(null);\n  \n  try {\n    const response = await fetch('/api/auth/forgot-password', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      setError(data.message || 'Password reset failed');\n      toast({\n        title: \"Ошибка сброса пароля\",\n        description: data.message,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (data.developmentCode) {\n      console.log('Reset code:', data.developmentCode);\n    }\n    \n    toast({\n      title: \"Код отправлен\",\n      description: data.message,\n    });\n  } catch (err: any) {\n    console.error('Unexpected password reset error:', err);\n    setError(err.message);\n    toast({\n      title: \"Ошибка сброса пароля\",\n      description: \"Произошла неожиданная ошибка при сбросе пароля\",\n      variant: \"destructive\",\n    });\n  } finally {\n    setIsLoading(false);\n  }\n};\n\nexport const updatePassword = async (\n  email: string,\n  code: string,\n  newPassword: string,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n  setError: Dispatch<SetStateAction<string | null>>\n): Promise<boolean> => {\n  setIsLoading(true);\n  setError(null);\n  \n  try {\n    const response = await fetch('/api/auth/reset-password', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, code, newPassword }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      setError(data.message || 'Password update failed');\n      toast({\n        title: \"Ошибка обновления пароля\",\n        description: data.message,\n        variant: \"destructive\",\n      });\n      return false;\n    }\n    \n    toast({\n      title: \"Пароль обновлен\",\n      description: data.message,\n    });\n\n    return true;\n  } catch (err: any) {\n    console.error('Unexpected password update error:', err);\n    setError(err.message);\n    toast({\n      title: \"Ошибка обновления пароля\",\n      description: \"Произошла неожиданная ошибка при обновлении пароля\",\n      variant: \"destructive\",\n    });\n    return false;\n  } finally {\n    setIsLoading(false);\n  }\n};\n\nexport const updateProfile = async (\n  userId: number,\n  updates: Partial<User>,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n  setError: Dispatch<SetStateAction<string | null>>\n): Promise<User | null> => {\n  setIsLoading(true);\n  setError(null);\n  \n  try {\n    const response = await apiClient.updateProfile(updates);\n    \n    toast({\n      title: \"Профиль обновлен\",\n      description: \"Ваши данные успешно обновлены\",\n    });\n\n    return response;\n  } catch (err: any) {\n    console.error('Unexpected profile update error:', err);\n    setError(err.message);\n    toast({\n      title: \"Ошибка обновления профиля\",\n      description: \"Произошла неожиданная ошибка при обновлении профиля\",\n      variant: \"destructive\",\n    });\n    return null;\n  } finally {\n    setIsLoading(false);\n  }\n};\n\nexport const verifyOtp = async (\n  email: string,\n  code: string,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n  setError: Dispatch<SetStateAction<string | null>>\n): Promise<AuthResponse | null> => {\n  setIsLoading(true);\n  setError(null);\n  \n  try {\n    const response = await fetch('/api/auth/verify-email', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, code }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      setError(data.message || 'Verification failed');\n      toast({\n        title: \"Ошибка верификации\",\n        description: data.message,\n        variant: \"destructive\",\n      });\n      return null;\n    }\n\n    if (data.token) {\n      apiClient.setToken(data.token);\n    }\n    \n    toast({\n      title: \"Email подтвержден!\",\n      description: \"Добро пожаловать в CyberWhale!\",\n    });\n\n    return data;\n  } catch (err: any) {\n    console.error('Unexpected verification error:', err);\n    setError(err.message);\n    toast({\n      title: \"Ошибка верификации\",\n      description: \"Произошла неожиданная ошибка при верификации\",\n      variant: \"destructive\",\n    });\n    return null;\n  } finally {\n    setIsLoading(false);\n  }\n};\n\nexport const resendVerification = async (\n  email: string,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n  setError: Dispatch<SetStateAction<string | null>>\n): Promise<void> => {\n  setIsLoading(true);\n  setError(null);\n  \n  try {\n    const response = await fetch('/api/auth/resend-verification', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email }),\n    });\n\n    const data = await response.json();\n\n    if (!response.ok) {\n      setError(data.message || 'Resend failed');\n      toast({\n        title: \"Ошибка отправки\",\n        description: data.message,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (data.developmentCode) {\n      console.log('Verification code:', data.developmentCode);\n    }\n    \n    toast({\n      title: \"Код отправлен\",\n      description: data.message,\n    });\n  } catch (err: any) {\n    console.error('Unexpected resend error:', err);\n    setError(err.message);\n    toast({\n      title: \"Ошибка отправки\",\n      description: \"Произошла неожиданная ошибка при отправке кода\",\n      variant: \"destructive\",\n    });\n  } finally {\n    setIsLoading(false);\n  }\n};\n","size_bytes":10534},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/admin/AdminUsers.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { useToast } from '@/hooks/use-toast';\nimport { Search, Shield, UserX, UserCheck, RefreshCw } from 'lucide-react';\n\ninterface User {\n  id: number;\n  username: string;\n  email: string;\n  role: 'user' | 'admin';\n  points: number;\n  level: number;\n  createdAt: string;\n  isActive: boolean;\n}\n\nexport default function AdminUsers() {\n  const [users, setUsers] = useState<User[]>([]);\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    const filtered = users.filter(user =>\n      user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n    setFilteredUsers(filtered);\n  }, [searchTerm, users]);\n\n  const loadUsers = async () => {\n    setIsLoading(true);\n    try {\n      // Временные данные для демонстрации\n      const mockUsers: User[] = [\n        {\n          id: 1,\n          username: 'admin',\n          email: 'admin@cyberwhale.ru',\n          role: 'admin',\n          points: 1500,\n          level: 10,\n          createdAt: '2024-01-15',\n          isActive: true\n        },\n        {\n          id: 2,\n          username: 'user123',\n          email: 'user123@mail.ru',\n          role: 'user',\n          points: 750,\n          level: 5,\n          createdAt: '2024-02-20',\n          isActive: true\n        },\n        {\n          id: 3,\n          username: 'hacker_pro',\n          email: 'hacker@pro.com',\n          role: 'user',\n          points: 1200,\n          level: 8,\n          createdAt: '2024-01-30',\n          isActive: false\n        }\n      ];\n      setUsers(mockUsers);\n      setFilteredUsers(mockUsers);\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось загрузить список пользователей\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const toggleUserStatus = async (userId: number) => {\n    try {\n      const user = users.find(u => u.id === userId);\n      const updatedUsers = users.map(user =>\n        user.id === userId ? { ...user, isActive: !user.isActive } : user\n      );\n      setUsers(updatedUsers);\n      \n      toast({\n        title: \"Успех\",\n        description: `Статус пользователя ${user?.isActive ? 'деактивирован' : 'активирован'}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось изменить статус пользователя\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const changeUserRole = async (userId: number, newRole: 'user' | 'admin') => {\n    try {\n      const updatedUsers = users.map(user =>\n        user.id === userId ? { ...user, role: newRole } : user\n      );\n      setUsers(updatedUsers);\n      \n      toast({\n        title: \"Успех\",\n        description: `Роль пользователя изменена на ${newRole === 'admin' ? 'администратор' : 'пользователь'}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось изменить роль пользователя\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5\" />\n            Управление пользователями\n          </CardTitle>\n          <CardDescription>\n            Просмотр и управление пользователями системы\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Поиск по имени или email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            <Button onClick={loadUsers} disabled={isLoading}>\n              <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n              Обновить\n            </Button>\n          </div>\n\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Пользователь</TableHead>\n                  <TableHead>Роль</TableHead>\n                  <TableHead>Очки</TableHead>\n                  <TableHead>Уровень</TableHead>\n                  <TableHead>Статус</TableHead>\n                  <TableHead>Дата регистрации</TableHead>\n                  <TableHead>Действия</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredUsers.map((user) => (\n                  <TableRow key={user.id}>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{user.username}</div>\n                        <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>\n                        {user.role === 'admin' ? 'Администратор' : 'Пользователь'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{user.points}</TableCell>\n                    <TableCell>{user.level}</TableCell>\n                    <TableCell>\n                      <Badge variant={user.isActive ? 'default' : 'destructive'}>\n                        {user.isActive ? 'Активен' : 'Неактивен'}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{new Date(user.createdAt).toLocaleDateString('ru-RU')}</TableCell>\n                    <TableCell>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant={user.isActive ? \"destructive\" : \"default\"}\n                          onClick={() => toggleUserStatus(user.id)}\n                        >\n                          {user.isActive ? <UserX className=\"w-4 h-4\" /> : <UserCheck className=\"w-4 h-4\" />}\n                        </Button>\n                        {user.role === 'user' ? (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => changeUserRole(user.id, 'admin')}\n                          >\n                            Сделать админом\n                          </Button>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => changeUserRole(user.id, 'user')}\n                          >\n                            Убрать админа\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>\n\n          <div className=\"text-sm text-muted-foreground\">\n            Всего пользователей: {filteredUsers.length}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8363},"client/src/App.css":{"content":"\n/* Основные стили приложения */\n.app-container {\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n.content-wrapper {\n  flex: 1;\n  width: 100%;\n  padding-top: 4rem; /* Добавляем отступ для фиксированной навбара */\n}\n\n/* This CSS code block is defining styles for the logo element. Here's what each property is doing: */\n/* Анимации логотипа */\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n/* Дополнительные стили контента */\n.hero-section {\n  position: relative;\n  overflow: hidden;\n}\n\n.glass-card {\n  backdrop-filter: blur(10px);\n  background-color: rgba(17, 24, 39, 0.7);\n  border: 1px solid rgba(75, 85, 99, 0.3);\n  border-radius: 0.5rem;\n}\n\n/* Анимации для чата */\n@keyframes slide-in {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-slide-in {\n  animation: slide-in 0.3s ease-out forwards;\n}\n\n/* Ocean wave animation */\n@keyframes ocean-wave {\n  0% {\n    box-shadow: 0 0 8px rgba(59, 130, 246, 0.4);\n  }\n  50% {\n    box-shadow: 0 0 20px rgba(59, 130, 246, 0.8);\n  }\n  100% {\n    box-shadow: 0 0 8px rgba(59, 130, 246, 0.4);\n  }\n}\n\n.ocean-wave-animation {\n  animation: ocean-wave 4s ease-in-out infinite;\n  transition: all 0.3s ease;\n}\n\n.ocean-wave-animation:hover {\n  box-shadow: 0 0 25px rgba(59, 130, 246, 0.9);\n}\n\n.ocean-wave-animation-small {\n  animation: ocean-wave 4s ease-in-out infinite;\n}\n\n.shadow-glow {\n  box-shadow: 0 0 15px rgba(16, 185, 129, 0.5);\n}\n\n.delay-75 {\n  animation-delay: 0.75s;\n}\n\n.delay-150 {\n  animation-delay: 0.15s;\n}\n","size_bytes":2101},"client/src/components/auth/NewAuthModal.tsx":{"content":"import React, { useState } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Loader2, Mail, Eye, EyeOff, Shield } from 'lucide-react';\nimport { useAuth } from '@/lib/auth/AuthProvider';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialTab?: 'login' | 'register';\n}\n\nexport function AuthModal({ isOpen, onClose, initialTab = 'login' }: AuthModalProps) {\n  const { register, login, verifyEmail, resendVerification, forgotPassword, resetPassword } = useAuth();\n  \n  const [activeTab, setActiveTab] = useState(initialTab);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [step, setStep] = useState<'auth' | 'verify' | 'forgot' | 'reset'>('auth');\n  \n  // Form states\n  const [loginForm, setLoginForm] = useState({ email: '', password: '' });\n  const [registerForm, setRegisterForm] = useState({ username: '', email: '', password: '', confirmPassword: '' });\n  const [verifyForm, setVerifyForm] = useState({ email: '', code: '' });\n  const [forgotForm, setForgotForm] = useState({ email: '' });\n  const [resetForm, setResetForm] = useState({ email: '', code: '', newPassword: '', confirmPassword: '' });\n  \n  const [developmentCode, setDevelopmentCode] = useState<string>('');\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isLoading) return;\n    \n    setIsLoading(true);\n    try {\n      const result = await login(loginForm.email, loginForm.password);\n      \n      if (result.success) {\n        onClose();\n        resetForms();\n      } else if (result.emailVerificationRequired) {\n        setVerifyForm({ email: loginForm.email, code: '' });\n        setStep('verify');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isLoading) return;\n    \n    if (registerForm.password !== registerForm.confirmPassword) {\n      alert('Пароли не совпадают');\n      return;\n    }\n    \n    setIsLoading(true);\n    try {\n      const result = await register(registerForm.username, registerForm.email, registerForm.password);\n      \n      if (result.success && result.verificationRequired) {\n        setVerifyForm({ email: registerForm.email, code: '' });\n        setDevelopmentCode(result.developmentCode || '');\n        setStep('verify');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleVerifyEmail = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isLoading) return;\n    \n    setIsLoading(true);\n    try {\n      const result = await verifyEmail(verifyForm.email, verifyForm.code);\n      \n      if (result.success) {\n        onClose();\n        resetForms();\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResendCode = async () => {\n    if (isLoading) return;\n    \n    setIsLoading(true);\n    try {\n      const result = await resendVerification(verifyForm.email);\n      if (result.success) {\n        setDevelopmentCode(result.developmentCode || '');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleForgotPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isLoading) return;\n    \n    setIsLoading(true);\n    try {\n      const result = await forgotPassword(forgotForm.email);\n      \n      if (result.success) {\n        setResetForm({ email: forgotForm.email, code: '', newPassword: '', confirmPassword: '' });\n        setDevelopmentCode(result.developmentCode || '');\n        setStep('reset');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResetPassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isLoading) return;\n    \n    if (resetForm.newPassword !== resetForm.confirmPassword) {\n      alert('Пароли не совпадают');\n      return;\n    }\n    \n    setIsLoading(true);\n    try {\n      const result = await resetPassword(resetForm.email, resetForm.code, resetForm.newPassword);\n      \n      if (result.success) {\n        setStep('auth');\n        setActiveTab('login');\n        resetForms();\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetForms = () => {\n    setLoginForm({ email: '', password: '' });\n    setRegisterForm({ username: '', email: '', password: '', confirmPassword: '' });\n    setVerifyForm({ email: '', code: '' });\n    setForgotForm({ email: '' });\n    setResetForm({ email: '', code: '', newPassword: '', confirmPassword: '' });\n    setDevelopmentCode('');\n    setStep('auth');\n  };\n\n  const handleClose = () => {\n    resetForms();\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md bg-cyberdark-900 border-cyberdark-700\">\n        <DialogHeader>\n          <DialogTitle className=\"text-white text-center\">\n            {step === 'verify' && (\n              <div className=\"flex items-center justify-center gap-2\">\n                <Mail className=\"w-5 h-5 text-blue-400\" />\n                Подтверждение Email\n              </div>\n            )}\n            {step === 'forgot' && 'Восстановление пароля'}\n            {step === 'reset' && 'Новый пароль'}\n            {step === 'auth' && (\n              <div className=\"flex items-center justify-center gap-2\">\n                <Shield className=\"w-5 h-5 text-blue-400\" />\n                CyberWhale\n              </div>\n            )}\n          </DialogTitle>\n        </DialogHeader>\n\n        {step === 'verify' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center text-gray-400 text-sm\">\n              Мы отправили код подтверждения на <strong>{verifyForm.email}</strong>\n            </div>\n            \n            {developmentCode && (\n              <div className=\"bg-blue-950 border border-blue-800 rounded-lg p-3 text-center\">\n                <div className=\"text-blue-300 text-sm mb-1\">Код для разработки:</div>\n                <div className=\"text-blue-100 font-mono text-lg\">{developmentCode}</div>\n              </div>\n            )}\n            \n            <form onSubmit={handleVerifyEmail} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"verify-code\" className=\"text-gray-300\">Код подтверждения</Label>\n                <Input\n                  id=\"verify-code\"\n                  type=\"text\"\n                  placeholder=\"Введите 6-значный код\"\n                  value={verifyForm.code}\n                  onChange={(e) => setVerifyForm({ ...verifyForm, code: e.target.value })}\n                  className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                  maxLength={6}\n                  required\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                disabled={isLoading}\n              >\n                {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : 'Подтвердить'}\n              </Button>\n              \n              <div className=\"text-center\">\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  className=\"text-gray-400 hover:text-white\"\n                  onClick={handleResendCode}\n                  disabled={isLoading}\n                >\n                  Отправить код повторно\n                </Button>\n              </div>\n            </form>\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full text-gray-400 hover:text-white\"\n              onClick={() => setStep('auth')}\n            >\n              Назад к входу\n            </Button>\n          </div>\n        )}\n\n        {step === 'forgot' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center text-gray-400 text-sm\">\n              Введите ваш email для получения кода восстановления\n            </div>\n            \n            <form onSubmit={handleForgotPassword} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"forgot-email\" className=\"text-gray-300\">Email</Label>\n                <Input\n                  id=\"forgot-email\"\n                  type=\"email\"\n                  placeholder=\"your@email.com\"\n                  value={forgotForm.email}\n                  onChange={(e) => setForgotForm({ email: e.target.value })}\n                  className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                  required\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                disabled={isLoading}\n              >\n                {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : 'Отправить код'}\n              </Button>\n            </form>\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full text-gray-400 hover:text-white\"\n              onClick={() => setStep('auth')}\n            >\n              Назад к входу\n            </Button>\n          </div>\n        )}\n\n        {step === 'reset' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center text-gray-400 text-sm\">\n              Введите код из email и новый пароль\n            </div>\n            \n            {developmentCode && (\n              <div className=\"bg-red-950 border border-red-800 rounded-lg p-3 text-center\">\n                <div className=\"text-red-300 text-sm mb-1\">Код для разработки:</div>\n                <div className=\"text-red-100 font-mono text-lg\">{developmentCode}</div>\n              </div>\n            )}\n            \n            <form onSubmit={handleResetPassword} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"reset-code\" className=\"text-gray-300\">Код восстановления</Label>\n                <Input\n                  id=\"reset-code\"\n                  type=\"text\"\n                  placeholder=\"Введите 6-значный код\"\n                  value={resetForm.code}\n                  onChange={(e) => setResetForm({ ...resetForm, code: e.target.value })}\n                  className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                  maxLength={6}\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"reset-password\" className=\"text-gray-300\">Новый пароль</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"reset-password\"\n                    type={showPassword ? 'text' : 'password'}\n                    value={resetForm.newPassword}\n                    onChange={(e) => setResetForm({ ...resetForm, newPassword: e.target.value })}\n                    className=\"bg-cyberdark-800 border-cyberdark-600 text-white pr-10\"\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"reset-confirm-password\" className=\"text-gray-300\">Подтвердите пароль</Label>\n                <Input\n                  id=\"reset-confirm-password\"\n                  type=\"password\"\n                  value={resetForm.confirmPassword}\n                  onChange={(e) => setResetForm({ ...resetForm, confirmPassword: e.target.value })}\n                  className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                  required\n                />\n              </div>\n              \n              <Button\n                type=\"submit\"\n                className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                disabled={isLoading}\n              >\n                {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : 'Сбросить пароль'}\n              </Button>\n            </form>\n            \n            <Button\n              variant=\"ghost\"\n              className=\"w-full text-gray-400 hover:text-white\"\n              onClick={() => setStep('auth')}\n            >\n              Назад к входу\n            </Button>\n          </div>\n        )}\n\n        {step === 'auth' && (\n          <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as 'login' | 'register')} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 bg-cyberdark-800\">\n              <TabsTrigger value=\"login\" className=\"data-[state=active]:bg-cyberdark-700 text-white\">\n                Вход\n              </TabsTrigger>\n              <TabsTrigger value=\"register\" className=\"data-[state=active]:bg-cyberdark-700 text-white\">\n                Регистрация\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\" className=\"space-y-4 mt-4\">\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"login-email\" className=\"text-gray-300\">Email</Label>\n                  <Input\n                    id=\"login-email\"\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                    value={loginForm.email}\n                    onChange={(e) => setLoginForm({ ...loginForm, email: e.target.value })}\n                    className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"login-password\" className=\"text-gray-300\">Пароль</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"login-password\"\n                      type={showPassword ? 'text' : 'password'}\n                      value={loginForm.password}\n                      onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}\n                      className=\"bg-cyberdark-800 border-cyberdark-600 text-white pr-10\"\n                      required\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n                \n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : 'Войти'}\n                </Button>\n                \n                <div className=\"text-center\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    className=\"text-gray-400 hover:text-white text-sm\"\n                    onClick={() => setStep('forgot')}\n                  >\n                    Забыли пароль?\n                  </Button>\n                </div>\n              </form>\n            </TabsContent>\n\n            <TabsContent value=\"register\" className=\"space-y-4 mt-4\">\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"register-username\" className=\"text-gray-300\">Имя пользователя</Label>\n                  <Input\n                    id=\"register-username\"\n                    type=\"text\"\n                    placeholder=\"username\"\n                    value={registerForm.username}\n                    onChange={(e) => setRegisterForm({ ...registerForm, username: e.target.value })}\n                    className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"register-email\" className=\"text-gray-300\">Email</Label>\n                  <Input\n                    id=\"register-email\"\n                    type=\"email\"\n                    placeholder=\"your@email.com\"\n                    value={registerForm.email}\n                    onChange={(e) => setRegisterForm({ ...registerForm, email: e.target.value })}\n                    className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                    required\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"register-password\" className=\"text-gray-300\">Пароль</Label>\n                  <div className=\"relative\">\n                    <Input\n                      id=\"register-password\"\n                      type={showPassword ? 'text' : 'password'}\n                      value={registerForm.password}\n                      onChange={(e) => setRegisterForm({ ...registerForm, password: e.target.value })}\n                      className=\"bg-cyberdark-800 border-cyberdark-600 text-white pr-10\"\n                      required\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute right-0 top-0 h-full px-3 text-gray-400 hover:text-white\"\n                      onClick={() => setShowPassword(!showPassword)}\n                    >\n                      {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\n                    </Button>\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"register-confirm-password\" className=\"text-gray-300\">Подтвердите пароль</Label>\n                  <Input\n                    id=\"register-confirm-password\"\n                    type=\"password\"\n                    value={registerForm.confirmPassword}\n                    onChange={(e) => setRegisterForm({ ...registerForm, confirmPassword: e.target.value })}\n                    className=\"bg-cyberdark-800 border-cyberdark-600 text-white\"\n                    required\n                  />\n                </div>\n                \n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : 'Зарегистрироваться'}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":19784},"client/src/components/auth/LoginForm.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { useNavigate, useLocation, Link } from 'react-router-dom';\nimport { useAuth } from '@/lib/auth/newProvider';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { AlertCircle, Loader2 } from 'lucide-react';\n\nexport function LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n  const { login, isLoading, error } = useAuth();\n  const navigate = useNavigate();\n  const location = useLocation();\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await login(email, password);\n      // Redirect is handled in the auth provider\n    } catch (err) {\n      // Error is handled by the auth context\n      console.error('Login error:', err);\n    }\n  };\n\n  return (\n    <>\n      {error && (\n        <Alert variant=\"destructive\" className=\"mb-6\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n      \n      <form className=\"space-y-6\" onSubmit={handleSubmit}>\n        <div>\n          <Label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-200\">\n            Email\n          </Label>\n          <div className=\"mt-1\">\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              className=\"bg-cyberdark-700 border-cyberdark-600\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"your@email.com\"\n            />\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-200\">\n            Пароль\n          </Label>\n          <div className=\"mt-1\">\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              required\n              className=\"bg-cyberdark-700 border-cyberdark-600\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"••••••••\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <input\n              id=\"remember-me\"\n              name=\"remember-me\"\n              type=\"checkbox\"\n              checked={rememberMe}\n              onChange={(e) => setRememberMe(e.target.checked)}\n              className=\"h-4 w-4 rounded border-cyberdark-600 bg-cyberdark-700 text-cyberblue-500 focus:ring-cyberblue-500\"\n            />\n            <Label htmlFor=\"remember-me\" className=\"ml-2 block text-sm text-gray-300\">\n              Запомнить меня\n            </Label>\n          </div>\n\n          <div className=\"text-sm\">\n            <Link to=\"/forgot-password\" className=\"font-medium text-cyberblue-500 hover:text-cyberblue-400\">\n              Забыли пароль?\n            </Link>\n          </div>\n        </div>\n\n        <div>\n          <Button\n            type=\"submit\"\n            disabled={isLoading}\n            className=\"w-full bg-cyberblue-500 hover:bg-cyberblue-600\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Вход...\n              </>\n            ) : (\n              'Войти'\n            )}\n          </Button>\n        </div>\n      </form>\n    </>\n  );\n}\n","size_bytes":3796},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/lib/search.ts":{"content":"\n// Define the types of searchable content\nexport type SearchResult = {\n  id: string;\n  title: string;\n  description: string;\n  url: string;\n  type: 'challenge' | 'article' | 'community' | 'product' | 'page';\n};\n\n// Mock database of searchable content\n// In a real app, this would come from your API or database\nconst searchableContent: SearchResult[] = [\n  {\n    id: 'challenge-1',\n    title: 'Web Exploitation Basics',\n    description: 'Learn the fundamentals of web exploitation techniques.',\n    url: '/ctf/challenge/1',\n    type: 'challenge',\n  },\n  {\n    id: 'challenge-2',\n    title: 'Buffer Overflow 101',\n    description: 'Introduction to buffer overflow vulnerabilities and exploitation.',\n    url: '/ctf/challenge/2',\n    type: 'challenge',\n  },\n  {\n    id: 'article-1',\n    title: 'Understanding OWASP Top 10',\n    description: 'A comprehensive guide to the OWASP Top 10 web application security risks.',\n    url: '/knowledge/article/1',\n    type: 'article',\n  },\n  {\n    id: 'article-2',\n    title: 'Secure Coding Practices',\n    description: 'Best practices for writing secure code and preventing common vulnerabilities.',\n    url: '/knowledge/article/2',\n    type: 'article',\n  },\n  {\n    id: 'community-1',\n    title: 'Telegram Community',\n    description: 'Join our active Telegram community for discussions and help.',\n    url: 'https://t.me/HackCtrl_Official',\n    type: 'community',\n  },\n  {\n    id: 'product-1',\n    title: 'CyberWhale Pro Subscription',\n    description: 'Access premium challenges, resources, and support with our Pro subscription.',\n    url: '/products',\n    type: 'product',\n  },\n  {\n    id: 'page-home',\n    title: 'Home',\n    description: 'Main page of CyberWhale platform.',\n    url: '/',\n    type: 'page',\n  },\n  {\n    id: 'page-about',\n    title: 'About Us',\n    description: 'Learn about the CyberWhale team and our mission.',\n    url: '/about',\n    type: 'page',\n  },\n];\n\n// Search function that filters content based on query\n// Improved to better match exact user input and prioritize results\nexport function searchContent(query: string): SearchResult[] {\n  if (!query || query.trim() === '') {\n    return [];\n  }\n  \n  const normalizedQuery = query.toLowerCase().trim();\n  \n  // Score-based search results\n  const scoredResults = searchableContent.map(item => {\n    let score = 0;\n    const titleLower = item.title.toLowerCase();\n    const descLower = item.description.toLowerCase();\n    \n    // Exact matches in title get highest priority\n    if (titleLower === normalizedQuery) {\n      score += 100;\n    } \n    // Title starts with query\n    else if (titleLower.startsWith(normalizedQuery)) {\n      score += 75;\n    }\n    // Title contains query\n    else if (titleLower.includes(normalizedQuery)) {\n      score += 50;\n    }\n    \n    // Description exact match\n    if (descLower === normalizedQuery) {\n      score += 30;\n    }\n    // Description contains query\n    else if (descLower.includes(normalizedQuery)) {\n      score += 15;\n    }\n    \n    // Word match in title (for multi-word searches)\n    normalizedQuery.split(' ').forEach(word => {\n      if (word.length > 2 && titleLower.includes(word)) {\n        score += 10;\n      }\n    });\n    \n    // Word match in description\n    normalizedQuery.split(' ').forEach(word => {\n      if (word.length > 2 && descLower.includes(word)) {\n        score += 5;\n      }\n    });\n    \n    return { item, score };\n  }).filter(({ score }) => score > 0);\n  \n  // Sort by score (highest first) and return the items\n  return scoredResults\n    .sort((a, b) => b.score - a.score)\n    .map(({ item }) => item);\n}\n","size_bytes":3595},"client/src/pages/Index.tsx":{"content":"import React, { useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { motion, useScroll, useTransform } from 'framer-motion';\nimport { \n  Shield, \n  Code, \n  Terminal, \n  UserCheck, \n  Book, \n  Cpu, \n  Bot, \n  Database, \n  Users, \n  ArrowRight,\n  Zap,\n  Award,\n  Check,\n  Calendar\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport Navbar from '@/components/layout/Navbar';\nimport ChatAssistant from '@/components/layout/ChatAssistant';\n\nexport default function HomePage() {\n  const targetRef = useRef<HTMLDivElement>(null);\n  const { scrollYProgress } = useScroll({\n    target: targetRef,\n    offset: [\"start start\", \"end start\"]\n  });\n  \n  const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0]);\n  const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.8]);\n  const y = useTransform(scrollYProgress, [0, 0.5], [0, 100]);\n  \n  // Parallax effect for hero background\n  const parallaxY = useTransform(scrollYProgress, [0, 1], [0, 300]);\n\n  // Animate on scroll refs\n  const featuresRef = useRef<HTMLDivElement>(null);\n  const ctfRef = useRef<HTMLDivElement>(null);\n  const aiRef = useRef<HTMLDivElement>(null);\n  const communityRef = useRef<HTMLDivElement>(null);\n  const statsRef = useRef<HTMLDivElement>(null);\n  const testimonialsRef = useRef<HTMLDivElement>(null);\n  const ctaRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add('animate-fade-in');\n            entry.target.classList.add('opacity-100');\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    const elements = [\n      featuresRef.current,\n      ctfRef.current,\n      aiRef.current,\n      communityRef.current,\n      statsRef.current,\n      testimonialsRef.current,\n      ctaRef.current,\n    ];\n\n    elements.forEach((el) => {\n      if (el) {\n        el.classList.add('opacity-0');\n        observer.observe(el);\n      }\n    });\n\n    return () => {\n      elements.forEach((el) => {\n        if (el) observer.unobserve(el);\n      });\n    };\n  }, []);\n\n  const HeroStars = () => (\n    <div className=\"absolute inset-0 overflow-hidden\">\n      {[...Array(100)].map((_, i) => (\n        <div \n          key={i}\n          className=\"absolute rounded-full bg-white\"\n          style={{\n            width: Math.random() * 2 + 1 + 'px',\n            height: Math.random() * 2 + 1 + 'px',\n            top: Math.random() * 100 + '%',\n            left: Math.random() * 100 + '%',\n            opacity: Math.random() * 0.5 + 0.3,\n            animation: `pulse-light ${Math.random() * 3 + 2}s ease-in-out infinite ${Math.random() * 2}s`\n          }}\n        />\n      ))}\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900\">\n      <Navbar />\n      \n      {/* Hero section */}\n      <div ref={targetRef} className=\"relative pt-16 pb-32 overflow-hidden\">\n        <HeroStars />\n        \n        <motion.div \n          className=\"absolute inset-0 z-0\"\n          style={{ \n            backgroundImage: 'radial-gradient(circle at 50% 50%, rgba(59, 130, 246, 0.1) 0%, transparent 70%)',\n            y: parallaxY\n          }}\n        />\n        \n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-20 pb-24 sm:pt-24 sm:pb-32\">\n          <motion.div\n            style={{ opacity, scale, y }}\n            className=\"text-center max-w-4xl mx-auto\"\n          >\n            <Badge variant=\"outline\" className=\"mb-6 px-4 py-2 bg-cyberdark-800/80 backdrop-blur-md border-cyberdark-700 text-gray-300\">\n              Ваш путь к мастерству в кибербезопасности\n            </Badge>\n            \n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6 tracking-tight leading-tight\">\n              <span className=\"block text-white\">Освойте кибербезопасность с</span>\n              <span className=\"block text-cyberblue-500 mt-2\">CyberWhale</span>\n            </h1>\n            \n            <p className=\"text-xl text-gray-300 mb-10 max-w-3xl mx-auto\">\n              Продвинутые CTF-задания, обучение с помощью ИИ и профессиональные\n              инструменты безопасности. Присоединяйтесь к новому поколению специалистов\n              по кибербезопасности.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4\">\n              <Link to=\"/products\">\n                <Button className=\"text-white bg-cyberblue-500 hover:bg-cyberblue-600 btn-glow text-lg px-8 py-6\">\n                  Наши продукты\n                  <Zap className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Link to=\"/ctf\">\n                <Button variant=\"outline\" className=\"text-white text-lg px-8 py-6\">\n                  Смотреть задания\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n            </div>\n          </motion.div>\n        </div>\n        \n        <div className=\"absolute bottom-0 left-0 w-full h-16 bg-gradient-to-t from-cyberdark-900 to-transparent\"></div>\n      </div>\n      \n      {/* Features section */}\n      <div ref={featuresRef} className=\"transition-opacity duration-1000 bg-cyberdark-900 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-2xl font-bold text-cyberblue-400 mb-2\">ВОЗМОЖНОСТИ</h2>\n            <h3 className=\"text-3xl md:text-4xl font-bold text-white\">\n              Всё необходимое для освоения кибербезопасности\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm flex flex-col\">\n              <div className=\"bg-cyberdark-700 w-14 h-14 rounded-lg flex items-center justify-center mb-6\">\n                <Shield className=\"h-8 w-8 text-cyberblue-500\" />\n              </div>\n              <h4 className=\"text-xl font-bold text-white mb-2\">CTF Платформа</h4>\n              <p className=\"text-gray-300 mb-6 flex-grow\">\n                Практикуйтесь на реальных сценариях и соревнуйтесь в заданиях разной сложности.\n              </p>\n              <Link to=\"/ctf\" className=\"text-cyberblue-400 hover:text-cyberblue-300 font-medium flex items-center\">\n                Перейти к платформе\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Link>\n            </div>\n            \n            <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm flex flex-col\">\n              <div className=\"bg-cyberdark-700 w-14 h-14 rounded-lg flex items-center justify-center mb-6\">\n                <Bot className=\"h-8 w-8 text-cyberblue-500\" />\n              </div>\n              <h4 className=\"text-xl font-bold text-white mb-2\">ИИ Ассистент</h4>\n              <p className=\"text-gray-300 mb-6 flex-grow\">\n                Получайте мгновенную помощь и рекомендации от нашего продвинутого ИИ-ассистента.\n              </p>\n              <Link to=\"/ai-assistant\" className=\"text-cyberblue-400 hover:text-cyberblue-300 font-medium flex items-center\">\n                Познакомиться с ассистентом\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Link>\n            </div>\n            \n            <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm flex flex-col\">\n              <div className=\"bg-cyberdark-700 w-14 h-14 rounded-lg flex items-center justify-center mb-6\">\n                <Users className=\"h-8 w-8 text-cyberblue-500\" />\n              </div>\n              <h4 className=\"text-xl font-bold text-white mb-2\">Сообщество</h4>\n              <p className=\"text-gray-300 mb-6 flex-grow\">\n                Обменивайтесь опытом с другими профессионалами и энтузиастами кибербезопасности.\n              </p>\n              <Link to=\"/community\" className=\"text-cyberblue-400 hover:text-cyberblue-300 font-medium flex items-center\">\n                Присоединиться к сообществу\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Link>\n            </div>\n            \n            <div className=\"bg-cyberdark-800 rounded-lg p-6 border border-cyberdark-700 hover:border-cyberblue-500/50 transition-all duration-300 hover:shadow-glow-sm flex flex-col\">\n              <div className=\"bg-cyberdark-700 w-14 h-14 rounded-lg flex items-center justify-center mb-6\">\n                <Database className=\"h-8 w-8 text-cyberblue-500\" />\n              </div>\n              <h4 className=\"text-xl font-bold text-white mb-2\">База знаний</h4>\n              <p className=\"text-gray-300 mb-6 flex-grow\">\n                Получите доступ к обширной коллекции учебных материалов, руководств и лабораторных работ.\n              </p>\n              <Link to=\"/knowledge\" className=\"text-cyberblue-400 hover:text-cyberblue-300 font-medium flex items-center\">\n                Изучить материалы\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* CTF Platform section */}\n      <div ref={ctfRef} className=\"transition-opacity duration-1000 bg-gradient-to-b from-cyberdark-900 to-cyberdark-800 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"lg:flex lg:items-center lg:gap-12\">\n            <div className=\"lg:w-1/2 mb-12 lg:mb-0\">\n              <h2 className=\"text-2xl font-bold text-cyberblue-400 mb-2\">CTF ПЛАТФОРМА</h2>\n              <h3 className=\"text-3xl md:text-4xl font-bold text-white mb-6\">\n                Проверьте свои навыки в реальных сценариях\n              </h3>\n              <p className=\"text-xl text-gray-300 mb-8\">\n                Наша CTF платформа предлагает разнообразные задания по кибербезопасности, от начального до продвинутого уровня. \n                Решайте задачи, зарабатывайте очки и соревнуйтесь с другими участниками.\n              </p>\n              \n              <ul className=\"space-y-4 mb-8\">\n                <li className=\"flex\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">Реалистичные сценарии</span> - практические задания, основанные на реальных уязвимостях\n                  </p>\n                </li>\n                <li className=\"flex\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">Разные категории</span> - от веб-безопасности до криптографии и реверс-инжиниринга\n                  </p>\n                </li>\n                <li className=\"flex\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">Соревнования</span> - регулярные CTF турниры с ценными призами\n                  </p>\n                </li>\n              </ul>\n              \n              <Link to=\"/ctf\">\n                <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 btn-glow\">\n                  Перейти к заданиям\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"lg:w-1/2\">\n              <div className=\"glass-card rounded-lg overflow-hidden border border-cyberdark-700 shadow-lg\">\n                <div className=\"bg-cyberdark-800 p-4 border-b border-cyberdark-700\">\n                  <h4 className=\"font-medium text-white\">Capture The Flag</h4>\n                </div>\n                <div className=\"p-6\">\n                  <div className=\"mb-6\">\n                    <h5 className=\"text-xl font-bold text-white mb-4\">Статистика платформы</h5>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"bg-cyberdark-700 p-4 rounded-md\">\n                        <div className=\"text-2xl font-bold text-white\">25+</div>\n                        <div className=\"text-sm text-gray-400\">Активных заданий</div>\n                      </div>\n                      <div className=\"bg-cyberdark-700 p-4 rounded-md\">\n                        <div className=\"text-2xl font-bold text-white\">500+</div>\n                        <div className=\"text-sm text-gray-400\">Участников</div>\n                      </div>\n                      <div className=\"bg-cyberdark-700 p-4 rounded-md\">\n                        <div className=\"text-2xl font-bold text-white\">8</div>\n                        <div className=\"text-sm text-gray-400\">Категорий</div>\n                      </div>\n                      <div className=\"bg-cyberdark-700 p-4 rounded-md\">\n                        <div className=\"text-2xl font-bold text-white\">3</div>\n                        <div className=\"text-sm text-gray-400\">Уровня сложности</div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <h5 className=\"text-xl font-bold text-white mb-4\">Топ категорий</h5>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-cyberdark-600 flex items-center justify-center mr-3\">\n                        <Code className=\"h-4 w-4 text-cyberblue-400\" />\n                      </div>\n                      <div className=\"flex-grow\">\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-white\">Web</span>\n                          <span className=\"text-gray-400\">12 заданий</span>\n                        </div>\n                        <div className=\"w-full bg-cyberdark-600 rounded-full h-2\">\n                          <div className=\"bg-cyberblue-500 h-2 rounded-full\" style={{ width: '75%' }}></div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-cyberdark-600 flex items-center justify-center mr-3\">\n                        <Shield className=\"h-4 w-4 text-cyberblue-400\" />\n                      </div>\n                      <div className=\"flex-grow\">\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-white\">Криптография</span>\n                          <span className=\"text-gray-400\">8 заданий</span>\n                        </div>\n                        <div className=\"w-full bg-cyberdark-600 rounded-full h-2\">\n                          <div className=\"bg-cyberblue-500 h-2 rounded-full\" style={{ width: '50%' }}></div>\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center\">\n                      <div className=\"w-8 h-8 rounded-full bg-cyberdark-600 flex items-center justify-center mr-3\">\n                        <Cpu className=\"h-4 w-4 text-cyberblue-400\" />\n                      </div>\n                      <div className=\"flex-grow\">\n                        <div className=\"flex justify-between mb-1\">\n                          <span className=\"text-white\">Реверс-инжиниринг</span>\n                          <span className=\"text-gray-400\">9 заданий</span>\n                        </div>\n                        <div className=\"w-full bg-cyberdark-600 rounded-full h-2\">\n                          <div className=\"bg-cyberblue-500 h-2 rounded-full\" style={{ width: '60%' }}></div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* AI Assistant section */}\n      <div ref={aiRef} className=\"transition-opacity duration-1000 bg-cyberdark-800 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"lg:flex lg:items-center lg:gap-12 flex-row-reverse\">\n            <div className=\"lg:w-1/2 mb-12 lg:mb-0\">\n              <h2 className=\"text-2xl font-bold text-cyberblue-400 mb-2\">ИИ АССИСТЕНТ</h2>\n              <h3 className=\"text-3xl md:text-4xl font-bold text-white mb-6\">\n                Получайте мгновенную помощь и рекомендации\n              </h3>\n              <p className=\"text-xl text-gray-300 mb-8\">\n                Наш продвинутый ИИ-ассистент всегда готов помочь вам с изучением кибербезопасности, решением задач и \n                предоставлением персонализированных рекомендаций.\n              </p>\n              \n              <ul className=\"space-y-4 mb-8\">\n                <li className=\"flex\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">Персональный помощник</span> - задавайте вопросы и получайте конкретные ответы\n                  </p>\n                </li>\n                <li className=\"flex\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">Интеллектуальные подсказки</span> - получайте рекомендации по решению заданий CTF\n                  </p>\n                </li>\n                <li className=\"flex\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">Доступен 24/7</span> - круглосуточная поддержка в любое удобное время\n                  </p>\n                </li>\n              </ul>\n              \n              <Link to=\"/ai-assistant\">\n                <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 btn-glow\">\n                  Попробовать ИИ-ассистента\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"lg:w-1/2\">\n              <div className=\"glass-card rounded-lg overflow-hidden border border-cyberdark-700 shadow-lg\">\n                <div className=\"bg-cyberdark-800 p-4 border-b border-cyberdark-700 flex items-center\">\n                  <div className=\"w-8 h-8 bg-cyberblue-500 rounded-full flex items-center justify-center mr-2\">\n                    <Bot className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-white\">CyberWhale ИИ</h4>\n                    <div className=\"text-xs text-gray-400\">Уровень 1 • 0 очков</div>\n                  </div>\n                </div>\n                <div className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start max-w-[80%]\">\n                      <div className=\"bg-cyberdark-700 rounded-lg p-3 text-white\">\n                        Привет! Я CyberWhale, ваш ИИ-наставник по кибербезопасности. Давайте начнем наше увлекательное путешествие! 🖊️\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start ml-auto max-w-[80%]\">\n                      <div className=\"bg-cyberblue-500 rounded-lg p-3 text-white ml-auto\">\n                        Привет! Я хочу научиться кибербезопасности. С чего лучше начать?\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start max-w-[80%]\">\n                      <div className=\"bg-cyberdark-700 rounded-lg p-3 text-white\">\n                        Отличный вопрос! В кибербезопасности очень важно начинать с основ. Я рекомендую изучить наш раздел по веб-уязвимостям, где вы найдете материалы для начинающих. Также попробуйте решить несколько простых CTF-заданий для практики.\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6 pt-4 border-t border-cyberdark-700\">\n                    <div className=\"flex\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Задайте вопрос...\"\n                        className=\"bg-cyberdark-700 border-cyberdark-600 rounded-l-md flex-1 px-4 py-2 text-white\"\n                      />\n                      <button className=\"bg-cyberblue-500 text-white rounded-r-md px-4 flex items-center\">\n                        <ArrowRight className=\"h-5 w-5\" />\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Community section */}\n      <div ref={communityRef} className=\"transition-opacity duration-1000 bg-gradient-to-b from-cyberdark-800 to-cyberdark-900 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"lg:flex lg:items-center lg:gap-12\">\n            <div className=\"lg:w-1/2 mb-12 lg:mb-0\">\n              <h2 className=\"text-2xl font-bold text-cyberblue-400 mb-2\">СООБЩЕСТВО</h2>\n              <h3 className=\"text-3xl md:text-4xl font-bold text-white mb-6\">\n                Присоединяйтесь к нашей сети безопасности\n              </h3>\n              <p className=\"text-xl text-gray-300 mb-8\">\n                Присоединяйтесь к активному сообществу специалистов и энтузиастов кибербезопасности. \n                Обменивайтесь опытом, участвуйте в дискуссиях и расширяйте свою профессиональную сеть.\n              </p>\n              \n              <ul className=\"space-y-4 mb-8\">\n                <li className=\"flex items-center\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">5,000+ активных участников</span> - общайтесь с единомышленниками\n                  </p>\n                </li>\n                <li className=\"flex items-center\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">Каналы для обсуждений 24/7</span> - всегда найдется тема для разговора\n                  </p>\n                </li>\n                <li className=\"flex items-center\">\n                  <div className=\"flex-shrink-0 w-6 h-6 rounded-full bg-cyberblue-500/20 flex items-center justify-center mr-3\">\n                    <Check className=\"h-4 w-4 text-cyberblue-500\" />\n                  </div>\n                  <p className=\"text-gray-300\">\n                    <span className=\"font-medium text-white\">Еженедельные события и воркшопы</span> - регулярное обучение и нетворкинг\n                  </p>\n                </li>\n              </ul>\n              \n              <a href=\"https://t.me/HackCtrl_Official\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600 btn-glow\">\n                  Присоединиться к Telegram\n                  <ArrowRight className=\"ml-2 h-4 w-4\" />\n                </Button>\n              </a>\n            </div>\n            \n            <div className=\"lg:w-1/2 grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"glass-card rounded-lg overflow-hidden border border-cyberdark-700 shadow-lg\">\n                <div className=\"p-6\">\n                  <h5 className=\"text-xl font-bold text-white mb-4\">Обзор сообщества</h5>\n                  <ul className=\"space-y-4\">\n                    <li className=\"flex items-center\">\n                      <Users className=\"w-5 h-5 text-cyberblue-400 mr-3\" />\n                      <span className=\"text-gray-300\">5,000+ активных участников</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <Terminal className=\"w-5 h-5 text-cyberblue-400 mr-3\" />\n                      <span className=\"text-gray-300\">Каналы для обсуждений 24/7</span>\n                    </li>\n                    <li className=\"flex items-center\">\n                      <Calendar className=\"w-5 h-5 text-cyberblue-400 mr-3\" />\n                      <span className=\"text-gray-300\">Еженедельные события и воркшопы</span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"glass-card rounded-lg overflow-hidden border border-cyberdark-700 shadow-lg\">\n                <div className=\"p-6\">\n                  <h5 className=\"text-xl font-bold text-white mb-4\">Предстоящие события</h5>\n                  <ul className=\"space-y-4\">\n                    <li>\n                      <div className=\"flex items-center mb-1\">\n                        <div className=\"w-2 h-2 bg-cyberblue-500 rounded-full mr-2\"></div>\n                        <span className=\"text-xs text-cyberblue-400\">Завтра, 14:00 МСК</span>\n                      </div>\n                      <h6 className=\"font-medium text-white\">Воркшоп по веб-безопасности</h6>\n                      <p className=\"text-gray-400 text-sm\">Изучите распространенные веб-уязвимости и методы их предотвращения.</p>\n                    </li>\n                    <li>\n                      <div className=\"flex items-center mb-1\">\n                        <div className=\"w-2 h-2 bg-cyberblue-500 rounded-full mr-2\"></div>\n                        <span className=\"text-xs text-cyberblue-400\">Следующая неделя, 18:00 МСК</span>\n                      </div>\n                      <h6 className=\"font-medium text-white\">CTF Соревнование</h6>\n                      <p className=\"text-gray-400 text-sm\">Проверьте свои навыки в нашем ежемесячном соревновании.</p>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Stats section */}\n      <div ref={statsRef} className=\"transition-opacity duration-1000 bg-cyberdark-900 py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-2xl font-bold text-cyberblue-400 mb-2\">СТАТИСТИКА</h2>\n            <h3 className=\"text-3xl md:text-4xl font-bold text-white\">\n              Наши достижения в цифрах\n            </h3>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div className=\"bg-gradient-to-br from-cyberdark-800 to-cyberdark-700 rounded-lg p-6 border border-cyberdark-700 text-center\">\n              <div className=\"w-14 h-14 bg-cyberdark-700/50 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <UserCheck className=\"h-8 w-8 text-cyberblue-500\" />\n              </div>\n              <div className=\"text-4xl font-bold text-white mb-2\">5,000+</div>\n              <div className=\"text-gray-400\">Активных пользователей</div>\n            </div>\n            \n            <div className=\"bg-gradient-to-br from-cyberdark-800 to-cyberdark-700 rounded-lg p-6 border border-cyberdark-700 text-center\">\n              <div className=\"w-14 h-14 bg-cyberdark-700/50 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Shield className=\"h-8 w-8 text-cyberblue-500\" />\n              </div>\n              <div className=\"text-4xl font-bold text-white mb-2\">100+</div>\n              <div className=\"text-gray-400\">CTF заданий</div>\n            </div>\n            \n            <div className=\"bg-gradient-to-br from-cyberdark-800 to-cyberdark-700 rounded-lg p-6 border border-cyberdark-700 text-center\">\n              <div className=\"w-14 h-14 bg-cyberdark-700/50 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Book className=\"h-8 w-8 text-cyberblue-500\" />\n              </div>\n              <div className=\"text-4xl font-bold text-white mb-2\">50+</div>\n              <div className=\"text-gray-400\">Учебных материалов</div>\n            </div>\n            \n            <div className=\"bg-gradient-to-br from-cyberdark-800 to-cyberdark-700 rounded-lg p-6 border border-cyberdark-700 text-center\">\n              <div className=\"w-14 h-14 bg-cyberdark-700/50 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                <Award className=\"h-8 w-8 text-cyberblue-500\" />\n              </div>\n              <div className=\"text-4xl font-bold text-white mb-2\">20+</div>\n              <div className=\"text-gray-400\">Партнеров</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":33103},"client/src/pages/auth/Register.tsx":{"content":"\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { AuthLayout } from '@/components/auth/AuthLayout';\nimport { RegisterForm } from '@/components/auth/RegisterForm';\nimport { SocialLogin } from '@/components/auth/SocialLogin';\n\nexport default function Register() {\n  return (\n    <AuthLayout \n      title=\"Создать аккаунт\"\n      subtitle={\n        <>\n          Или{' '}\n          <Link to=\"/login\" className=\"font-medium text-cyberblue-500 hover:text-cyberblue-400\">\n            войти, если у вас уже есть аккаунт\n          </Link>\n        </>\n      }\n    >\n      <RegisterForm />\n      <SocialLogin type=\"register\" />\n    </AuthLayout>\n  );\n}\n","size_bytes":713},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./newRoutes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1924},"client/src/lib/auth/useAuthState.ts":{"content":"\nimport { useState, useEffect, useRef } from 'react';\nimport { Session } from '@supabase/supabase-js';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { User } from '@/types';\nimport { supabase } from '@/integrations/supabase/client';\nimport { handleUserLogin } from './utils';\nimport { toast } from '@/components/ui/use-toast';\n\nexport const useAuthState = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [loadingTimedOut, setLoadingTimedOut] = useState<boolean>(false);\n  const authInitialized = useRef<boolean>(false);\n  const userUpdateInProgress = useRef<boolean>(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    console.log(\"Auth provider mounted\");\n    \n    // Set a shorter timeout to force exit loading state after 2 seconds\n    const loadingTimeout = setTimeout(() => {\n      if (isLoading) {\n        console.log(\"Loading timed out, forcing exit loading state\");\n        setLoadingTimedOut(true);\n        setIsLoading(false);\n      }\n    }, 2000);\n    \n    // First set up the subscription\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (event, currentSession) => {\n        console.log('Auth state changed:', event);\n        \n        // Set session synchronously\n        setSession(currentSession);\n        \n        if (event === 'SIGNED_IN' && currentSession) {\n          if (userUpdateInProgress.current) return;\n          userUpdateInProgress.current = true;\n          \n          // Use setTimeout to prevent blocking the auth state change\n          setTimeout(async () => {\n            try {\n              const userProfile = await handleUserLogin(currentSession.user);\n              setUser(userProfile);\n              \n              const returnUrl = new URLSearchParams(location.search).get('returnUrl');\n              const redirectTo = returnUrl || '/';\n              if (location.pathname.includes('/login') || location.pathname.includes('/register')) {\n                navigate(redirectTo);\n              }\n              \n              toast({\n                title: \"Успешный вход\",\n                description: \"Добро пожаловать в CyberWhale!\",\n              });\n            } catch (err) {\n              console.error('Error loading user profile:', err);\n              setError('Ошибка загрузки профиля');\n            } finally {\n              setIsLoading(false);\n              userUpdateInProgress.current = false;\n            }\n          }, 0);\n        } else if (event === 'SIGNED_OUT') {\n          setUser(null);\n          setIsLoading(false);\n          setLoadingTimedOut(false); // Reset timeout state on sign-out\n        } else if (event === 'PASSWORD_RECOVERY') {\n          navigate('/reset-password');\n          setIsLoading(false);\n        } else if (event === 'USER_UPDATED') {\n          if (currentSession && !userUpdateInProgress.current) {\n            userUpdateInProgress.current = true;\n            \n            // Use setTimeout to prevent blocking the auth state change\n            setTimeout(async () => {\n              try {\n                const userProfile = await handleUserLogin(currentSession.user);\n                setUser(userProfile);\n              } catch (err) {\n                console.error('Error updating user profile:', err);\n              } finally {\n                setIsLoading(false);\n                userUpdateInProgress.current = false;\n              }\n            }, 0);\n          }\n        }\n      }\n    );\n    \n    // Then get the initial session (if not already initialized)\n    if (!authInitialized.current) {\n      const loadInitialSession = async () => {\n        try {\n          const { data: { session: currentSession } } = await supabase.auth.getSession();\n          console.log('Initial session:', currentSession);\n          \n          // Set session synchronously\n          setSession(currentSession);\n          \n          if (currentSession) {\n            if (userUpdateInProgress.current) return;\n            userUpdateInProgress.current = true;\n            \n            // Use setTimeout to prevent potential deadlocks\n            setTimeout(async () => {\n              try {\n                const userProfile = await handleUserLogin(currentSession.user);\n                setUser(userProfile);\n              } catch (err) {\n                console.error('Error loading initial user profile:', err);\n                setError('Ошибка загрузки профиля');\n              } finally {\n                setIsLoading(false);\n                authInitialized.current = true;\n                userUpdateInProgress.current = false;\n              }\n            }, 0);\n          } else {\n            setIsLoading(false);\n            authInitialized.current = true;\n          }\n        } catch (err) {\n          console.error('Error loading initial session:', err);\n          setError('Ошибка загрузки сессии');\n          setIsLoading(false);\n          authInitialized.current = true;\n        }\n      };\n      \n      loadInitialSession();\n    }\n    \n    return () => {\n      clearTimeout(loadingTimeout);\n      subscription.unsubscribe();\n    };\n  }, [navigate, location]);\n\n  return {\n    user,\n    setUser,\n    session,\n    setSession,\n    isLoading,\n    setIsLoading,\n    error,\n    setError,\n    loadingTimedOut\n  };\n};\n","size_bytes":5586},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/lib/auth/context.tsx":{"content":"\nimport { createContext } from 'react';\nimport { Session } from '@supabase/supabase-js';\nimport { User } from '@/types';\n\ninterface AuthContextType {\n  user: User | null;\n  session: Session | null;\n  isLoading: boolean;\n  error: string | null;\n  loadingTimedOut?: boolean;\n  login: (email: string, password: string) => Promise<Session | null>;\n  register: (username: string, email: string, password: string) => Promise<Session | null>;\n  logout: () => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  updatePassword: (password: string) => Promise<void>;\n  updateProfile: (updates: Partial<User>) => Promise<void>;\n  verifyOtp: (email: string, token: string) => Promise<void>;\n}\n\nexport const AuthContext = createContext<AuthContextType>({\n  user: null,\n  session: null,\n  isLoading: false,\n  error: null,\n  loadingTimedOut: false,\n  login: () => Promise.resolve(null),\n  register: () => Promise.resolve(null),\n  logout: () => Promise.resolve(),\n  resetPassword: () => Promise.resolve(),\n  updatePassword: () => Promise.resolve(),\n  updateProfile: () => Promise.resolve(),\n  verifyOtp: () => Promise.resolve(),\n});\n","size_bytes":1133},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertChallengeSchema } from \"@shared/schema\";\nimport { emailService } from \"./emailService\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Authentication middleware\ninterface AuthenticatedRequest extends Request {\n  user: { id: number; email: string; username: string };\n}\n\nconst authenticateToken = (req: Request, res: Response, next: NextFunction) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) return res.status(403).json({ message: 'Invalid token' });\n    (req as AuthenticatedRequest).user = user;\n    next();\n  });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const { username, email, password } = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(username);\n      if (existingUsername) {\n        return res.status(400).json({ message: \"Username already taken\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        avatar: null,\n        role: \"user\",\n        points: 0,\n        level: 1,\n      });\n\n      // Generate JWT\n      const token = jwt.sign(\n        { id: user.id, email: user.email, username: user.username },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      // Return user data without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, token });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: \"Invalid registration data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      // Find user\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check password\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Generate JWT\n      const token = jwt.sign(\n        { id: user.id, email: user.email, username: user.username },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      // Return user data without password\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword, token });\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: any, res: Response) => {\n    try {\n      const user = await storage.getUser(req.user.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  app.put(\"/api/auth/profile\", authenticateToken, async (req: any, res: Response) => {\n    try {\n      const updates = req.body;\n      delete updates.id;\n      delete updates.password;\n\n      const user = await storage.updateUser(req.user.id, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Chat assistant route (replacing Supabase Edge Function)\n  app.post(\"/api/chat\", async (req, res) => {\n    try {\n      const { message, history = [] } = req.body;\n\n      // Simple bot responses for cybersecurity context\n      const responses = [\n        \"Отличный вопрос! В кибербезопасности очень важно начинать с основ. Я рекомендую изучить наш раздел по веб-уязвимостям. Там вы найдете материалы для начинающих. Также попробуйте решить несколько простых CTF-заданий для практики.\",\n        \"Для начинающих в CTF рекомендую начать с простых задач в разделе Web. Там вы найдете задания для новичков с подробными объяснениями. Постепенно переходите к более сложным заданиям по мере получения опыта.\",\n        \"Криптография - увлекательное направление! Вы можете найти материалы в нашей базе знаний и практические задания на платформе CTF. Начните с изучения основных алгоритмов шифрования, таких как AES и RSA.\",\n        \"Обязательно ознакомьтесь с нашими лабораторными работами для практики. Теория важна, но практика — ключ к успеху в кибербезопасности. У нас есть виртуальные лаборатории для безопасного тестирования различных уязвимостей.\",\n        \"В нашем сообществе много опытных специалистов. Не стесняйтесь задавать вопросы и делиться своим опытом! Также регулярно проводятся мероприятия и вебинары, где вы можете получить новые знания и установить полезные контакты.\"\n      ];\n\n      const randomResponse = responses[Math.floor(Math.random() * responses.length)];\n      \n      res.json({ \n        botResponse: randomResponse,\n        success: true \n      });\n    } catch (error) {\n      console.error(\"Chat error:\", error);\n      res.status(500).json({ \n        botResponse: \"Произошла ошибка при обработке запроса. Пожалуйста, попробуйте позже.\",\n        success: false \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7399},"client/src/pages/auth/Login.tsx":{"content":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { AuthLayout } from '@/components/auth/AuthLayout';\nimport { SocialLogin } from '@/components/auth/SocialLogin';\nimport { LoginForm } from '@/components/auth/LoginForm';\nimport { useTranslation } from 'react-i18next';\n\nexport default function Login() {\n  const { t } = useTranslation();\n\n  return (\n    <AuthLayout \n      title={t('login.title')}\n      subtitle={\n        <span dangerouslySetInnerHTML={{ __html: t('login.subtitle') }} />\n      }\n    >\n      <LoginForm />\n      <SocialLogin type=\"login\" />\n    </AuthLayout>\n  );\n}","size_bytes":607},"replit.md":{"content":"# CyberWhale - Инновационная платформа кибербезопасности 2025\n\n## Overview\n\nCyberWhale - это российская инновационная платформа кибербезопасности, где пользователи создают и прокачивают эволюционирующих аватаров-хакеров, которые становятся ИИ-стражами. Платформа объединяет геймифицированное обучение, практические CTF тренажеры, персональную защиту от современных угроз и услуги аудита для бизнеса.\n\n### Уникальные особенности\n- **Эволюционирующие аватары**: Каждый пользователь создает уникального аватара-хакера с прокачкой через XP\n- **ИИ-ассистент CyberSentinel**: Персональный страж на базе YandexGPT с интеграцией российских баз данных\n- **Прогрессивный доступ**: Материалы разблокируются через развитие аватара (Lvl 1-5 базовые, Lvl 6-10 продвинутые, Lvl 11+ элитные)\n- **Локализованная защита**: Интеграция с российскими стандартами (152-ФЗ, ГосСОПКА) и базами данных (Роскомнадзор, МВД)\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom cybersecurity-themed dark mode design\n- **State Management**: TanStack React Query for server state, React Context for auth\n- **Routing**: React Router DOM for client-side navigation\n- **Internationalization**: react-i18next for multi-language support (Russian/English)\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database Provider**: Neon (serverless PostgreSQL)\n- **Session Management**: In-memory storage with planned database persistence\n- **API Structure**: RESTful API with `/api` prefix\n\n### Authentication System\n- **Provider**: Supabase Auth with custom user profiles\n- **Features**: \n  - Email/password authentication\n  - Social login support (prepared)\n  - Email verification\n  - Password reset functionality\n  - OTP verification\n- **Session Management**: JWT tokens with automatic refresh\n\n## Key Components\n\n### Модули платформы CyberWhale\n\n#### 1. Система аватаров и эволюции\n- **WebGL редактор**: Создание уникального аватара-хакера (киберпанк-стиль, неоновые элементы)\n- **Система прокачки**: XP через миссии, CTF, ежедневные квесты\n- **Уровни доступа**: \n  - Lvl 1-5: Базовые скилы (\"Антиспам-фильтр\")\n  - Lvl 6-10: Продвинутые (\"Анализ дипфейков\") \n  - Lvl 11+: Элитные (\"Предиктивная защита\")\n- **Инвентарь**: \"Неоновая крипто-броня\", \"Матричный плащ\", ИИ-гаджеты\n- **Монетизация**: Микротранзакции (200₽ ускорители XP, 500₽ редкие items)\n\n#### 2. CyberSentinel - ИИ-страж\n- **YandexGPT интеграция**: Персональный ИИ-ассистент\n- **Анализ угроз**: Проверка ссылок, файлов, звонков\n- **Российские базы**: Интеграция с Роскомнадзором, МВД\n- **Адаптивность**: Изучение паттернов пользователя, предсказание рисков\n- **Подписка**: Базовые проверки бесплатно, премиум (1000₽/мес) - безлимитный анализ\n\n#### 3. Образовательная экосистема\n- **CTF Arena**: Турниры с трансляциями и уникальными наградами  \n- **Миссии**: Адаптивные курсы с российскими кейсами\n- **Категории**: Web, Crypto, OSINT, Steganography, Reverse Engineering, Forensics, PWN, Network Security\n- **Прогрессивный контент**: Разблокировка через развитие аватара\n\n#### 4. Сообщество и карьера\n- **Чаты**: Дуэли аватаров, техническое общение\n- **Резюме**: Экспорт достижений для ИБ-вакансий\n- **Рейтинги**: Турнирные таблицы и достижения\n\n## Data Flow\n\n1. **Authentication Flow**: \n   - User registration/login via Supabase Auth\n   - Profile creation/retrieval from database\n   - Session management with JWT tokens\n\n2. **Challenge Flow**:\n   - Challenge listing with filtering/search\n   - Individual challenge access with authentication check\n   - Progress tracking and point accumulation\n\n3. **AI Assistant Flow**:\n   - Message sent to Supabase Edge Function\n   - Function calls Hugging Face API\n   - Response processed and returned to client\n\n4. **Content Management**:\n   - Static content served from client\n   - Dynamic content managed through mock data (prepared for database)\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: Neon PostgreSQL (serverless)\n- **Authentication**: Supabase (auth, storage, edge functions)\n- **AI/ML**: Hugging Face Inference API\n- **UI Components**: Radix UI primitives\n- **Styling**: Tailwind CSS\n- **Build Tools**: Vite, esbuild for production builds\n\n### Development Dependencies\n- **Language**: TypeScript\n- **Linting**: ESLint (configured via package.json)\n- **Package Manager**: npm\n- **Development Server**: tsx for TypeScript execution\n\n### Third-party Services\n- **CDN/Assets**: Potential external file hosting for challenge files\n- **Email**: Configured through Supabase for auth emails\n- **Analytics**: Prepared for integration (no current implementation)\n\n## Deployment Strategy\n\n### Development Environment\n- **Platform**: Replit with Node.js 20 and PostgreSQL 16 modules\n- **Port Configuration**: Internal port 5000, external port 80\n- **Hot Reload**: Vite HMR with middleware mode\n- **Database**: Neon serverless PostgreSQL with connection pooling\n\n### Production Deployment\n- **Build Process**: \n  1. Vite builds client-side React application\n  2. esbuild bundles server-side Express application\n  3. Static assets served from `dist/public`\n- **Runtime**: Node.js production server serving both API and static files\n- **Database**: Neon PostgreSQL with connection pooling\n- **Environment Variables**: DATABASE_URL, Supabase keys, Hugging Face API key\n\n### Infrastructure Considerations\n- **Scaling**: Serverless-ready architecture with Neon database\n- **Security**: Environment-based configuration, secure session management\n- **Monitoring**: Basic error handling with planned enhancement\n\n## План поэтапной разработки CyberWhale 2025\n\n### Этап 1: MVP - Фундамент (Q3 2025) ✅ ТЕКУЩИЙ ЭТАП\n**Цель**: Создать базовую инфраструктуру и первые компоненты\n\n#### Завершено:\n- ✅ Базовая архитектура (React + Node.js + PostgreSQL)\n- ✅ JWT аутентификация с email подтверждением\n- ✅ Админ панель (пароль: 301062Ki)\n- ✅ Интеграция официального логотипа CyberWhale\n\n#### В разработке:\n- 🔄 Система регистрации с созданием аватара\n- 🔄 Базовый WebGL редактор аватаров\n- 🔄 Система XP и прокачки (уровни 1-5)\n- 🔄 Первые CTF задания (3-5 базовых)\n\n### Этап 2: Аватары и геймификация (Q4 2025)\n**Цель**: Реализовать уникальную систему аватаров\n\n#### Запланировано:\n- 📋 WebGL редактор с киберпанк-элементами\n- 📋 Система инвентаря и одежды\n- 📋 Алгоритм эволюции аватара (Lvl 1-10)\n- 📋 Базовые микротранзакции (200₽ ускорители)\n- 📋 Первые 15-20 CTF заданий разных категорий\n\n### Этап 3: CyberSentinel ИИ-страж (Q1 2026) \n**Цель**: Интеграция ИИ-ассистента\n\n#### Запланировано:\n- 📋 YandexGPT API интеграция\n- 📋 Анализ ссылок и файлов на угрозы\n- 📋 Интеграция с российскими базами данных\n- 📋 Премиум подписка CyberSentinel (1000₽/мес)\n- 📋 Персональная адаптация ИИ\n\n### Этап 4: Полная экосистема (Q2 2026)\n**Цель**: Завершенная платформа с монетизацией\n\n#### Запланировано:  \n- 📋 CTF Arena с турнирами и трансляциями\n- 📋 Продвинутые уровни аватара (Lvl 11+)\n- 📋 Система чатов и дуэлей\n- 📋 Экспорт резюме для ИБ-вакансий\n- 📋 Услуги аудита для малого бизнеса\n\n### Этап 5: Масштабирование (Q3-Q4 2026)\n**Цель**: Рост до 50,000+ пользователей\n\n#### Запланировано:\n- 📋 Мобильное приложение\n- 📋 Партнерства с ИБ-компаниями  \n- 📋 Государственные контракты\n- 📋 Международная экспансия\n\n## Технические требования MVP\n\n### Backend API Endpoints (приоритет 1):\n```\nPOST /api/auth/register - регистрация с созданием аватара\nPOST /api/auth/verify-email - подтверждение email\nGET /api/user/avatar - получение данных аватара\nPUT /api/user/avatar - обновление аватара\nGET /api/ctf/challenges - список заданий\nPOST /api/ctf/submit - отправка решения\nPUT /api/user/xp - начисление опыта\n```\n\n### Схема базы данных (приоритет 1):\n```sql\nusers: id, email, username, password, verified, avatar_data, level, xp\navatars: id, user_id, name, appearance, items, stats\nchallenges: id, title, description, category, difficulty, points, flag\nuser_progress: user_id, challenge_id, completed, attempts\n```\n\n### Frontend компоненты (приоритет 1):\n- AvatarCreator - создание и редактирование аватара\n- CTFChallengePage - интерфейс решения заданий  \n- XPProgressBar - отображение прогресса\n- LevelUpModal - уведомления о повышении уровня\n\n## Changelog\n\n- Август 17, 2025: Создан детальный план разработки на основе бизнес-плана CyberWhale 2025\n- Август 17, 2025: Интегрирован официальный логотип в навигацию\n- June 27, 2025: Initial setup\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":11720},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  avatar: text(\"avatar\"),\n  role: text(\"role\").notNull().default(\"user\"),\n  points: integer(\"points\").notNull().default(0),\n  level: integer(\"level\").notNull().default(1),\n  emailVerified: boolean(\"email_verified\").notNull().default(false),\n  verificationCode: text(\"verification_code\"),\n  resetPasswordCode: text(\"reset_password_code\"),\n  resetPasswordExpires: timestamp(\"reset_password_expires\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// CTF Challenges table\nexport const challenges = pgTable(\"challenges\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // web, crypto, osint, etc.\n  difficulty: text(\"difficulty\").notNull(), // beginner, intermediate, advanced, expert\n  points: integer(\"points\").notNull(),\n  flag: text(\"flag\").notNull(),\n  hints: text(\"hints\").array(), // Array of hints\n  fileUrl: text(\"file_url\"), // Download link for challenge files\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  resetPasswordCode: true,\n  resetPasswordExpires: true,\n});\n\nexport const insertChallengeSchema = createInsertSchema(challenges).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertChallenge = z.infer<typeof insertChallengeSchema>;\nexport type Challenge = typeof challenges.$inferSelect;\n","size_bytes":2149},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":770},"client/src/pages/auth/ResetPassword.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '@/lib/auth';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Shield, AlertCircle, Loader2, CheckCircle, Lock } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\n\nexport default function ResetPassword() {\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const { updatePassword } = useAuth();\n  \n  useEffect(() => {\n    // Check if we have access token in URL (Supabase auth redirect)\n    const hashParams = new URLSearchParams(window.location.hash.substring(1));\n    const accessToken = hashParams.get('access_token');\n    \n    if (accessToken) {\n      // Set the access token in Supabase\n      supabase.auth.setSession({\n        access_token: accessToken,\n        refresh_token: hashParams.get('refresh_token') || '',\n      });\n    }\n  }, []);\n  \n  const validatePassword = (pass: string) => {\n    if (pass.length < 6) {\n      return 'Пароль должен содержать минимум 6 символов';\n    }\n    return null;\n  };\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // Validate passwords\n    const passwordError = validatePassword(password);\n    if (passwordError) {\n      setError(passwordError);\n      return;\n    }\n    \n    if (password !== confirmPassword) {\n      setError('Пароли не совпадают');\n      return;\n    }\n    \n    setLoading(true);\n    setError(null);\n    \n    try {\n      await updatePassword(password);\n      setIsSubmitted(true);\n    } catch (err: any) {\n      setError(err.message || 'Ошибка при обновлении пароля');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8 bg-cyberdark-900\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <Shield className=\"mx-auto h-12 w-12 text-cyberblue-500\" />\n          <h2 className=\"mt-6 text-3xl font-extrabold text-white\">\n            Сброс пароля\n          </h2>\n        </div>\n\n        <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-cyberdark-800 py-8 px-4 shadow sm:rounded-lg sm:px-10 border border-cyberdark-700\">\n            {isSubmitted ? (\n              <div className=\"text-center\">\n                <CheckCircle className=\"mx-auto h-12 w-12 text-green-500 mb-4\" />\n                <h3 className=\"text-xl font-medium text-white mb-2\">\n                  Пароль успешно изменен\n                </h3>\n                <p className=\"text-gray-400 mb-6\">\n                  Ваш пароль был успешно изменен. Теперь вы можете войти в систему с новым паролем.\n                </p>\n                <Button \n                  onClick={() => navigate('/login')}\n                  className=\"bg-cyberblue-500 hover:bg-cyberblue-600\"\n                >\n                  Перейти на страницу входа\n                </Button>\n              </div>\n            ) : (\n              <>\n                {error && (\n                  <Alert variant=\"destructive\" className=\"mb-6\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n                \n                <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                  <div>\n                    <Label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-200\">\n                      Новый пароль\n                    </Label>\n                    <div className=\"mt-1\">\n                      <Input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        required\n                        className=\"bg-cyberdark-700 border-cyberdark-600\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        placeholder=\"••••••••\"\n                      />\n                    </div>\n                    <p className=\"mt-2 text-sm text-gray-400\">\n                      Минимум 6 символов\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"confirm-password\" className=\"block text-sm font-medium text-gray-200\">\n                      Подтвердите новый пароль\n                    </Label>\n                    <div className=\"mt-1\">\n                      <Input\n                        id=\"confirm-password\"\n                        name=\"confirm-password\"\n                        type=\"password\"\n                        required\n                        className={`bg-cyberdark-700 border-cyberdark-600 ${\n                          confirmPassword && password !== confirmPassword ? 'border-red-500' : ''\n                        }`}\n                        value={confirmPassword}\n                        onChange={(e) => setConfirmPassword(e.target.value)}\n                        placeholder=\"••••••••\"\n                      />\n                    </div>\n                    {confirmPassword && password !== confirmPassword && (\n                      <p className=\"mt-1 text-xs text-red-500\">Пароли не совпадают</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <Button\n                      type=\"submit\"\n                      disabled={loading || !password || !confirmPassword || password !== confirmPassword}\n                      className=\"w-full bg-cyberblue-500 hover:bg-cyberblue-600\"\n                    >\n                      {loading ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Обновление...\n                        </>\n                      ) : (\n                        'Обновить пароль'\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6811},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/admin/index.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { \n  Shield, \n  Upload, \n  Download, \n  Plus, \n  FileJson, \n  Settings,\n  Users,\n  Database,\n  Search,\n  Filter,\n  Trash2,\n  Edit,\n  Eye,\n  CheckCircle,\n  XCircle,\n  Loader2,\n  FileText,\n  Newspaper,\n  Calendar,\n  Tag\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { toast } from '@/hooks/use-toast';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardFooter, \n  CardHeader, \n  CardTitle \n} from '@/components/ui/card';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { \n  Tabs, \n  TabsContent, \n  TabsList, \n  TabsTrigger \n} from \"@/components/ui/tabs\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Challenge, Article } from '@/types';\nimport { mockChallenges } from '@/data/challenges';\n\nexport default function AdminPanel() {\n  const navigate = useNavigate();\n  const [password, setPassword] = useState('');\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterCategory, setFilterCategory] = useState('all');\n  const [activeTab, setActiveTab] = useState('challenges');\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [processing, setProcessing] = useState(false);\n  const [challenges, setChallenges] = useState<Challenge[]>(mockChallenges);\n  const [articles, setArticles] = useState<Article[]>([]);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [editingItem, setEditingItem] = useState<any>(null);\n\n  // Проверка пароля\n  const handlePasswordSubmit = () => {\n    if (password === '301062Ki') {\n      setIsAuthenticated(true);\n      localStorage.setItem('admin_authenticated', 'true');\n      toast({\n        title: 'Успешный вход',\n        description: 'Добро пожаловать в админ-панель CyberWhale',\n      });\n    } else {\n      toast({\n        title: 'Неверный пароль',\n        description: 'Введите правильный пароль для доступа к админ-панели',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  useEffect(() => {\n    const adminAuth = localStorage.getItem('admin_authenticated');\n    if (adminAuth === 'true') {\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem('admin_authenticated');\n    setIsAuthenticated(false);\n    setPassword('');\n    navigate('/');\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-cyberdark-900 flex items-center justify-center\">\n        <Card className=\"bg-cyberdark-800 border-cyberdark-700 w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto w-12 h-12 bg-cyberblue-600 rounded-full flex items-center justify-center mb-4\">\n              <Shield className=\"w-6 h-6 text-white\" />\n            </div>\n            <CardTitle className=\"text-white text-2xl\">Админ-панель CyberWhale</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              Введите пароль для доступа к панели управления\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <Input\n                type=\"password\"\n                placeholder=\"Пароль администратора\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handlePasswordSubmit()}\n                className=\"bg-cyberdark-700 border-cyberdark-600 text-white\"\n              />\n              <Button onClick={handlePasswordSubmit} className=\"w-full bg-cyberblue-600 hover:bg-cyberblue-700\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                Войти в панель\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setImportFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const content = e.target?.result as string;\n          const data = JSON.parse(content);\n          \n          if (activeTab === 'challenges' && Array.isArray(data.challenges)) {\n            setChallenges([...challenges, ...data.challenges]);\n            toast({\n              title: 'Успешно',\n              description: `Импортировано ${data.challenges.length} заданий`,\n            });\n          } else if (activeTab === 'articles' && Array.isArray(data.articles)) {\n            setArticles([...articles, ...data.articles]);\n            toast({\n              title: 'Успешно',\n              description: `Импортировано ${data.articles.length} статей`,\n            });\n          }\n        } catch (error) {\n          toast({\n            title: 'Ошибка',\n            description: 'Неверный формат файла',\n            variant: 'destructive',\n          });\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  const handleExport = () => {\n    const data = {\n      challenges: challenges,\n      articles: articles,\n      exportDate: new Date().toISOString(),\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `cyberwhale-content-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast({\n      title: 'Экспорт завершен',\n      description: 'Контент сохранен в файл',\n    });\n  };\n\n  const handleDelete = (id: string, type: 'challenge' | 'article') => {\n    if (type === 'challenge') {\n      setChallenges(challenges.filter(c => c.id !== id));\n    } else {\n      setArticles(articles.filter(a => a.id !== id));\n    }\n    toast({\n      title: 'Удалено',\n      description: `${type === 'challenge' ? 'Задание' : 'Статья'} успешно удалено`,\n    });\n  };\n\n  const filteredChallenges = challenges.filter(challenge => {\n    const matchesSearch = challenge.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         challenge.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = filterCategory === 'all' || challenge.category === filterCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const filteredArticles = articles.filter(article => {\n    return article.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n           article.description.toLowerCase().includes(searchQuery.toLowerCase());\n  });\n\n  return (\n    <div className=\"min-h-screen bg-cyberdark-900 text-white\">\n      {/* Header */}\n      <div className=\"bg-cyberdark-800 border-b border-cyberdark-700 px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"w-8 h-8 text-cyberblue-500\" />\n              <h1 className=\"text-2xl font-bold\">Админ-панель CyberWhale</h1>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Badge variant=\"outline\" className=\"text-green-400 border-green-400\">\n              Авторизован\n            </Badge>\n            <Button variant=\"outline\" onClick={handleLogout}>\n              Выйти\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"p-6\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-cyberdark-800\">\n            <TabsTrigger value=\"challenges\" className=\"data-[state=active]:bg-cyberblue-600\">\n              <Database className=\"w-4 h-4 mr-2\" />\n              CTF Задания\n            </TabsTrigger>\n            <TabsTrigger value=\"articles\" className=\"data-[state=active]:bg-cyberblue-600\">\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Статьи\n            </TabsTrigger>\n            <TabsTrigger value=\"users\" className=\"data-[state=active]:bg-cyberblue-600\">\n              <Users className=\"w-4 h-4 mr-2\" />\n              Пользователи\n            </TabsTrigger>\n            <TabsTrigger value=\"settings\" className=\"data-[state=active]:bg-cyberblue-600\">\n              <Settings className=\"w-4 h-4 mr-2\" />\n              Настройки\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Controls Bar */}\n          <div className=\"flex items-center justify-between py-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Search className=\"w-4 h-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Поиск...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-64 bg-cyberdark-800 border-cyberdark-600\"\n                />\n              </div>\n              {activeTab === 'challenges' && (\n                <Select value={filterCategory} onValueChange={setFilterCategory}>\n                  <SelectTrigger className=\"w-48 bg-cyberdark-800 border-cyberdark-600\">\n                    <SelectValue placeholder=\"Категория\" />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-cyberdark-800 border-cyberdark-600\">\n                    <SelectItem value=\"all\">Все категории</SelectItem>\n                    <SelectItem value=\"web\">Web Security</SelectItem>\n                    <SelectItem value=\"crypto\">Cryptography</SelectItem>\n                    <SelectItem value=\"osint\">OSINT</SelectItem>\n                    <SelectItem value=\"steganography\">Steganography</SelectItem>\n                    <SelectItem value=\"reverse-engineering\">Reverse Engineering</SelectItem>\n                    <SelectItem value=\"forensics\">Forensics</SelectItem>\n                    <SelectItem value=\"pwn\">PWN</SelectItem>\n                    <SelectItem value=\"programming\">Programming</SelectItem>\n                    <SelectItem value=\"network\">Network</SelectItem>\n                  </SelectContent>\n                </Select>\n              )}\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button onClick={handleExport} variant=\"outline\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Экспорт\n              </Button>\n              <Button asChild>\n                <label className=\"cursor-pointer\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  Импорт\n                  <input\n                    type=\"file\"\n                    accept=\".json\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                  />\n                </label>\n              </Button>\n              <Button onClick={() => setShowCreateDialog(true)}>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Создать\n              </Button>\n            </div>\n          </div>\n\n          {/* CTF Challenges Tab */}\n          <TabsContent value=\"challenges\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredChallenges.map((challenge) => (\n                <Card key={challenge.id} className=\"bg-cyberdark-800 border-cyberdark-700 hover:border-cyberblue-500 transition-colors\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"text-white text-lg\">{challenge.title}</CardTitle>\n                      <Badge variant=\"outline\" className={`\n                        ${challenge.difficulty === 'beginner' ? 'text-green-400 border-green-400' : ''}\n                        ${challenge.difficulty === 'intermediate' ? 'text-yellow-400 border-yellow-400' : ''}\n                        ${challenge.difficulty === 'advanced' ? 'text-orange-400 border-orange-400' : ''}\n                        ${challenge.difficulty === 'expert' ? 'text-red-400 border-red-400' : ''}\n                      `}>\n                        {challenge.difficulty}\n                      </Badge>\n                    </div>\n                    <CardDescription className=\"text-gray-400\">\n                      {challenge.description.substring(0, 100)}...\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-400\">Категория:</span>\n                        <Badge variant=\"secondary\">{challenge.category}</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-400\">Очки:</span>\n                        <span className=\"text-cyberblue-400 font-semibold\">{challenge.points}</span>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-400\">Решено:</span>\n                        <span className=\"text-green-400\">{challenge.solvedBy} раз</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                  <CardFooter className=\"flex justify-between\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => setEditingItem(challenge)}>\n                      <Edit className=\"w-4 h-4 mr-1\" />\n                      Редактировать\n                    </Button>\n                    <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDelete(challenge.id, 'challenge')}>\n                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                      Удалить\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Articles Tab */}\n          <TabsContent value=\"articles\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredArticles.map((article) => (\n                <Card key={article.id} className=\"bg-cyberdark-800 border-cyberdark-700 hover:border-cyberblue-500 transition-colors\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white text-lg\">{article.title}</CardTitle>\n                    <CardDescription className=\"text-gray-400\">\n                      {article.description.substring(0, 100)}...\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-400\">Категория:</span>\n                        <Badge variant=\"secondary\">{article.category}</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-400\">Уровень:</span>\n                        <Badge variant=\"outline\">{article.level}</Badge>\n                      </div>\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-gray-400\">Время чтения:</span>\n                        <span className=\"text-cyberblue-400\">{article.readTime} мин</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                  <CardFooter className=\"flex justify-between\">\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => setEditingItem(article)}>\n                      <Edit className=\"w-4 h-4 mr-1\" />\n                      Редактировать\n                    </Button>\n                    <Button variant=\"destructive\" size=\"sm\" onClick={() => handleDelete(article.id, 'article')}>\n                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                      Удалить\n                    </Button>\n                  </CardFooter>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Users Tab */}\n          <TabsContent value=\"users\" className=\"space-y-4\">\n            <Card className=\"bg-cyberdark-800 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Управление пользователями</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Скоро будет добавлено управление пользователями\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </TabsContent>\n\n          {/* Settings Tab */}\n          <TabsContent value=\"settings\" className=\"space-y-4\">\n            <Card className=\"bg-cyberdark-800 border-cyberdark-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Настройки системы</CardTitle>\n                <CardDescription className=\"text-gray-400\">\n                  Скоро будут добавлены настройки платформы\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":18426},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"TECHNICAL_DOCUMENTATION.md":{"content":"# 🔰 ПОЛНАЯ ТЕХНИЧЕСКАЯ ДОКУМЕНТАЦИЯ CYBERWHALE 2025\n# Руководство по работе с файлами для ИИ-ассистентов\n\n## 📋 СОДЕРЖАНИЕ\n1. [Общая архитектура проекта](#общая-архитектура-проекта)\n2. [Корневые конфигурационные файлы](#корневые-конфигурационные-файлы)\n3. [Backend (Сервер)](#backend-сервер)\n4. [Frontend (Клиент)](#frontend-клиент)\n5. [Shared (Общие файлы)](#shared-общие-файлы)\n6. [Сценарии для работы с ИИ](#сценарии-для-работы-с-ии)\n7. [Порядок разработки новых функций](#порядок-разработки-новых-функций)\n\n---\n\n## 🏗️ ОБЩАЯ АРХИТЕКТУРА ПРОЕКТА\n\n### Структура проекта:\n```\nCyberWhale/\n├── 📁 client/          # Frontend (React + TypeScript)\n├── 📁 server/          # Backend (Node.js + Express)\n├── 📁 shared/          # Общие типы и схемы данных\n├── 📁 supabase/        # Конфигурация Supabase (не используется активно)\n├── 📄 package.json     # Зависимости и скрипты\n├── 📄 vite.config.ts   # Конфигурация Vite\n├── 📄 drizzle.config.ts # Конфигурация ORM\n└── 📄 tailwind.config.ts # Конфигурация стилей\n```\n\n### Технологический стек:\n- **Frontend:** React 18, TypeScript, TailwindCSS, shadcn/ui, TanStack Query\n- **Backend:** Node.js, Express, TypeScript\n- **Database:** PostgreSQL с Drizzle ORM\n- **Authentication:** JWT токены с email верификацией\n- **Build Tools:** Vite для фронтенда, esbuild для бэкенда\n\n---\n\n## ⚙️ КОРНЕВЫЕ КОНФИГУРАЦИОННЫЕ ФАЙЛЫ\n\n### 📄 `package.json`\n**Назначение:** Управление зависимостями и скриптами проекта\n**За что отвечает:**\n- Список всех библиотек проекта\n- Скрипты запуска (`npm run dev`, `npm run build`)\n- Настройки TypeScript и Node.js\n\n**Когда изменять:**\n- Добавление новых библиотек\n- Изменение скриптов сборки\n- Обновление версий пакетов\n\n**Важные скрипты:**\n- `npm run dev` - запуск в режиме разработки\n- `npm run build` - сборка для продакшн\n- `npm run db:push` - синхронизация схемы БД\n\n---\n\n### 📄 `vite.config.ts`\n**Назначение:** Конфигурация сборщика Vite\n**За что отвечает:**\n- Настройки алиасов импортов (`@/` = `client/src/`)\n- Плагины для React и TypeScript\n- Конфигурация dev сервера\n\n**🚫 ВАЖНО:** НИКОГДА не изменяйте этот файл без крайней необходимости!\n\n---\n\n### 📄 `tailwind.config.ts`\n**Назначение:** Конфигурация CSS фреймворка TailwindCSS\n**За что отвечает:**\n- Цветовая схема проекта\n- Кастомные классы и анимации\n- Настройки темной темы\n\n**Когда изменять:**\n- Добавление новых цветов\n- Создание кастомных анимаций\n- Настройка брейкпоинтов\n\n---\n\n### 📄 `drizzle.config.ts`  \n**Назначение:** Конфигурация ORM для работы с базой данных\n**За что отвечает:**\n- Подключение к PostgreSQL\n- Путь к схемам базы данных\n- Настройки миграций\n\n**🚫 ВАЖНО:** НИКОГДА не изменяйте этот файл!\n\n---\n\n## 🛠️ BACKEND (СЕРВЕР)\n\n### 📁 `server/` - Структура бэкенда\n\n### 📄 `server/index.ts` \n**Назначение:** Главный файл запуска сервера\n**За что отвечает:**\n- Создание Express приложения\n- Подключение middleware\n- Настройка логирования запросов\n- Запуск сервера на порту 5000\n\n**Зависимости:**\n- `server/newRoutes.ts` - маршруты API\n- `server/vite.ts` - интеграция с Vite\n\n**Когда изменять:**\n- Добавление глобальных middleware\n- Изменение настроек сервера\n- Настройка CORS или других политик\n\n---\n\n### 📄 `server/newRoutes.ts`\n**Назначение:** Основные API маршруты сервера\n**За что отвечает:**\n- Все эндпоинты аутентификации (`/api/auth/*`)\n- Управление пользователями\n- CRUD операции для CTF заданий\n- Админ панель API (`/api/admin/*`)\n- Чат с ИИ-ассистентом (`/api/chat`)\n\n**Ключевые эндпоинты:**\n```typescript\n// Аутентификация\nPOST /api/auth/register          // Регистрация\nPOST /api/auth/verify-email      // Подтверждение email\nPOST /api/auth/login             // Вход\nPOST /api/auth/forgot-password   // Восстановление пароля\nPOST /api/auth/reset-password    // Сброс пароля\nGET  /api/auth/me               // Получение данных пользователя\nPUT  /api/auth/profile          // Обновление профиля\n\n// CTF задания\nGET  /api/challenges            // Список заданий\nGET  /api/challenges/:id        // Получение задания\nPOST /api/admin/challenges      // Создание задания (admin)\nPUT  /api/admin/challenges/:id  // Обновление задания (admin)\nDELETE /api/admin/challenges/:id // Удаление задания (admin)\n\n// Админ панель\nPOST /api/admin/verify-password // Проверка пароля админа\n\n// ИИ-ассистент\nPOST /api/chat                  // Общение с ботом\n```\n\n**Зависимости:**\n- `server/storage.ts` - работа с базой данных\n- `server/emailService.ts` - отправка email\n- `shared/schema.ts` - типы и валидация\n\n**Когда изменять:**\n- Добавление новых API эндпоинтов\n- Изменение логики аутентификации\n- Добавление новых функций\n\n---\n\n### 📄 `server/storage.ts`\n**Назначение:** Слой доступа к данным (Data Access Layer)\n**За что отвечает:**\n- Интерфейс `IStorage` - контракт для работы с данными\n- Класс `DatabaseStorage` - реализация для PostgreSQL\n- Все операции с пользователями и заданиями в БД\n\n**Ключевые методы:**\n```typescript\n// Пользователи\ngetUser(id: number)\ngetUserByEmail(email: string)\ncreateUser(user: InsertUser)\nupdateUser(id: number, updates: Partial<User>)\nverifyUserEmail(userId: number)\n\n// CTF задания  \ngetAllChallenges()\ngetChallenge(id: number)\ncreateChallenge(challenge: InsertChallenge)\nupdateChallenge(id: number, updates: Partial<Challenge>)\ndeleteChallenge(id: number)\n```\n\n**Зависимости:**\n- `server/db.ts` - подключение к БД\n- `shared/schema.ts` - типы данных\n\n**Когда изменять:**\n- Добавление новых операций с БД\n- Создание новых сущностей\n- Оптимизация запросов\n\n---\n\n### 📄 `server/db.ts`\n**Назначение:** Подключение к базе данных\n**За что отвечает:**\n- Создание соединения с PostgreSQL через Drizzle ORM\n- Экспорт объекта `db` для выполнения запросов\n\n**Когда изменять:**\n- Изменение параметров подключения к БД\n- Настройка пула соединений\n\n---\n\n### 📄 `server/emailService.ts`\n**Назначение:** Сервис отправки email уведомлений\n**За что отвечает:**\n- Генерация кодов подтверждения\n- Отправка email для верификации\n- Отправка кодов восстановления пароля\n\n**Когда изменять:**\n- Интеграция с реальным email провайдером (SendGrid)\n- Изменение шаблонов писем\n- Добавление новых типов уведомлений\n\n---\n\n### 📄 `server/vite.ts`\n**Назначение:** Интеграция сервера с Vite для разработки\n**За что отвечает:**\n- Настройка dev middleware для hot reload\n- Обслуживание статических файлов в продакшн\n\n**🚫 ВАЖНО:** НИКОГДА не изменяйте этот файл!\n\n---\n\n## 🎨 FRONTEND (КЛИЕНТ)\n\n### 📁 `client/` - Структура фронтенда\n\n### 📄 `client/src/main.tsx`\n**Назначение:** Точка входа React приложения\n**За что отвечает:**\n- Рендер корневого компонента App\n- Подключение к DOM элементу\n\n**Когда изменять:** Крайне редко, только для глобальных настроек\n\n---\n\n### 📄 `client/src/App.tsx`\n**Назначение:** Главный компонент приложения\n**За что отвечает:**\n- Настройка роутинга (React Router DOM)\n- Подключение провайдеров (Auth, Query Client, Toasts, Tooltips)\n- Определение всех маршрутов приложения\n- Подключение глобальных компонентов (Navbar, Footer)\n\n**Ключевые маршруты:**\n```typescript\n// Главные страницы\n/                    // Главная страница\n/ctf                 // CTF платформа  \n/knowledge           // База знаний\n/ai-assistant        // ИИ-ассистент\n/community           // Сообщество\n/products            // Продукты\n\n// Аутентификация\n/login               // Вход\n/register            // Регистрация\n/forgot-password     // Восстановление пароля\n/verify-otp          // Подтверждение кода\n\n// Пользовательские\n/profile             // Профиль\n/settings            // Настройки\n\n// Админ панель\n/admin               // Админ панель\n/admin/challenges/*  // Управление заданиями\n```\n\n**Зависимости:**\n- Все страницы из `client/src/pages/`\n- Глобальные компоненты из `client/src/components/layout/`\n- Провайдер аутентификации `client/src/lib/auth/AuthProvider.tsx`\n\n**Когда изменять:**\n- Добавление новых страниц и маршрутов\n- Изменение глобальных настроек\n- Подключение новых провайдеров\n\n---\n\n### 📁 `client/src/pages/` - Страницы приложения\n\n#### Основные страницы:\n\n### 📄 `client/src/pages/Index.tsx`\n**Назначение:** Главная страница сайта\n**За что отвечает:** Лендинг с описанием платформы CyberWhale\n\n### 📄 `client/src/pages/ctf/index.tsx`\n**Назначение:** Главная страница CTF платформы\n**За что отвечает:** Список категорий заданий, поиск, фильтрация\n\n### 📄 `client/src/pages/ctf/ChallengePage.tsx`\n**Назначение:** Страница отдельного CTF задания\n**За что отвечает:** Отображение задания, форма для отправки флага\n\n### 📄 `client/src/pages/ctf/CategoryChallenges.tsx`\n**Назначение:** Страница заданий определенной категории\n**За что отвечает:** Фильтрация заданий по категории (Web, Crypto, OSINT и т.д.)\n\n#### Страницы аутентификации (`client/src/pages/auth/`):\n\n### 📄 `client/src/pages/auth/Login.tsx`\n**Назначение:** Страница входа в систему\n**За что отвечает:**\n- Форма логина (email + пароль)\n- Интеграция с AuthProvider\n- Обработка ошибок аутентификации\n\n### 📄 `client/src/pages/auth/Register.tsx`\n**Назначение:** Страница регистрации\n**За что отвечает:**\n- Форма регистрации (username + email + пароль)\n- Валидация данных\n- Переход к подтверждению email\n\n### 📄 `client/src/pages/auth/EmailConfirm.tsx`\n**Назначение:** Страница подтверждения email\n**За что отвечает:**\n- Форма ввода кода подтверждения\n- Повторная отправка кода\n\n### 📄 `client/src/pages/auth/ForgotPassword.tsx` & `ResetPassword.tsx`\n**Назначение:** Восстановление пароля\n**За что отвечают:** Двухэтапное восстановление пароля через email\n\n#### Админ страницы (`client/src/pages/admin/`):\n\n### 📄 `client/src/pages/admin/FinalAdminPanel.tsx`\n**Назначение:** Главная страница админ панели\n**За что отвечает:**\n- Авторизация админа (пароль: 301062Ki)\n- Управление CTF заданиями (CRUD)\n- Статистика платформы\n\n**🔑 Пароль администратора:** `301062Ki`\n\n---\n\n### 📁 `client/src/components/` - Компоненты\n\n#### Layout компоненты (`client/src/components/layout/`):\n\n### 📄 `client/src/components/layout/Navbar.tsx`\n**Назначение:** Навигационная панель сайта\n**За что отвечает:**\n- Логотип CyberWhale (интегрирован официальный логотип)\n- Главное меню навигации\n- Кнопки входа/регистрации или меню пользователя\n- Адаптивный дизайн\n\n**Зависимости:**\n- `client/src/lib/auth/AuthProvider.tsx` - для состояния аутентификации\n- Логотип из `@assets/ChatGPT Image...png`\n\n### 📄 `client/src/components/layout/Footer.tsx`\n**Назначение:** Подвал сайта\n**За что отвечает:** Информация о проекте, ссылки\n\n### 📄 `client/src/components/layout/UserMenu.tsx`\n**Назначение:** Выпадающее меню пользователя\n**За что отвечает:** Профиль, настройки, выход\n\n### 📄 `client/src/components/layout/AuthModalWrapper.tsx`\n**Назначение:** Обертка для модальных окон аутентификации\n**За что отвечает:** Управление отображением форм входа/регистрации\n\n#### Auth компоненты (`client/src/components/auth/`):\n\n### 📄 `client/src/components/auth/LoginForm.tsx`\n**Назначение:** Форма входа в систему\n**За что отвечает:**\n- Валидация email и пароля\n- Интеграция с AuthProvider\n- Обработка ошибок\n\n### 📄 `client/src/components/auth/RegisterForm.tsx`\n**Назначение:** Форма регистрации\n**За что отвечает:**\n- Валидация данных регистрации\n- Создание нового пользователя\n\n#### UI компоненты (`client/src/components/ui/`):\n**Назначение:** Переиспользуемые компоненты интерфейса (shadcn/ui)\n**За что отвечают:** \n- `button.tsx` - кнопки всех типов\n- `input.tsx` - поля ввода  \n- `card.tsx` - карточки контента\n- `dialog.tsx` - модальные окна\n- `toast.tsx` - уведомления\n- и другие базовые UI элементы\n\n**Когда изменять:** При необходимости кастомизации дизайна\n\n---\n\n### 📁 `client/src/lib/` - Библиотеки и утилиты\n\n### 📄 `client/src/lib/auth/AuthProvider.tsx`\n**Назначение:** Контекст аутентификации для всего приложения\n**За что отвечает:**\n- Управление состоянием пользователя\n- Методы входа, регистрации, выхода\n- JWT токен менеджмент  \n- API вызовы к серверу\n\n**Ключевые методы:**\n```typescript\n// Аутентификация\nregister(username, email, password)\nverifyEmail(email, code)  \nlogin(email, password)\nlogout()\n\n// Восстановление пароля\nforgotPassword(email)\nresetPassword(email, code, newPassword)\nresendVerification(email)\n\n// Профиль\nupdateProfile(updates)\n```\n\n**Зависимости:**\n- `client/src/hooks/use-toast.ts` - для уведомлений\n- Серверные API эндпоинты `/api/auth/*`\n\n**Когда изменять:**\n- Добавление новых методов аутентификации\n- Изменение логики работы с токенами\n- Интеграция с внешними auth провайдерами\n\n### 📄 `client/src/lib/api.ts`\n**Назначение:** HTTP клиент для работы с сервером\n**За что отвечает:**\n- Автоматическое добавление JWT токенов к запросам\n- Методы для auth операций\n- Обработка ошибок HTTP\n\n**Когда использовать:**\n- Вместо прямых fetch запросов к серверу\n- Для централизованной обработки ошибок\n\n### 📄 `client/src/lib/utils.ts`\n**Назначение:** Утилитарные функции\n**За что отвечает:** Общие helper функции для фронтенда\n\n---\n\n### 📁 `client/src/data/` - Данные и константы\n\n### 📄 `client/src/data/challenges.ts`\n**Назначение:** Моковые данные CTF заданий для разработки\n**За что отвечает:** Примеры заданий для тестирования интерфейса\n\n### 📄 `client/src/data/challengeData.ts`  \n**Назначение:** Дополнительные данные заданий\n**За что отвечает:** Расширенная информация о категориях и сложности\n\n---\n\n### 📁 `client/src/types/` - TypeScript типы\n\n### 📄 `client/src/types/index.ts`\n**Назначение:** Основные типы для фронтенда\n**За что отвечает:** Интерфейсы и типы компонентов\n\n### 📄 `client/src/types/supabase.ts`\n**Назначение:** Типы для Supabase (не используется активно)\n\n---\n\n## 🤝 SHARED (ОБЩИЕ ФАЙЛЫ)\n\n### 📄 `shared/schema.ts`\n**Назначение:** ЦЕНТРАЛЬНАЯ схема данных проекта\n**За что отвечает:**\n- Определение таблиц базы данных (Drizzle ORM)\n- Zod схемы для валидации\n- TypeScript типы для frontend и backend\n\n**Ключевые таблицы:**\n```typescript\n// Пользователи\nusers: {\n  id: serial().primaryKey(),\n  username: text().notNull().unique(),\n  email: text().notNull().unique(),\n  password: text().notNull(),\n  role: text().default(\"user\"),\n  points: integer().default(0),\n  level: integer().default(1),\n  emailVerified: boolean().default(false),\n  // ... другие поля\n}\n\n// CTF задания\nchallenges: {\n  id: serial().primaryKey(),\n  title: text().notNull(),\n  description: text().notNull(),\n  category: text().notNull(),        // web, crypto, osint...\n  difficulty: text().notNull(),      // beginner, intermediate...\n  points: integer().notNull(),\n  flag: text().notNull(),\n  hints: text().array(),             // массив подсказок\n  fileUrl: text(),                   // файлы задания\n  isActive: boolean().default(true),\n  // ... timestamps\n}\n```\n\n**Экспортируемые типы:**\n- `User` - тип пользователя для выборки\n- `InsertUser` - тип для создания пользователя\n- `Challenge` - тип задания для выборки  \n- `InsertChallenge` - тип для создания задания\n\n**🔥 КРИТИЧЕСКИ ВАЖНО:**\n- Этот файл используется и frontend, и backend\n- Любые изменения схемы влияют на всю систему\n- Всегда синхронизируйте с БД через `npm run db:push`\n\n**Когда изменять:**\n- Добавление новых таблиц\n- Изменение структуры данных\n- Добавление новых полей\n\n---\n\n## 🤖 СЦЕНАРИИ ДЛЯ РАБОТЫ С ИИ\n\n### 🎯 Разработка новых UI компонентов\n**Какие файлы скинуть ИИ:**\n```\nclient/src/components/ui/button.tsx      # Пример существующего компонента\nclient/src/components/ui/card.tsx        # Паттерны дизайна\nclient/index.css                         # Глобальные стили и CSS переменные  \ntailwind.config.ts                       # Настройки TailwindCSS\nclient/src/lib/utils.ts                  # Утилиты для стилей\n```\n\n**Объяснить ИИ:** \"Создай новый UI компонент, следуя существующим паттернам дизайна\"\n\n---\n\n### 🔐 Работа с аутентификацией\n**Какие файлы скинуть ИИ:**\n```\nclient/src/lib/auth/AuthProvider.tsx     # Контекст аутентификации\nserver/newRoutes.ts                      # API эндпоинты auth\nshared/schema.ts                         # Схема пользователей\nclient/src/pages/auth/Login.tsx          # Пример auth страницы\n```\n\n**Объяснить ИИ:** \"Измени логику аутентификации или добавь новые auth методы\"\n\n---\n\n### 🗄️ Работа с базой данных\n**Какие файлы скинуть ИИ:**\n```\nshared/schema.ts                         # Схемы таблиц\nserver/storage.ts                        # Интерфейс работы с БД\nserver/db.ts                             # Подключение к БД\ndrizzle.config.ts                        # Конфигурация ORM\n```\n\n**Объяснить ИИ:** \"Добавь новую таблицу или измени структуру данных\"\n\n---\n\n### 🌐 Создание API эндпоинтов  \n**Какие файлы скинуть ИИ:**\n```\nserver/newRoutes.ts                      # Существующие маршруты\nserver/storage.ts                        # Методы работы с данными\nshared/schema.ts                         # Типы данных\nserver/index.ts                          # Основная настройка сервера\n```\n\n**Объяснить ИИ:** \"Создай новый API эндпоинт для [функциональность]\"\n\n---\n\n### 🎨 Работа со стилями и темизацией\n**Какие файлы скинуть ИИ:**\n```\nclient/index.css                         # Глобальные стили\ntailwind.config.ts                       # Конфигурация Tailwind\nclient/src/components/ui/                # Существующие компоненты\nclient/src/App.css                       # Дополнительные стили\n```\n\n**Объяснить ИИ:** \"Измени дизайн системы или добавь новые стили\"\n\n---\n\n### 📄 Создание новых страниц\n**Какие файлы скинуть ИИ:**\n```\nclient/src/App.tsx                       # Для добавления роутов\nclient/src/pages/Index.tsx               # Пример существующей страницы\nclient/src/components/layout/Navbar.tsx  # Для навигации\nclient/src/lib/auth/AuthProvider.tsx     # Если нужна авторизация\n```\n\n**Объяснить ИИ:** \"Создай новую страницу с роутингом\"\n\n---\n\n### 🧩 Интеграция новых функций (аватары, XP система)\n**Какие файлы скинуть ИИ:**\n```\nshared/schema.ts                         # Для новых таблиц БД\nserver/storage.ts                        # Для новых методов данных\nserver/newRoutes.ts                      # Для новых API\nclient/src/lib/auth/AuthProvider.tsx     # Для интеграции с пользователем\nclient/src/pages/profile/index.tsx       # Для отображения данных\n```\n\n**Объяснить ИИ:** \"Добавь систему аватаров с XP и уровнями согласно бизнес-плану\"\n\n---\n\n### 🐛 Дебаг и исправление ошибок\n**Какие файлы скинуть ИИ:**\n```\n[Проблемный файл]                        # Файл с ошибкой\n[Связанные файлы]                        # Файлы, которые взаимодействуют\npackage.json                             # Зависимости и скрипты\n```\n\n**Объяснить ИИ:** \"Исправь ошибку: [описание проблемы]\"\n\n---\n\n## 🛠️ ПОРЯДОК РАЗРАБОТКИ НОВЫХ ФУНКЦИЙ\n\n### Этап 1: Планирование и схема данных\n1. **Обновляем** `shared/schema.ts` - добавляем новые таблицы/поля\n2. **Синхронизируем** БД: `npm run db:push`\n3. **Проверяем** типы по всему проекту\n\n### Этап 2: Backend разработка\n1. **Обновляем** `server/storage.ts` - добавляем методы работы с данными\n2. **Добавляем** API в `server/newRoutes.ts` - создаем эндпоинты\n3. **Тестируем** API через Postman или curl\n\n### Этап 3: Frontend разработка\n1. **Создаем/обновляем** компоненты UI в `client/src/components/`\n2. **Добавляем** страницы в `client/src/pages/`\n3. **Обновляем** роутинг в `client/src/App.tsx`\n4. **Интегрируем** с AuthProvider если нужно\n\n### Этап 4: Тестирование и деплой\n1. **Запускаем** `npm run dev` - проверяем в браузере\n2. **Тестируем** все потоки пользователя\n3. **Исправляем** найденные проблемы\n\n---\n\n## 🎯 СПЕЦИФИЧНЫЕ ЗАДАЧИ CYBERWHALE\n\n### Добавление системы аватаров\n**Файлы для ИИ:**\n```\nshared/schema.ts                         # Новая таблица avatars\nserver/storage.ts                        # CRUD для аватаров  \nserver/newRoutes.ts                      # API /api/avatars/*\nclient/src/pages/profile/index.tsx       # Отображение аватара\n```\n\n### Система XP и уровней\n**Файлы для ИИ:**\n```\nshared/schema.ts                         # Поля points, level, xp в users\nserver/storage.ts                        # Методы начисления XP\nclient/src/components/ui/progress.tsx    # Прогресс-бар XP\n```\n\n### CTF задания и турниры\n**Файлы для ИИ:**\n```\nshared/schema.ts                         # Таблицы challenges, submissions\nserver/newRoutes.ts                      # API для CTF\nclient/src/pages/ctf/                    # Все CTF компоненты\nclient/src/data/challenges.ts            # Данные заданий\n```\n\n### ИИ-ассистент CyberSentinel\n**Файлы для ИИ:**\n```\nserver/newRoutes.ts                      # Эндпоинт /api/chat\nclient/src/pages/ai-assistant/index.tsx # Интерфейс чата\nclient/src/lib/api.ts                    # Метод для чата\n```\n\n---\n\n## 📝 ВАЖНЫЕ НАПОМИНАНИЯ\n\n### 🚫 Файлы которые НИКОГДА не изменяют:\n- `vite.config.ts` - настроен для проекта\n- `drizzle.config.ts` - конфигурация БД\n- `server/vite.ts` - интеграция с Vite\n- `package.json` - только через npm или с разрешения\n\n### 🔑 Пароли и секреты:\n- **Админ панель:** `301062Ki`\n- **JWT Secret:** `process.env.JWT_SECRET`\n- **Database URL:** `process.env.DATABASE_URL`\n\n### 🗂️ Алиасы импортов:\n- `@/` = `client/src/`\n- `@shared/` = `shared/`\n- `@assets/` = `client/public/attached_assets/`\n\n### 📱 Особенности разработки:\n- Сервер и клиент запускаются одной командой: `npm run dev`\n- Порт разработки: `5000`\n- Hot reload настроен автоматически\n- TypeScript проверки включены\n\n---\n\n## 🎯 ЗАКЛЮЧЕНИЕ\n\nЭта документация покрывает 100% файлов проекта CyberWhale. Используй её чтобы точно знать какие файлы скидывать ИИ для любых задач разработки. \n\n**Помни:** \n- Всегда начинай с `shared/schema.ts` для любых изменений данных\n- Используй существующие паттерны и компоненты  \n- Тестируй изменения локально перед коммитом\n- Следуй архитектуре проекта\n\n**Удачной разработки CyberWhale! 🐋⚡**","size_bytes":31122},"client/src/pages/auth/EmailConfirm.tsx":{"content":"\nimport React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Button } from '@/components/ui/button';\nimport { Shield, CheckCircle, XCircle, Loader2 } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\n\nexport default function EmailConfirm() {\n  const [status, setStatus] = useState<'loading' | 'success' | 'error'>('loading');\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\n  const navigate = useNavigate();\n  \n  useEffect(() => {\n    const processEmailConfirmation = async () => {\n      try {\n        // Check if we have access token in URL (Supabase auth redirect)\n        const hashParams = new URLSearchParams(window.location.hash.substring(1));\n        const accessToken = hashParams.get('access_token');\n        \n        if (!accessToken) {\n          setStatus('error');\n          setErrorMessage('Ссылка подтверждения недействительна или устарела.');\n          return;\n        }\n        \n        // Set the session\n        const { error } = await supabase.auth.setSession({\n          access_token: accessToken,\n          refresh_token: hashParams.get('refresh_token') || '',\n        });\n        \n        if (error) {\n          throw error;\n        }\n        \n        setStatus('success');\n        \n        // Redirect to home page after a delay\n        setTimeout(() => {\n          navigate('/');\n        }, 3000);\n      } catch (error: any) {\n        console.error('Email confirmation error:', error);\n        setStatus('error');\n        setErrorMessage(error.message || 'Произошла ошибка при подтверждении email.');\n      }\n    };\n    \n    processEmailConfirmation();\n  }, [navigate]);\n  \n  return (\n    <div className=\"min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8 bg-cyberdark-900\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <Shield className=\"mx-auto h-12 w-12 text-cyberblue-500\" />\n          <h2 className=\"mt-6 text-3xl font-extrabold text-white\">\n            Подтверждение Email\n          </h2>\n        </div>\n\n        <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-cyberdark-800 py-8 px-4 shadow sm:rounded-lg sm:px-10 border border-cyberdark-700\">\n            <div className=\"text-center\">\n              {status === 'loading' && (\n                <>\n                  <Loader2 className=\"mx-auto h-12 w-12 text-cyberblue-500 animate-spin mb-4\" />\n                  <h3 className=\"text-xl font-medium text-white mb-2\">\n                    Проверка подтверждения...\n                  </h3>\n                  <p className=\"text-gray-400\">\n                    Пожалуйста, подождите, мы проверяем ваше подтверждение email.\n                  </p>\n                </>\n              )}\n              \n              {status === 'success' && (\n                <>\n                  <CheckCircle className=\"mx-auto h-12 w-12 text-green-500 mb-4\" />\n                  <h3 className=\"text-xl font-medium text-white mb-2\">\n                    Email успешно подтвержден\n                  </h3>\n                  <p className=\"text-gray-400 mb-6\">\n                    Ваш email был успешно подтвержден. Вы будете перенаправлены на главную страницу через несколько секунд.\n                  </p>\n                  <Link to=\"/\">\n                    <Button className=\"bg-cyberblue-500 hover:bg-cyberblue-600\">\n                      Перейти на главную страницу\n                    </Button>\n                  </Link>\n                </>\n              )}\n              \n              {status === 'error' && (\n                <>\n                  <XCircle className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n                  <h3 className=\"text-xl font-medium text-white mb-2\">\n                    Ошибка подтверждения\n                  </h3>\n                  <p className=\"text-gray-400 mb-6\">\n                    {errorMessage || 'Произошла ошибка при подтверждении вашего email.'}\n                  </p>\n                  <div className=\"flex flex-col space-y-3\">\n                    <Link to=\"/login\">\n                      <Button className=\"w-full bg-cyberblue-500 hover:bg-cyberblue-600\">\n                        Перейти на страницу входа\n                      </Button>\n                    </Link>\n                    <Link to=\"/\">\n                      <Button variant=\"outline\" className=\"w-full\">\n                        Вернуться на главную\n                      </Button>\n                    </Link>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5061},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/types/supabase.ts":{"content":"\nexport type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport interface Database {\n  public: {\n    Tables: {\n      profiles: {\n        Row: {\n          id: string\n          username: string\n          avatar_url: string | null\n          level: number\n          points: number\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id: string\n          username: string\n          avatar_url?: string | null\n          level?: number\n          points?: number\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          username?: string\n          avatar_url?: string | null\n          level?: number\n          points?: number\n          created_at?: string\n          updated_at?: string\n        }\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n  }\n}\n\n","size_bytes":1013},"client/src/pages/auth/ForgotPassword.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAuth } from '@/lib/auth';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Shield, AlertCircle, Loader2, CheckCircle } from 'lucide-react';\n\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState('');\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { resetPassword, isLoading, error } = useAuth();\n  \n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      await resetPassword(email);\n      setIsSubmitted(true);\n    } catch (err) {\n      // Error is handled by the auth context\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8 bg-cyberdark-900\">\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n        <div className=\"text-center\">\n          <Shield className=\"mx-auto h-12 w-12 text-cyberblue-500\" />\n          <h2 className=\"mt-6 text-3xl font-extrabold text-white\">\n            Восстановление пароля\n          </h2>\n          <p className=\"mt-2 text-sm text-gray-400\">\n            Вспомнили пароль?{' '}\n            <Link to=\"/login\" className=\"font-medium text-cyberblue-500 hover:text-cyberblue-400\">\n              Вернуться к входу\n            </Link>\n          </p>\n        </div>\n\n        <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-cyberdark-800 py-8 px-4 shadow sm:rounded-lg sm:px-10 border border-cyberdark-700\">\n            {isSubmitted ? (\n              <div className=\"text-center\">\n                <CheckCircle className=\"mx-auto h-12 w-12 text-green-500 mb-4\" />\n                <h3 className=\"text-xl font-medium text-white mb-2\">\n                  Проверьте вашу почту\n                </h3>\n                <p className=\"text-gray-400 mb-6\">\n                  Мы отправили ссылку для сброса пароля на {email}. Нажмите на ссылку в письме, чтобы сбросить пароль.\n                </p>\n                <p className=\"text-gray-400 text-sm\">\n                  Не получили письмо?{' '}\n                  <button \n                    onClick={() => setIsSubmitted(false)}\n                    className=\"font-medium text-cyberblue-500 hover:text-cyberblue-400\"\n                  >\n                    Отправить снова\n                  </button>\n                </p>\n              </div>\n            ) : (\n              <>\n                {error && (\n                  <Alert variant=\"destructive\" className=\"mb-6\">\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertDescription>{error}</AlertDescription>\n                  </Alert>\n                )}\n                \n                <form className=\"space-y-6\" onSubmit={handleSubmit}>\n                  <div>\n                    <Label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-200\">\n                      Email\n                    </Label>\n                    <div className=\"mt-1\">\n                      <Input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        autoComplete=\"email\"\n                        required\n                        className=\"bg-cyberdark-700 border-cyberdark-600\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        placeholder=\"your@email.com\"\n                      />\n                    </div>\n                    <p className=\"mt-2 text-sm text-gray-400\">\n                      Мы отправим вам ссылку для сброса пароля.\n                    </p>\n                  </div>\n\n                  <div>\n                    <Button\n                      type=\"submit\"\n                      disabled={isLoading}\n                      className=\"w-full bg-cyberblue-500 hover:bg-cyberblue-600\"\n                    >\n                      {isLoading ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Отправка...\n                        </>\n                      ) : (\n                        'Сбросить пароль'\n                      )}\n                    </Button>\n                  </div>\n                </form>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4773},"server/emailService.ts":{"content":"// Simple email simulation service for development\n// In production, this would send real emails\n\ninterface EmailData {\n  to: string;\n  subject: string;\n  text: string;\n  html?: string;\n}\n\nexport class EmailService {\n  private static instance: EmailService;\n  private verificationCodes: Map<string, { code: string; expires: Date }> = new Map();\n\n  public static getInstance(): EmailService {\n    if (!EmailService.instance) {\n      EmailService.instance = new EmailService();\n    }\n    return EmailService.instance;\n  }\n\n  // Generate 6-digit verification code\n  generateVerificationCode(): string {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  // Simulate sending email by logging to console\n  async sendEmail(emailData: EmailData): Promise<boolean> {\n    try {\n      console.log('\\n=== EMAIL ОТПРАВЛЕН ===');\n      console.log(`Кому: ${emailData.to}`);\n      console.log(`Тема: ${emailData.subject}`);\n      console.log(`Сообщение: ${emailData.text}`);\n      console.log('=====================\\n');\n      \n      // In development, we'll also show this in the response\n      return true;\n    } catch (error) {\n      console.error('Email sending error:', error);\n      return false;\n    }\n  }\n\n  async sendVerificationEmail(email: string, code: string): Promise<boolean> {\n    const emailData: EmailData = {\n      to: email,\n      subject: 'CyberWhale - Подтверждение регистрации',\n      text: `Ваш код подтверждения: ${code}\\n\\nВведите этот код на сайте для завершения регистрации.\\n\\nКод действителен 15 минут.`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #1a365d;\">CyberWhale - Подтверждение регистрации</h2>\n          <p>Добро пожаловать в CyberWhale!</p>\n          <div style=\"background: #f7fafc; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;\">\n            <h3 style=\"color: #2d3748;\">Ваш код подтверждения:</h3>\n            <div style=\"font-size: 32px; font-weight: bold; color: #3182ce; letter-spacing: 8px;\">${code}</div>\n          </div>\n          <p>Введите этот код на сайте для завершения регистрации.</p>\n          <p style=\"color: #718096; font-size: 14px;\">Код действителен 15 минут.</p>\n        </div>\n      `\n    };\n\n    return await this.sendEmail(emailData);\n  }\n\n  async sendPasswordResetEmail(email: string, code: string): Promise<boolean> {\n    const emailData: EmailData = {\n      to: email,\n      subject: 'CyberWhale - Восстановление пароля',\n      text: `Код для восстановления пароля: ${code}\\n\\nВведите этот код на сайте для сброса пароля.\\n\\nКод действителен 15 минут.`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #1a365d;\">CyberWhale - Восстановление пароля</h2>\n          <p>Вы запросили восстановление пароля.</p>\n          <div style=\"background: #f7fafc; padding: 20px; border-radius: 8px; text-align: center; margin: 20px 0;\">\n            <h3 style=\"color: #2d3748;\">Код для восстановления:</h3>\n            <div style=\"font-size: 32px; font-weight: bold; color: #e53e3e; letter-spacing: 8px;\">${code}</div>\n          </div>\n          <p>Введите этот код на сайте для сброса пароля.</p>\n          <p style=\"color: #718096; font-size: 14px;\">Код действителен 15 минут.</p>\n        </div>\n      `\n    };\n\n    return await this.sendEmail(emailData);\n  }\n\n  // Store verification code temporarily (in production, use Redis or similar)\n  storeVerificationCode(email: string, code: string): void {\n    const expires = new Date();\n    expires.setMinutes(expires.getMinutes() + 15); // 15 minutes expiry\n    this.verificationCodes.set(email, { code, expires });\n  }\n\n  // Verify code\n  verifyCode(email: string, inputCode: string): boolean {\n    const stored = this.verificationCodes.get(email);\n    if (!stored) return false;\n    \n    if (new Date() > stored.expires) {\n      this.verificationCodes.delete(email);\n      return false;\n    }\n    \n    if (stored.code === inputCode) {\n      this.verificationCodes.delete(email);\n      return true;\n    }\n    \n    return false;\n  }\n}\n\nexport const emailService = EmailService.getInstance();","size_bytes":4680}},"version":2}